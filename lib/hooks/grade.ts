/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Grade } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateGrade(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Grade | undefined), DefaultError, Prisma.GradeCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Grade | undefined), DefaultError, Prisma.GradeCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GradeCreateArgs, DefaultError, Grade, true>('Grade', 'POST', `${endpoint}/grade/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GradeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GradeCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GradeCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GradeCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGrade(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GradeCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GradeCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GradeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Grade', 'POST', `${endpoint}/grade/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GradeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GradeCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GradeCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GradeCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGrade<TArgs extends Prisma.GradeFindManyArgs, TQueryFnData = Array<Prisma.GradeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.GradeFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.GradeFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Grade', `${endpoint}/grade/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGrade<TArgs extends Prisma.GradeFindManyArgs, TQueryFnData = Array<Prisma.GradeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.GradeFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.GradeFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Grade', `${endpoint}/grade/findMany`, args, options, fetch);
}

export function useFindUniqueGrade<TArgs extends Prisma.GradeFindUniqueArgs, TQueryFnData = Prisma.GradeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.GradeFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.GradeFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Grade', `${endpoint}/grade/findUnique`, args, options, fetch);
}

export function useFindFirstGrade<TArgs extends Prisma.GradeFindFirstArgs, TQueryFnData = Prisma.GradeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.GradeFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.GradeFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Grade', `${endpoint}/grade/findFirst`, args, options, fetch);
}

export function useUpdateGrade(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Grade | undefined), DefaultError, Prisma.GradeUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Grade | undefined), DefaultError, Prisma.GradeUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GradeUpdateArgs, DefaultError, Grade, true>('Grade', 'PUT', `${endpoint}/grade/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GradeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GradeUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GradeUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GradeUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGrade(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GradeUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GradeUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GradeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Grade', 'PUT', `${endpoint}/grade/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GradeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GradeUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GradeUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GradeUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGrade(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Grade | undefined), DefaultError, Prisma.GradeUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Grade | undefined), DefaultError, Prisma.GradeUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GradeUpsertArgs, DefaultError, Grade, true>('Grade', 'POST', `${endpoint}/grade/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GradeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GradeUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GradeUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GradeUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGrade(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Grade | undefined), DefaultError, Prisma.GradeDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Grade | undefined), DefaultError, Prisma.GradeDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GradeDeleteArgs, DefaultError, Grade, true>('Grade', 'DELETE', `${endpoint}/grade/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GradeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GradeDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GradeDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GradeDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Grade, Prisma.GradeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGrade(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GradeDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GradeDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GradeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Grade', 'DELETE', `${endpoint}/grade/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GradeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GradeDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GradeDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GradeDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGrade<TArgs extends Prisma.GradeAggregateArgs, TQueryFnData = Prisma.GetGradeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.GradeAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.GradeAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Grade', `${endpoint}/grade/aggregate`, args, options, fetch);
}

export function useGroupByGrade<TArgs extends Prisma.GradeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GradeGroupByArgs['orderBy'] } : { orderBy?: Prisma.GradeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GradeGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GradeGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GradeGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GradeGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GradeGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GradeGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Grade', `${endpoint}/grade/groupBy`, args, options, fetch);
}

export function useCountGrade<TArgs extends Prisma.GradeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GradeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.GradeCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.GradeCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Grade', `${endpoint}/grade/count`, args, options, fetch);
}

export function useCheckGrade<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isDeleted?: boolean; creatorId?: string; updaterId?: string; name?: string; description?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Grade', `${endpoint}/grade/check`, args, options, fetch);
}
