/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Subject } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateSubject(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Subject | undefined), DefaultError, Prisma.SubjectCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Subject | undefined), DefaultError, Prisma.SubjectCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubjectCreateArgs, DefaultError, Subject, true>('Subject', 'POST', `${endpoint}/subject/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubjectCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubjectCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubjectCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubjectCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManySubject(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubjectCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubjectCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubjectCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Subject', 'POST', `${endpoint}/subject/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubjectCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubjectCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubjectCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubjectCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManySubject<TArgs extends Prisma.SubjectFindManyArgs, TQueryFnData = Array<Prisma.SubjectGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubjectFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubjectFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subject', `${endpoint}/subject/findMany`, args, options, fetch);
}

export function useInfiniteFindManySubject<TArgs extends Prisma.SubjectFindManyArgs, TQueryFnData = Array<Prisma.SubjectGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubjectFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubjectFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Subject', `${endpoint}/subject/findMany`, args, options, fetch);
}

export function useFindUniqueSubject<TArgs extends Prisma.SubjectFindUniqueArgs, TQueryFnData = Prisma.SubjectGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubjectFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubjectFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subject', `${endpoint}/subject/findUnique`, args, options, fetch);
}

export function useFindFirstSubject<TArgs extends Prisma.SubjectFindFirstArgs, TQueryFnData = Prisma.SubjectGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubjectFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubjectFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subject', `${endpoint}/subject/findFirst`, args, options, fetch);
}

export function useUpdateSubject(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Subject | undefined), DefaultError, Prisma.SubjectUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Subject | undefined), DefaultError, Prisma.SubjectUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubjectUpdateArgs, DefaultError, Subject, true>('Subject', 'PUT', `${endpoint}/subject/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubjectUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubjectUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubjectUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubjectUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManySubject(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubjectUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubjectUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubjectUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Subject', 'PUT', `${endpoint}/subject/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubjectUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubjectUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubjectUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubjectUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertSubject(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Subject | undefined), DefaultError, Prisma.SubjectUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Subject | undefined), DefaultError, Prisma.SubjectUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubjectUpsertArgs, DefaultError, Subject, true>('Subject', 'POST', `${endpoint}/subject/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubjectUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubjectUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubjectUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubjectUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteSubject(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Subject | undefined), DefaultError, Prisma.SubjectDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Subject | undefined), DefaultError, Prisma.SubjectDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubjectDeleteArgs, DefaultError, Subject, true>('Subject', 'DELETE', `${endpoint}/subject/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubjectDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubjectDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubjectDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.SubjectDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Subject, Prisma.SubjectGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManySubject(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubjectDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SubjectDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.SubjectDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Subject', 'DELETE', `${endpoint}/subject/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.SubjectDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.SubjectDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubjectDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.SubjectDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateSubject<TArgs extends Prisma.SubjectAggregateArgs, TQueryFnData = Prisma.GetSubjectAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubjectAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubjectAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subject', `${endpoint}/subject/aggregate`, args, options, fetch);
}

export function useGroupBySubject<TArgs extends Prisma.SubjectGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.SubjectGroupByArgs['orderBy'] } : { orderBy?: Prisma.SubjectGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.SubjectGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.SubjectGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.SubjectGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.SubjectGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SubjectGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.SubjectGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subject', `${endpoint}/subject/groupBy`, args, options, fetch);
}

export function useCountSubject<TArgs extends Prisma.SubjectCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.SubjectCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubjectCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubjectCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Subject', `${endpoint}/subject/count`, args, options, fetch);
}

export function useCheckSubject<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isDeleted?: boolean; creatorId?: string; updaterId?: string; name?: string; description?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Subject', `${endpoint}/subject/check`, args, options, fetch);
}
