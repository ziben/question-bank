/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Question } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateQuestion(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Question | undefined), DefaultError, Prisma.QuestionCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Question | undefined), DefaultError, Prisma.QuestionCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuestionCreateArgs, DefaultError, Question, true>('Question', 'POST', `${endpoint}/question/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuestionCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuestionCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuestionCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuestionCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyQuestion(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuestionCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuestionCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuestionCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Question', 'POST', `${endpoint}/question/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuestionCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuestionCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuestionCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuestionCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyQuestion<TArgs extends Prisma.QuestionFindManyArgs, TQueryFnData = Array<Prisma.QuestionGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuestionFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuestionFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Question', `${endpoint}/question/findMany`, args, options, fetch);
}

export function useInfiniteFindManyQuestion<TArgs extends Prisma.QuestionFindManyArgs, TQueryFnData = Array<Prisma.QuestionGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuestionFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuestionFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Question', `${endpoint}/question/findMany`, args, options, fetch);
}

export function useFindUniqueQuestion<TArgs extends Prisma.QuestionFindUniqueArgs, TQueryFnData = Prisma.QuestionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuestionFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuestionFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Question', `${endpoint}/question/findUnique`, args, options, fetch);
}

export function useFindFirstQuestion<TArgs extends Prisma.QuestionFindFirstArgs, TQueryFnData = Prisma.QuestionGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuestionFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuestionFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Question', `${endpoint}/question/findFirst`, args, options, fetch);
}

export function useUpdateQuestion(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Question | undefined), DefaultError, Prisma.QuestionUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Question | undefined), DefaultError, Prisma.QuestionUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuestionUpdateArgs, DefaultError, Question, true>('Question', 'PUT', `${endpoint}/question/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuestionUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuestionUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuestionUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuestionUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyQuestion(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuestionUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuestionUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuestionUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Question', 'PUT', `${endpoint}/question/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuestionUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuestionUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuestionUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuestionUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertQuestion(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Question | undefined), DefaultError, Prisma.QuestionUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Question | undefined), DefaultError, Prisma.QuestionUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuestionUpsertArgs, DefaultError, Question, true>('Question', 'POST', `${endpoint}/question/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuestionUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuestionUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuestionUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuestionUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteQuestion(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Question | undefined), DefaultError, Prisma.QuestionDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Question | undefined), DefaultError, Prisma.QuestionDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuestionDeleteArgs, DefaultError, Question, true>('Question', 'DELETE', `${endpoint}/question/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuestionDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuestionDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuestionDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.QuestionDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Question, Prisma.QuestionGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyQuestion(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuestionDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.QuestionDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.QuestionDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Question', 'DELETE', `${endpoint}/question/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.QuestionDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.QuestionDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuestionDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.QuestionDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateQuestion<TArgs extends Prisma.QuestionAggregateArgs, TQueryFnData = Prisma.GetQuestionAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuestionAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuestionAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Question', `${endpoint}/question/aggregate`, args, options, fetch);
}

export function useGroupByQuestion<TArgs extends Prisma.QuestionGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.QuestionGroupByArgs['orderBy'] } : { orderBy?: Prisma.QuestionGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.QuestionGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.QuestionGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.QuestionGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.QuestionGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.QuestionGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.QuestionGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Question', `${endpoint}/question/groupBy`, args, options, fetch);
}

export function useCountQuestion<TArgs extends Prisma.QuestionCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.QuestionCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.QuestionCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.QuestionCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Question', `${endpoint}/question/count`, args, options, fetch);
}

export function useCheckQuestion<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isDeleted?: boolean; creatorId?: string; updaterId?: string; title?: string; content?: string; answer?: string; analysis?: string; difficulty?: number; status?: string; categoryId?: string; subjectId?: string; gradeId?: string; sourceId?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Question', `${endpoint}/question/check`, args, options, fetch);
}
