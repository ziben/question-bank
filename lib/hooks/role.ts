/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Role } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/vue-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { MaybeRefOrGetter, ComputedRef, UnwrapRef } from 'vue';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/vue';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;

export function useCreateRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Role | undefined), DefaultError, Prisma.RoleCreateArgs, unknown>> | ComputedRef<UseMutationOptions<(Role | undefined), DefaultError, Prisma.RoleCreateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleCreateArgs, DefaultError, Role, true>('Role', 'POST', `${endpoint}/role/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleCreateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleCreateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleCreateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleCreateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleCreateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Role', 'POST', `${endpoint}/role/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleCreateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleCreateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleCreateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRole<TArgs extends Prisma.RoleFindManyArgs, TQueryFnData = Array<Prisma.RoleGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleFindManyArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Role', `${endpoint}/role/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRole<TArgs extends Prisma.RoleFindManyArgs, TQueryFnData = Array<Prisma.RoleGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleFindManyArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleFindManyArgs>>, options?: MaybeRefOrGetter<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>> | ComputedRef<Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>>) {
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Role', `${endpoint}/role/findMany`, args, options, fetch);
}

export function useFindUniqueRole<TArgs extends Prisma.RoleFindUniqueArgs, TQueryFnData = Prisma.RoleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleFindUniqueArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleFindUniqueArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Role', `${endpoint}/role/findUnique`, args, options, fetch);
}

export function useFindFirstRole<TArgs extends Prisma.RoleFindFirstArgs, TQueryFnData = Prisma.RoleGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleFindFirstArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleFindFirstArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Role', `${endpoint}/role/findFirst`, args, options, fetch);
}

export function useUpdateRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Role | undefined), DefaultError, Prisma.RoleUpdateArgs, unknown>> | ComputedRef<UseMutationOptions<(Role | undefined), DefaultError, Prisma.RoleUpdateArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleUpdateArgs, DefaultError, Role, true>('Role', 'PUT', `${endpoint}/role/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleUpdateArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleUpdateArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleUpdateArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleUpdateManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleUpdateManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Role', 'PUT', `${endpoint}/role/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleUpdateManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleUpdateManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleUpdateManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Role | undefined), DefaultError, Prisma.RoleUpsertArgs, unknown>> | ComputedRef<UseMutationOptions<(Role | undefined), DefaultError, Prisma.RoleUpsertArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleUpsertArgs, DefaultError, Role, true>('Role', 'POST', `${endpoint}/role/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleUpsertArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleUpsertArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleUpsertArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(Role | undefined), DefaultError, Prisma.RoleDeleteArgs, unknown>> | ComputedRef<UseMutationOptions<(Role | undefined), DefaultError, Prisma.RoleDeleteArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleDeleteArgs, DefaultError, Role, true>('Role', 'DELETE', `${endpoint}/role/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleDeleteArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<(CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleDeleteArgs>, unknown>> | ComputedRef<UseMutationOptions<(CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoleDeleteArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Role, Prisma.RoleGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRole(options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleDeleteManyArgs, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoleDeleteManyArgs, unknown>> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoleDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Role', 'DELETE', `${endpoint}/role/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoleDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoleDeleteManyArgs>,
            options?: Omit<(MaybeRefOrGetter<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleDeleteManyArgs>, unknown>> | ComputedRef<UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoleDeleteManyArgs>, unknown>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRole<TArgs extends Prisma.RoleAggregateArgs, TQueryFnData = Prisma.GetRoleAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleAggregateArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleAggregateArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Role', `${endpoint}/role/aggregate`, args, options, fetch);
}

export function useGroupByRole<TArgs extends Prisma.RoleGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RoleGroupByArgs['orderBy'] } : { orderBy?: Prisma.RoleGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RoleGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RoleGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RoleGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RoleGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RoleGroupByArgs, OrderByArg> & InputErrors>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RoleGroupByArgs, OrderByArg> & InputErrors>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Role', `${endpoint}/role/groupBy`, args, options, fetch);
}

export function useCountRole<TArgs extends Prisma.RoleCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RoleCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: MaybeRefOrGetter<Prisma.SelectSubset<TArgs, Prisma.RoleCountArgs>> | ComputedRef<Prisma.SelectSubset<TArgs, Prisma.RoleCountArgs>>, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<TQueryFnData, TError, TData>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Role', `${endpoint}/role/count`, args, options, fetch);
}

export function useCheckRole<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; isDeleted?: boolean; creatorId?: string; updaterId?: string; name?: string; code?: string; description?: string }; }, options?: (MaybeRefOrGetter<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> | ComputedRef<Omit<UnwrapRef<UseQueryOptions<boolean, TError, boolean>>, 'queryKey'>> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Role', `${endpoint}/role/check`, args, options, fetch);
}
