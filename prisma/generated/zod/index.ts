import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['Serializable']);

export const UserScalarFieldEnumSchema = z.enum(['id','username','email','password','name','createdAt','updatedAt']);

export const RoleScalarFieldEnumSchema = z.enum(['id','name','description','createdAt','updatedAt','creatorId','updaterId']);

export const PermissionScalarFieldEnumSchema = z.enum(['id','name','description','createdAt','updatedAt','creatorId','updaterId']);

export const UserRoleScalarFieldEnumSchema = z.enum(['id','userId','roleId','createdAt','updatedAt']);

export const RolePermissionScalarFieldEnumSchema = z.enum(['id','roleId','permissionId','createdAt','updatedAt']);

export const CategoryScalarFieldEnumSchema = z.enum(['id','name','description','createdAt','updatedAt','creatorId','updaterId']);

export const SubjectScalarFieldEnumSchema = z.enum(['id','name','description','createdAt','updatedAt','creatorId','updaterId']);

export const GradeScalarFieldEnumSchema = z.enum(['id','name','description','createdAt','updatedAt','creatorId','updaterId']);

export const SourceScalarFieldEnumSchema = z.enum(['id','name','type','description','createdAt','updatedAt','creatorId','updaterId']);

export const TagCategoryScalarFieldEnumSchema = z.enum(['id','name','description','code','allowMultiple','sortOrder','createdAt','updatedAt','createdById','updatedById']);

export const TagScalarFieldEnumSchema = z.enum(['id','name','code','description','sortOrder','categoryId','parentId','createdAt','updatedAt','createdById','updatedById']);

export const QuestionTagScalarFieldEnumSchema = z.enum(['id','questionId','tagId','createdAt','updatedAt','createdById','updatedById']);

export const SystemLogScalarFieldEnumSchema = z.enum(['id','module','action','targetId','details','level','userId','ip','userAgent','timestamp']);

export const QuestionScalarFieldEnumSchema = z.enum(['id','title','content','type','difficulty','options','answer','explanation','categoryId','subjectId','gradeId','sourceId','createdAt','updatedAt','createdById','updatedById']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullsOrderSchema = z.enum(['first','last']);
/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.number().int(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

// USER OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const UserOptionalDefaultsSchema = UserSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type UserOptionalDefaults = z.infer<typeof UserOptionalDefaultsSchema>

// USER RELATION SCHEMA
//------------------------------------------------------

export type UserRelations = {
  roles: UserRoleWithRelations[];
  createdRoles: RoleWithRelations[];
  updatedRoles: RoleWithRelations[];
  createdPermissions: PermissionWithRelations[];
  updatedPermissions: PermissionWithRelations[];
  createdCategories: CategoryWithRelations[];
  updatedCategories: CategoryWithRelations[];
  createdSubjects: SubjectWithRelations[];
  updatedSubjects: SubjectWithRelations[];
  createdGrades: GradeWithRelations[];
  updatedGrades: GradeWithRelations[];
  createdSources: SourceWithRelations[];
  updatedSources: SourceWithRelations[];
  createdQuestions: QuestionWithRelations[];
  updatedQuestions: QuestionWithRelations[];
  createdTagCategories: TagCategoryWithRelations[];
  updatedTagCategories: TagCategoryWithRelations[];
  createdTags: TagWithRelations[];
  updatedTags: TagWithRelations[];
  createdQuestionTags: QuestionTagWithRelations[];
  updatedQuestionTags: QuestionTagWithRelations[];
  systemLogs: SystemLogWithRelations[];
};

export type UserWithRelations = z.infer<typeof UserSchema> & UserRelations

export const UserWithRelationsSchema: z.ZodType<UserWithRelations> = UserSchema.merge(z.object({
  roles: z.lazy(() => UserRoleWithRelationsSchema).array(),
  createdRoles: z.lazy(() => RoleWithRelationsSchema).array(),
  updatedRoles: z.lazy(() => RoleWithRelationsSchema).array(),
  createdPermissions: z.lazy(() => PermissionWithRelationsSchema).array(),
  updatedPermissions: z.lazy(() => PermissionWithRelationsSchema).array(),
  createdCategories: z.lazy(() => CategoryWithRelationsSchema).array(),
  updatedCategories: z.lazy(() => CategoryWithRelationsSchema).array(),
  createdSubjects: z.lazy(() => SubjectWithRelationsSchema).array(),
  updatedSubjects: z.lazy(() => SubjectWithRelationsSchema).array(),
  createdGrades: z.lazy(() => GradeWithRelationsSchema).array(),
  updatedGrades: z.lazy(() => GradeWithRelationsSchema).array(),
  createdSources: z.lazy(() => SourceWithRelationsSchema).array(),
  updatedSources: z.lazy(() => SourceWithRelationsSchema).array(),
  createdQuestions: z.lazy(() => QuestionWithRelationsSchema).array(),
  updatedQuestions: z.lazy(() => QuestionWithRelationsSchema).array(),
  createdTagCategories: z.lazy(() => TagCategoryWithRelationsSchema).array(),
  updatedTagCategories: z.lazy(() => TagCategoryWithRelationsSchema).array(),
  createdTags: z.lazy(() => TagWithRelationsSchema).array(),
  updatedTags: z.lazy(() => TagWithRelationsSchema).array(),
  createdQuestionTags: z.lazy(() => QuestionTagWithRelationsSchema).array(),
  updatedQuestionTags: z.lazy(() => QuestionTagWithRelationsSchema).array(),
  systemLogs: z.lazy(() => SystemLogWithRelationsSchema).array(),
}))

// USER OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type UserOptionalDefaultsRelations = {
  roles: UserRoleOptionalDefaultsWithRelations[];
  createdRoles: RoleOptionalDefaultsWithRelations[];
  updatedRoles: RoleOptionalDefaultsWithRelations[];
  createdPermissions: PermissionOptionalDefaultsWithRelations[];
  updatedPermissions: PermissionOptionalDefaultsWithRelations[];
  createdCategories: CategoryOptionalDefaultsWithRelations[];
  updatedCategories: CategoryOptionalDefaultsWithRelations[];
  createdSubjects: SubjectOptionalDefaultsWithRelations[];
  updatedSubjects: SubjectOptionalDefaultsWithRelations[];
  createdGrades: GradeOptionalDefaultsWithRelations[];
  updatedGrades: GradeOptionalDefaultsWithRelations[];
  createdSources: SourceOptionalDefaultsWithRelations[];
  updatedSources: SourceOptionalDefaultsWithRelations[];
  createdQuestions: QuestionOptionalDefaultsWithRelations[];
  updatedQuestions: QuestionOptionalDefaultsWithRelations[];
  createdTagCategories: TagCategoryOptionalDefaultsWithRelations[];
  updatedTagCategories: TagCategoryOptionalDefaultsWithRelations[];
  createdTags: TagOptionalDefaultsWithRelations[];
  updatedTags: TagOptionalDefaultsWithRelations[];
  createdQuestionTags: QuestionTagOptionalDefaultsWithRelations[];
  updatedQuestionTags: QuestionTagOptionalDefaultsWithRelations[];
  systemLogs: SystemLogOptionalDefaultsWithRelations[];
};

export type UserOptionalDefaultsWithRelations = z.infer<typeof UserOptionalDefaultsSchema> & UserOptionalDefaultsRelations

export const UserOptionalDefaultsWithRelationsSchema: z.ZodType<UserOptionalDefaultsWithRelations> = UserOptionalDefaultsSchema.merge(z.object({
  roles: z.lazy(() => UserRoleOptionalDefaultsWithRelationsSchema).array(),
  createdRoles: z.lazy(() => RoleOptionalDefaultsWithRelationsSchema).array(),
  updatedRoles: z.lazy(() => RoleOptionalDefaultsWithRelationsSchema).array(),
  createdPermissions: z.lazy(() => PermissionOptionalDefaultsWithRelationsSchema).array(),
  updatedPermissions: z.lazy(() => PermissionOptionalDefaultsWithRelationsSchema).array(),
  createdCategories: z.lazy(() => CategoryOptionalDefaultsWithRelationsSchema).array(),
  updatedCategories: z.lazy(() => CategoryOptionalDefaultsWithRelationsSchema).array(),
  createdSubjects: z.lazy(() => SubjectOptionalDefaultsWithRelationsSchema).array(),
  updatedSubjects: z.lazy(() => SubjectOptionalDefaultsWithRelationsSchema).array(),
  createdGrades: z.lazy(() => GradeOptionalDefaultsWithRelationsSchema).array(),
  updatedGrades: z.lazy(() => GradeOptionalDefaultsWithRelationsSchema).array(),
  createdSources: z.lazy(() => SourceOptionalDefaultsWithRelationsSchema).array(),
  updatedSources: z.lazy(() => SourceOptionalDefaultsWithRelationsSchema).array(),
  createdQuestions: z.lazy(() => QuestionOptionalDefaultsWithRelationsSchema).array(),
  updatedQuestions: z.lazy(() => QuestionOptionalDefaultsWithRelationsSchema).array(),
  createdTagCategories: z.lazy(() => TagCategoryOptionalDefaultsWithRelationsSchema).array(),
  updatedTagCategories: z.lazy(() => TagCategoryOptionalDefaultsWithRelationsSchema).array(),
  createdTags: z.lazy(() => TagOptionalDefaultsWithRelationsSchema).array(),
  updatedTags: z.lazy(() => TagOptionalDefaultsWithRelationsSchema).array(),
  createdQuestionTags: z.lazy(() => QuestionTagOptionalDefaultsWithRelationsSchema).array(),
  updatedQuestionTags: z.lazy(() => QuestionTagOptionalDefaultsWithRelationsSchema).array(),
  systemLogs: z.lazy(() => SystemLogOptionalDefaultsWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// ROLE SCHEMA
/////////////////////////////////////////

export const RoleSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
})

export type Role = z.infer<typeof RoleSchema>

// ROLE OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const RoleOptionalDefaultsSchema = RoleSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type RoleOptionalDefaults = z.infer<typeof RoleOptionalDefaultsSchema>

// ROLE RELATION SCHEMA
//------------------------------------------------------

export type RoleRelations = {
  permissions: RolePermissionWithRelations[];
  users: UserRoleWithRelations[];
  createdBy: UserWithRelations;
  updatedBy: UserWithRelations;
};

export type RoleWithRelations = z.infer<typeof RoleSchema> & RoleRelations

export const RoleWithRelationsSchema: z.ZodType<RoleWithRelations> = RoleSchema.merge(z.object({
  permissions: z.lazy(() => RolePermissionWithRelationsSchema).array(),
  users: z.lazy(() => UserRoleWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserWithRelationsSchema),
  updatedBy: z.lazy(() => UserWithRelationsSchema),
}))

// ROLE OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type RoleOptionalDefaultsRelations = {
  permissions: RolePermissionOptionalDefaultsWithRelations[];
  users: UserRoleOptionalDefaultsWithRelations[];
  createdBy: UserOptionalDefaultsWithRelations;
  updatedBy: UserOptionalDefaultsWithRelations;
};

export type RoleOptionalDefaultsWithRelations = z.infer<typeof RoleOptionalDefaultsSchema> & RoleOptionalDefaultsRelations

export const RoleOptionalDefaultsWithRelationsSchema: z.ZodType<RoleOptionalDefaultsWithRelations> = RoleOptionalDefaultsSchema.merge(z.object({
  permissions: z.lazy(() => RolePermissionOptionalDefaultsWithRelationsSchema).array(),
  users: z.lazy(() => UserRoleOptionalDefaultsWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// PERMISSION SCHEMA
/////////////////////////////////////////

export const PermissionSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
})

export type Permission = z.infer<typeof PermissionSchema>

// PERMISSION OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const PermissionOptionalDefaultsSchema = PermissionSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type PermissionOptionalDefaults = z.infer<typeof PermissionOptionalDefaultsSchema>

// PERMISSION RELATION SCHEMA
//------------------------------------------------------

export type PermissionRelations = {
  roles: RolePermissionWithRelations[];
  createdBy: UserWithRelations;
  updatedBy: UserWithRelations;
};

export type PermissionWithRelations = z.infer<typeof PermissionSchema> & PermissionRelations

export const PermissionWithRelationsSchema: z.ZodType<PermissionWithRelations> = PermissionSchema.merge(z.object({
  roles: z.lazy(() => RolePermissionWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserWithRelationsSchema),
  updatedBy: z.lazy(() => UserWithRelationsSchema),
}))

// PERMISSION OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type PermissionOptionalDefaultsRelations = {
  roles: RolePermissionOptionalDefaultsWithRelations[];
  createdBy: UserOptionalDefaultsWithRelations;
  updatedBy: UserOptionalDefaultsWithRelations;
};

export type PermissionOptionalDefaultsWithRelations = z.infer<typeof PermissionOptionalDefaultsSchema> & PermissionOptionalDefaultsRelations

export const PermissionOptionalDefaultsWithRelationsSchema: z.ZodType<PermissionOptionalDefaultsWithRelations> = PermissionOptionalDefaultsSchema.merge(z.object({
  roles: z.lazy(() => RolePermissionOptionalDefaultsWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// USER ROLE SCHEMA
/////////////////////////////////////////

export const UserRoleSchema = z.object({
  id: z.number().int(),
  userId: z.number().int(),
  roleId: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type UserRole = z.infer<typeof UserRoleSchema>

// USER ROLE OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const UserRoleOptionalDefaultsSchema = UserRoleSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type UserRoleOptionalDefaults = z.infer<typeof UserRoleOptionalDefaultsSchema>

// USER ROLE RELATION SCHEMA
//------------------------------------------------------

export type UserRoleRelations = {
  user: UserWithRelations;
  role: RoleWithRelations;
};

export type UserRoleWithRelations = z.infer<typeof UserRoleSchema> & UserRoleRelations

export const UserRoleWithRelationsSchema: z.ZodType<UserRoleWithRelations> = UserRoleSchema.merge(z.object({
  user: z.lazy(() => UserWithRelationsSchema),
  role: z.lazy(() => RoleWithRelationsSchema),
}))

// USER ROLE OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type UserRoleOptionalDefaultsRelations = {
  user: UserOptionalDefaultsWithRelations;
  role: RoleOptionalDefaultsWithRelations;
};

export type UserRoleOptionalDefaultsWithRelations = z.infer<typeof UserRoleOptionalDefaultsSchema> & UserRoleOptionalDefaultsRelations

export const UserRoleOptionalDefaultsWithRelationsSchema: z.ZodType<UserRoleOptionalDefaultsWithRelations> = UserRoleOptionalDefaultsSchema.merge(z.object({
  user: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
  role: z.lazy(() => RoleOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// ROLE PERMISSION SCHEMA
/////////////////////////////////////////

export const RolePermissionSchema = z.object({
  id: z.number().int(),
  roleId: z.number().int(),
  permissionId: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RolePermission = z.infer<typeof RolePermissionSchema>

// ROLE PERMISSION OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const RolePermissionOptionalDefaultsSchema = RolePermissionSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type RolePermissionOptionalDefaults = z.infer<typeof RolePermissionOptionalDefaultsSchema>

// ROLE PERMISSION RELATION SCHEMA
//------------------------------------------------------

export type RolePermissionRelations = {
  role: RoleWithRelations;
  permission: PermissionWithRelations;
};

export type RolePermissionWithRelations = z.infer<typeof RolePermissionSchema> & RolePermissionRelations

export const RolePermissionWithRelationsSchema: z.ZodType<RolePermissionWithRelations> = RolePermissionSchema.merge(z.object({
  role: z.lazy(() => RoleWithRelationsSchema),
  permission: z.lazy(() => PermissionWithRelationsSchema),
}))

// ROLE PERMISSION OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type RolePermissionOptionalDefaultsRelations = {
  role: RoleOptionalDefaultsWithRelations;
  permission: PermissionOptionalDefaultsWithRelations;
};

export type RolePermissionOptionalDefaultsWithRelations = z.infer<typeof RolePermissionOptionalDefaultsSchema> & RolePermissionOptionalDefaultsRelations

export const RolePermissionOptionalDefaultsWithRelationsSchema: z.ZodType<RolePermissionOptionalDefaultsWithRelations> = RolePermissionOptionalDefaultsSchema.merge(z.object({
  role: z.lazy(() => RoleOptionalDefaultsWithRelationsSchema),
  permission: z.lazy(() => PermissionOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// CATEGORY SCHEMA
/////////////////////////////////////////

export const CategorySchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
})

export type Category = z.infer<typeof CategorySchema>

// CATEGORY OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const CategoryOptionalDefaultsSchema = CategorySchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type CategoryOptionalDefaults = z.infer<typeof CategoryOptionalDefaultsSchema>

// CATEGORY RELATION SCHEMA
//------------------------------------------------------

export type CategoryRelations = {
  questions: QuestionWithRelations[];
  createdBy: UserWithRelations;
  updatedBy: UserWithRelations;
};

export type CategoryWithRelations = z.infer<typeof CategorySchema> & CategoryRelations

export const CategoryWithRelationsSchema: z.ZodType<CategoryWithRelations> = CategorySchema.merge(z.object({
  questions: z.lazy(() => QuestionWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserWithRelationsSchema),
  updatedBy: z.lazy(() => UserWithRelationsSchema),
}))

// CATEGORY OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type CategoryOptionalDefaultsRelations = {
  questions: QuestionOptionalDefaultsWithRelations[];
  createdBy: UserOptionalDefaultsWithRelations;
  updatedBy: UserOptionalDefaultsWithRelations;
};

export type CategoryOptionalDefaultsWithRelations = z.infer<typeof CategoryOptionalDefaultsSchema> & CategoryOptionalDefaultsRelations

export const CategoryOptionalDefaultsWithRelationsSchema: z.ZodType<CategoryOptionalDefaultsWithRelations> = CategoryOptionalDefaultsSchema.merge(z.object({
  questions: z.lazy(() => QuestionOptionalDefaultsWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// SUBJECT SCHEMA
/////////////////////////////////////////

export const SubjectSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
})

export type Subject = z.infer<typeof SubjectSchema>

// SUBJECT OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const SubjectOptionalDefaultsSchema = SubjectSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type SubjectOptionalDefaults = z.infer<typeof SubjectOptionalDefaultsSchema>

// SUBJECT RELATION SCHEMA
//------------------------------------------------------

export type SubjectRelations = {
  questions: QuestionWithRelations[];
  createdBy: UserWithRelations;
  updatedBy: UserWithRelations;
};

export type SubjectWithRelations = z.infer<typeof SubjectSchema> & SubjectRelations

export const SubjectWithRelationsSchema: z.ZodType<SubjectWithRelations> = SubjectSchema.merge(z.object({
  questions: z.lazy(() => QuestionWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserWithRelationsSchema),
  updatedBy: z.lazy(() => UserWithRelationsSchema),
}))

// SUBJECT OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type SubjectOptionalDefaultsRelations = {
  questions: QuestionOptionalDefaultsWithRelations[];
  createdBy: UserOptionalDefaultsWithRelations;
  updatedBy: UserOptionalDefaultsWithRelations;
};

export type SubjectOptionalDefaultsWithRelations = z.infer<typeof SubjectOptionalDefaultsSchema> & SubjectOptionalDefaultsRelations

export const SubjectOptionalDefaultsWithRelationsSchema: z.ZodType<SubjectOptionalDefaultsWithRelations> = SubjectOptionalDefaultsSchema.merge(z.object({
  questions: z.lazy(() => QuestionOptionalDefaultsWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// GRADE SCHEMA
/////////////////////////////////////////

export const GradeSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
})

export type Grade = z.infer<typeof GradeSchema>

// GRADE OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const GradeOptionalDefaultsSchema = GradeSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type GradeOptionalDefaults = z.infer<typeof GradeOptionalDefaultsSchema>

// GRADE RELATION SCHEMA
//------------------------------------------------------

export type GradeRelations = {
  questions: QuestionWithRelations[];
  createdBy: UserWithRelations;
  updatedBy: UserWithRelations;
};

export type GradeWithRelations = z.infer<typeof GradeSchema> & GradeRelations

export const GradeWithRelationsSchema: z.ZodType<GradeWithRelations> = GradeSchema.merge(z.object({
  questions: z.lazy(() => QuestionWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserWithRelationsSchema),
  updatedBy: z.lazy(() => UserWithRelationsSchema),
}))

// GRADE OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type GradeOptionalDefaultsRelations = {
  questions: QuestionOptionalDefaultsWithRelations[];
  createdBy: UserOptionalDefaultsWithRelations;
  updatedBy: UserOptionalDefaultsWithRelations;
};

export type GradeOptionalDefaultsWithRelations = z.infer<typeof GradeOptionalDefaultsSchema> & GradeOptionalDefaultsRelations

export const GradeOptionalDefaultsWithRelationsSchema: z.ZodType<GradeOptionalDefaultsWithRelations> = GradeOptionalDefaultsSchema.merge(z.object({
  questions: z.lazy(() => QuestionOptionalDefaultsWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// SOURCE SCHEMA
/////////////////////////////////////////

export const SourceSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  type: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
})

export type Source = z.infer<typeof SourceSchema>

// SOURCE OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const SourceOptionalDefaultsSchema = SourceSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type SourceOptionalDefaults = z.infer<typeof SourceOptionalDefaultsSchema>

// SOURCE RELATION SCHEMA
//------------------------------------------------------

export type SourceRelations = {
  questions: QuestionWithRelations[];
  createdBy: UserWithRelations;
  updatedBy: UserWithRelations;
};

export type SourceWithRelations = z.infer<typeof SourceSchema> & SourceRelations

export const SourceWithRelationsSchema: z.ZodType<SourceWithRelations> = SourceSchema.merge(z.object({
  questions: z.lazy(() => QuestionWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserWithRelationsSchema),
  updatedBy: z.lazy(() => UserWithRelationsSchema),
}))

// SOURCE OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type SourceOptionalDefaultsRelations = {
  questions: QuestionOptionalDefaultsWithRelations[];
  createdBy: UserOptionalDefaultsWithRelations;
  updatedBy: UserOptionalDefaultsWithRelations;
};

export type SourceOptionalDefaultsWithRelations = z.infer<typeof SourceOptionalDefaultsSchema> & SourceOptionalDefaultsRelations

export const SourceOptionalDefaultsWithRelationsSchema: z.ZodType<SourceOptionalDefaultsWithRelations> = SourceOptionalDefaultsSchema.merge(z.object({
  questions: z.lazy(() => QuestionOptionalDefaultsWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// TAG CATEGORY SCHEMA
/////////////////////////////////////////

export const TagCategorySchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  code: z.string(),
  allowMultiple: z.boolean(),
  sortOrder: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  createdById: z.number().int().nullable(),
  updatedById: z.number().int().nullable(),
})

export type TagCategory = z.infer<typeof TagCategorySchema>

// TAG CATEGORY OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const TagCategoryOptionalDefaultsSchema = TagCategorySchema.merge(z.object({
  id: z.number().int().optional(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type TagCategoryOptionalDefaults = z.infer<typeof TagCategoryOptionalDefaultsSchema>

// TAG CATEGORY RELATION SCHEMA
//------------------------------------------------------

export type TagCategoryRelations = {
  tags: TagWithRelations[];
  createdBy?: UserWithRelations | null;
  updatedBy?: UserWithRelations | null;
};

export type TagCategoryWithRelations = z.infer<typeof TagCategorySchema> & TagCategoryRelations

export const TagCategoryWithRelationsSchema: z.ZodType<TagCategoryWithRelations> = TagCategorySchema.merge(z.object({
  tags: z.lazy(() => TagWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserWithRelationsSchema).nullable(),
  updatedBy: z.lazy(() => UserWithRelationsSchema).nullable(),
}))

// TAG CATEGORY OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type TagCategoryOptionalDefaultsRelations = {
  tags: TagOptionalDefaultsWithRelations[];
  createdBy?: UserOptionalDefaultsWithRelations | null;
  updatedBy?: UserOptionalDefaultsWithRelations | null;
};

export type TagCategoryOptionalDefaultsWithRelations = z.infer<typeof TagCategoryOptionalDefaultsSchema> & TagCategoryOptionalDefaultsRelations

export const TagCategoryOptionalDefaultsWithRelationsSchema: z.ZodType<TagCategoryOptionalDefaultsWithRelations> = TagCategoryOptionalDefaultsSchema.merge(z.object({
  tags: z.lazy(() => TagOptionalDefaultsWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema).nullable(),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema).nullable(),
}))

/////////////////////////////////////////
// TAG SCHEMA
/////////////////////////////////////////

export const TagSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  code: z.string(),
  description: z.string().nullable(),
  sortOrder: z.number().int(),
  categoryId: z.number().int(),
  parentId: z.number().int().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  createdById: z.number().int().nullable(),
  updatedById: z.number().int().nullable(),
})

export type Tag = z.infer<typeof TagSchema>

// TAG OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const TagOptionalDefaultsSchema = TagSchema.merge(z.object({
  id: z.number().int().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type TagOptionalDefaults = z.infer<typeof TagOptionalDefaultsSchema>

// TAG RELATION SCHEMA
//------------------------------------------------------

export type TagRelations = {
  category: TagCategoryWithRelations;
  parent?: TagWithRelations | null;
  children: TagWithRelations[];
  questions: QuestionTagWithRelations[];
  createdBy?: UserWithRelations | null;
  updatedBy?: UserWithRelations | null;
};

export type TagWithRelations = z.infer<typeof TagSchema> & TagRelations

export const TagWithRelationsSchema: z.ZodType<TagWithRelations> = TagSchema.merge(z.object({
  category: z.lazy(() => TagCategoryWithRelationsSchema),
  parent: z.lazy(() => TagWithRelationsSchema).nullable(),
  children: z.lazy(() => TagWithRelationsSchema).array(),
  questions: z.lazy(() => QuestionTagWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserWithRelationsSchema).nullable(),
  updatedBy: z.lazy(() => UserWithRelationsSchema).nullable(),
}))

// TAG OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type TagOptionalDefaultsRelations = {
  category: TagCategoryOptionalDefaultsWithRelations;
  parent?: TagOptionalDefaultsWithRelations | null;
  children: TagOptionalDefaultsWithRelations[];
  questions: QuestionTagOptionalDefaultsWithRelations[];
  createdBy?: UserOptionalDefaultsWithRelations | null;
  updatedBy?: UserOptionalDefaultsWithRelations | null;
};

export type TagOptionalDefaultsWithRelations = z.infer<typeof TagOptionalDefaultsSchema> & TagOptionalDefaultsRelations

export const TagOptionalDefaultsWithRelationsSchema: z.ZodType<TagOptionalDefaultsWithRelations> = TagOptionalDefaultsSchema.merge(z.object({
  category: z.lazy(() => TagCategoryOptionalDefaultsWithRelationsSchema),
  parent: z.lazy(() => TagOptionalDefaultsWithRelationsSchema).nullable(),
  children: z.lazy(() => TagOptionalDefaultsWithRelationsSchema).array(),
  questions: z.lazy(() => QuestionTagOptionalDefaultsWithRelationsSchema).array(),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema).nullable(),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema).nullable(),
}))

/////////////////////////////////////////
// QUESTION TAG SCHEMA
/////////////////////////////////////////

export const QuestionTagSchema = z.object({
  id: z.number().int(),
  questionId: z.number().int(),
  tagId: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  createdById: z.number().int().nullable(),
  updatedById: z.number().int().nullable(),
})

export type QuestionTag = z.infer<typeof QuestionTagSchema>

// QUESTION TAG OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const QuestionTagOptionalDefaultsSchema = QuestionTagSchema.merge(z.object({
  id: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
}))

export type QuestionTagOptionalDefaults = z.infer<typeof QuestionTagOptionalDefaultsSchema>

// QUESTION TAG RELATION SCHEMA
//------------------------------------------------------

export type QuestionTagRelations = {
  question: QuestionWithRelations;
  tag: TagWithRelations;
  createdBy?: UserWithRelations | null;
  updatedBy?: UserWithRelations | null;
};

export type QuestionTagWithRelations = z.infer<typeof QuestionTagSchema> & QuestionTagRelations

export const QuestionTagWithRelationsSchema: z.ZodType<QuestionTagWithRelations> = QuestionTagSchema.merge(z.object({
  question: z.lazy(() => QuestionWithRelationsSchema),
  tag: z.lazy(() => TagWithRelationsSchema),
  createdBy: z.lazy(() => UserWithRelationsSchema).nullable(),
  updatedBy: z.lazy(() => UserWithRelationsSchema).nullable(),
}))

// QUESTION TAG OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type QuestionTagOptionalDefaultsRelations = {
  question: QuestionOptionalDefaultsWithRelations;
  tag: TagOptionalDefaultsWithRelations;
  createdBy?: UserOptionalDefaultsWithRelations | null;
  updatedBy?: UserOptionalDefaultsWithRelations | null;
};

export type QuestionTagOptionalDefaultsWithRelations = z.infer<typeof QuestionTagOptionalDefaultsSchema> & QuestionTagOptionalDefaultsRelations

export const QuestionTagOptionalDefaultsWithRelationsSchema: z.ZodType<QuestionTagOptionalDefaultsWithRelations> = QuestionTagOptionalDefaultsSchema.merge(z.object({
  question: z.lazy(() => QuestionOptionalDefaultsWithRelationsSchema),
  tag: z.lazy(() => TagOptionalDefaultsWithRelationsSchema),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema).nullable(),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema).nullable(),
}))

/////////////////////////////////////////
// SYSTEM LOG SCHEMA
/////////////////////////////////////////

export const SystemLogSchema = z.object({
  id: z.number().int(),
  module: z.string(),
  action: z.string(),
  targetId: z.string().nullable(),
  details: z.string(),
  level: z.number().int(),
  userId: z.number().int(),
  ip: z.string().nullable(),
  userAgent: z.string().nullable(),
  timestamp: z.coerce.date(),
})

export type SystemLog = z.infer<typeof SystemLogSchema>

// SYSTEM LOG OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const SystemLogOptionalDefaultsSchema = SystemLogSchema.merge(z.object({
  id: z.number().int().optional(),
  level: z.number().int().optional(),
  timestamp: z.coerce.date().optional(),
}))

export type SystemLogOptionalDefaults = z.infer<typeof SystemLogOptionalDefaultsSchema>

// SYSTEM LOG RELATION SCHEMA
//------------------------------------------------------

export type SystemLogRelations = {
  user: UserWithRelations;
};

export type SystemLogWithRelations = z.infer<typeof SystemLogSchema> & SystemLogRelations

export const SystemLogWithRelationsSchema: z.ZodType<SystemLogWithRelations> = SystemLogSchema.merge(z.object({
  user: z.lazy(() => UserWithRelationsSchema),
}))

// SYSTEM LOG OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type SystemLogOptionalDefaultsRelations = {
  user: UserOptionalDefaultsWithRelations;
};

export type SystemLogOptionalDefaultsWithRelations = z.infer<typeof SystemLogOptionalDefaultsSchema> & SystemLogOptionalDefaultsRelations

export const SystemLogOptionalDefaultsWithRelationsSchema: z.ZodType<SystemLogOptionalDefaultsWithRelations> = SystemLogOptionalDefaultsSchema.merge(z.object({
  user: z.lazy(() => UserOptionalDefaultsWithRelationsSchema),
}))

/////////////////////////////////////////
// QUESTION SCHEMA
/////////////////////////////////////////

export const QuestionSchema = z.object({
  id: z.number().int(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int(),
  options: z.string().nullable(),
  answer: z.string(),
  explanation: z.string().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  createdById: z.number().int(),
  updatedById: z.number().int(),
})

export type Question = z.infer<typeof QuestionSchema>

// QUESTION OPTIONAL DEFAULTS SCHEMA
//------------------------------------------------------

export const QuestionOptionalDefaultsSchema = QuestionSchema.merge(z.object({
  id: z.number().int().optional(),
  difficulty: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional(),
  updatedById: z.number().int().optional(),
}))

export type QuestionOptionalDefaults = z.infer<typeof QuestionOptionalDefaultsSchema>

// QUESTION RELATION SCHEMA
//------------------------------------------------------

export type QuestionRelations = {
  category: CategoryWithRelations;
  subject: SubjectWithRelations;
  grade: GradeWithRelations;
  source: SourceWithRelations;
  createdBy?: UserWithRelations | null;
  updatedBy?: UserWithRelations | null;
  tags: QuestionTagWithRelations[];
};

export type QuestionWithRelations = z.infer<typeof QuestionSchema> & QuestionRelations

export const QuestionWithRelationsSchema: z.ZodType<QuestionWithRelations> = QuestionSchema.merge(z.object({
  category: z.lazy(() => CategoryWithRelationsSchema),
  subject: z.lazy(() => SubjectWithRelationsSchema),
  grade: z.lazy(() => GradeWithRelationsSchema),
  source: z.lazy(() => SourceWithRelationsSchema),
  createdBy: z.lazy(() => UserWithRelationsSchema).nullable(),
  updatedBy: z.lazy(() => UserWithRelationsSchema).nullable(),
  tags: z.lazy(() => QuestionTagWithRelationsSchema).array(),
}))

// QUESTION OPTIONAL DEFAULTS RELATION SCHEMA
//------------------------------------------------------

export type QuestionOptionalDefaultsRelations = {
  category: CategoryOptionalDefaultsWithRelations;
  subject: SubjectOptionalDefaultsWithRelations;
  grade: GradeOptionalDefaultsWithRelations;
  source: SourceOptionalDefaultsWithRelations;
  createdBy?: UserOptionalDefaultsWithRelations | null;
  updatedBy?: UserOptionalDefaultsWithRelations | null;
  tags: QuestionTagOptionalDefaultsWithRelations[];
};

export type QuestionOptionalDefaultsWithRelations = z.infer<typeof QuestionOptionalDefaultsSchema> & QuestionOptionalDefaultsRelations

export const QuestionOptionalDefaultsWithRelationsSchema: z.ZodType<QuestionOptionalDefaultsWithRelations> = QuestionOptionalDefaultsSchema.merge(z.object({
  category: z.lazy(() => CategoryOptionalDefaultsWithRelationsSchema),
  subject: z.lazy(() => SubjectOptionalDefaultsWithRelationsSchema),
  grade: z.lazy(() => GradeOptionalDefaultsWithRelationsSchema),
  source: z.lazy(() => SourceOptionalDefaultsWithRelationsSchema),
  createdBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema).nullable(),
  updatedBy: z.lazy(() => UserOptionalDefaultsWithRelationsSchema).nullable(),
  tags: z.lazy(() => QuestionTagOptionalDefaultsWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  roles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  createdRoles: z.union([z.boolean(),z.lazy(() => RoleFindManyArgsSchema)]).optional(),
  updatedRoles: z.union([z.boolean(),z.lazy(() => RoleFindManyArgsSchema)]).optional(),
  createdPermissions: z.union([z.boolean(),z.lazy(() => PermissionFindManyArgsSchema)]).optional(),
  updatedPermissions: z.union([z.boolean(),z.lazy(() => PermissionFindManyArgsSchema)]).optional(),
  createdCategories: z.union([z.boolean(),z.lazy(() => CategoryFindManyArgsSchema)]).optional(),
  updatedCategories: z.union([z.boolean(),z.lazy(() => CategoryFindManyArgsSchema)]).optional(),
  createdSubjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),
  updatedSubjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),
  createdGrades: z.union([z.boolean(),z.lazy(() => GradeFindManyArgsSchema)]).optional(),
  updatedGrades: z.union([z.boolean(),z.lazy(() => GradeFindManyArgsSchema)]).optional(),
  createdSources: z.union([z.boolean(),z.lazy(() => SourceFindManyArgsSchema)]).optional(),
  updatedSources: z.union([z.boolean(),z.lazy(() => SourceFindManyArgsSchema)]).optional(),
  createdQuestions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  updatedQuestions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdTagCategories: z.union([z.boolean(),z.lazy(() => TagCategoryFindManyArgsSchema)]).optional(),
  updatedTagCategories: z.union([z.boolean(),z.lazy(() => TagCategoryFindManyArgsSchema)]).optional(),
  createdTags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  updatedTags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  createdQuestionTags: z.union([z.boolean(),z.lazy(() => QuestionTagFindManyArgsSchema)]).optional(),
  updatedQuestionTags: z.union([z.boolean(),z.lazy(() => QuestionTagFindManyArgsSchema)]).optional(),
  systemLogs: z.union([z.boolean(),z.lazy(() => SystemLogFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  roles: z.boolean().optional(),
  createdRoles: z.boolean().optional(),
  updatedRoles: z.boolean().optional(),
  createdPermissions: z.boolean().optional(),
  updatedPermissions: z.boolean().optional(),
  createdCategories: z.boolean().optional(),
  updatedCategories: z.boolean().optional(),
  createdSubjects: z.boolean().optional(),
  updatedSubjects: z.boolean().optional(),
  createdGrades: z.boolean().optional(),
  updatedGrades: z.boolean().optional(),
  createdSources: z.boolean().optional(),
  updatedSources: z.boolean().optional(),
  createdQuestions: z.boolean().optional(),
  updatedQuestions: z.boolean().optional(),
  createdTagCategories: z.boolean().optional(),
  updatedTagCategories: z.boolean().optional(),
  createdTags: z.boolean().optional(),
  updatedTags: z.boolean().optional(),
  createdQuestionTags: z.boolean().optional(),
  updatedQuestionTags: z.boolean().optional(),
  systemLogs: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  username: z.boolean().optional(),
  email: z.boolean().optional(),
  password: z.boolean().optional(),
  name: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  roles: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  createdRoles: z.union([z.boolean(),z.lazy(() => RoleFindManyArgsSchema)]).optional(),
  updatedRoles: z.union([z.boolean(),z.lazy(() => RoleFindManyArgsSchema)]).optional(),
  createdPermissions: z.union([z.boolean(),z.lazy(() => PermissionFindManyArgsSchema)]).optional(),
  updatedPermissions: z.union([z.boolean(),z.lazy(() => PermissionFindManyArgsSchema)]).optional(),
  createdCategories: z.union([z.boolean(),z.lazy(() => CategoryFindManyArgsSchema)]).optional(),
  updatedCategories: z.union([z.boolean(),z.lazy(() => CategoryFindManyArgsSchema)]).optional(),
  createdSubjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),
  updatedSubjects: z.union([z.boolean(),z.lazy(() => SubjectFindManyArgsSchema)]).optional(),
  createdGrades: z.union([z.boolean(),z.lazy(() => GradeFindManyArgsSchema)]).optional(),
  updatedGrades: z.union([z.boolean(),z.lazy(() => GradeFindManyArgsSchema)]).optional(),
  createdSources: z.union([z.boolean(),z.lazy(() => SourceFindManyArgsSchema)]).optional(),
  updatedSources: z.union([z.boolean(),z.lazy(() => SourceFindManyArgsSchema)]).optional(),
  createdQuestions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  updatedQuestions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdTagCategories: z.union([z.boolean(),z.lazy(() => TagCategoryFindManyArgsSchema)]).optional(),
  updatedTagCategories: z.union([z.boolean(),z.lazy(() => TagCategoryFindManyArgsSchema)]).optional(),
  createdTags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  updatedTags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  createdQuestionTags: z.union([z.boolean(),z.lazy(() => QuestionTagFindManyArgsSchema)]).optional(),
  updatedQuestionTags: z.union([z.boolean(),z.lazy(() => QuestionTagFindManyArgsSchema)]).optional(),
  systemLogs: z.union([z.boolean(),z.lazy(() => SystemLogFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ROLE
//------------------------------------------------------

export const RoleIncludeSchema: z.ZodType<Prisma.RoleInclude> = z.object({
  permissions: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RoleCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RoleArgsSchema: z.ZodType<Prisma.RoleDefaultArgs> = z.object({
  select: z.lazy(() => RoleSelectSchema).optional(),
  include: z.lazy(() => RoleIncludeSchema).optional(),
}).strict();

export const RoleCountOutputTypeArgsSchema: z.ZodType<Prisma.RoleCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RoleCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RoleCountOutputTypeSelectSchema: z.ZodType<Prisma.RoleCountOutputTypeSelect> = z.object({
  permissions: z.boolean().optional(),
  users: z.boolean().optional(),
}).strict();

export const RoleSelectSchema: z.ZodType<Prisma.RoleSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  updaterId: z.boolean().optional(),
  permissions: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserRoleFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RoleCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PERMISSION
//------------------------------------------------------

export const PermissionIncludeSchema: z.ZodType<Prisma.PermissionInclude> = z.object({
  roles: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PermissionArgsSchema: z.ZodType<Prisma.PermissionDefaultArgs> = z.object({
  select: z.lazy(() => PermissionSelectSchema).optional(),
  include: z.lazy(() => PermissionIncludeSchema).optional(),
}).strict();

export const PermissionCountOutputTypeArgsSchema: z.ZodType<Prisma.PermissionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PermissionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PermissionCountOutputTypeSelectSchema: z.ZodType<Prisma.PermissionCountOutputTypeSelect> = z.object({
  roles: z.boolean().optional(),
}).strict();

export const PermissionSelectSchema: z.ZodType<Prisma.PermissionSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  updaterId: z.boolean().optional(),
  roles: z.union([z.boolean(),z.lazy(() => RolePermissionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER ROLE
//------------------------------------------------------

export const UserRoleIncludeSchema: z.ZodType<Prisma.UserRoleInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
}).strict()

export const UserRoleArgsSchema: z.ZodType<Prisma.UserRoleDefaultArgs> = z.object({
  select: z.lazy(() => UserRoleSelectSchema).optional(),
  include: z.lazy(() => UserRoleIncludeSchema).optional(),
}).strict();

export const UserRoleSelectSchema: z.ZodType<Prisma.UserRoleSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  roleId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
}).strict()

// ROLE PERMISSION
//------------------------------------------------------

export const RolePermissionIncludeSchema: z.ZodType<Prisma.RolePermissionInclude> = z.object({
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
  permission: z.union([z.boolean(),z.lazy(() => PermissionArgsSchema)]).optional(),
}).strict()

export const RolePermissionArgsSchema: z.ZodType<Prisma.RolePermissionDefaultArgs> = z.object({
  select: z.lazy(() => RolePermissionSelectSchema).optional(),
  include: z.lazy(() => RolePermissionIncludeSchema).optional(),
}).strict();

export const RolePermissionSelectSchema: z.ZodType<Prisma.RolePermissionSelect> = z.object({
  id: z.boolean().optional(),
  roleId: z.boolean().optional(),
  permissionId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  role: z.union([z.boolean(),z.lazy(() => RoleArgsSchema)]).optional(),
  permission: z.union([z.boolean(),z.lazy(() => PermissionArgsSchema)]).optional(),
}).strict()

// CATEGORY
//------------------------------------------------------

export const CategoryIncludeSchema: z.ZodType<Prisma.CategoryInclude> = z.object({
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CategoryArgsSchema: z.ZodType<Prisma.CategoryDefaultArgs> = z.object({
  select: z.lazy(() => CategorySelectSchema).optional(),
  include: z.lazy(() => CategoryIncludeSchema).optional(),
}).strict();

export const CategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.CategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.CategoryCountOutputTypeSelect> = z.object({
  questions: z.boolean().optional(),
}).strict();

export const CategorySelectSchema: z.ZodType<Prisma.CategorySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  updaterId: z.boolean().optional(),
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SUBJECT
//------------------------------------------------------

export const SubjectIncludeSchema: z.ZodType<Prisma.SubjectInclude> = z.object({
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubjectCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SubjectArgsSchema: z.ZodType<Prisma.SubjectDefaultArgs> = z.object({
  select: z.lazy(() => SubjectSelectSchema).optional(),
  include: z.lazy(() => SubjectIncludeSchema).optional(),
}).strict();

export const SubjectCountOutputTypeArgsSchema: z.ZodType<Prisma.SubjectCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SubjectCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SubjectCountOutputTypeSelectSchema: z.ZodType<Prisma.SubjectCountOutputTypeSelect> = z.object({
  questions: z.boolean().optional(),
}).strict();

export const SubjectSelectSchema: z.ZodType<Prisma.SubjectSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  updaterId: z.boolean().optional(),
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubjectCountOutputTypeArgsSchema)]).optional(),
}).strict()

// GRADE
//------------------------------------------------------

export const GradeIncludeSchema: z.ZodType<Prisma.GradeInclude> = z.object({
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => GradeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const GradeArgsSchema: z.ZodType<Prisma.GradeDefaultArgs> = z.object({
  select: z.lazy(() => GradeSelectSchema).optional(),
  include: z.lazy(() => GradeIncludeSchema).optional(),
}).strict();

export const GradeCountOutputTypeArgsSchema: z.ZodType<Prisma.GradeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => GradeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const GradeCountOutputTypeSelectSchema: z.ZodType<Prisma.GradeCountOutputTypeSelect> = z.object({
  questions: z.boolean().optional(),
}).strict();

export const GradeSelectSchema: z.ZodType<Prisma.GradeSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  updaterId: z.boolean().optional(),
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => GradeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SOURCE
//------------------------------------------------------

export const SourceIncludeSchema: z.ZodType<Prisma.SourceInclude> = z.object({
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SourceCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SourceArgsSchema: z.ZodType<Prisma.SourceDefaultArgs> = z.object({
  select: z.lazy(() => SourceSelectSchema).optional(),
  include: z.lazy(() => SourceIncludeSchema).optional(),
}).strict();

export const SourceCountOutputTypeArgsSchema: z.ZodType<Prisma.SourceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SourceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SourceCountOutputTypeSelectSchema: z.ZodType<Prisma.SourceCountOutputTypeSelect> = z.object({
  questions: z.boolean().optional(),
}).strict();

export const SourceSelectSchema: z.ZodType<Prisma.SourceSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  type: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  creatorId: z.boolean().optional(),
  updaterId: z.boolean().optional(),
  questions: z.union([z.boolean(),z.lazy(() => QuestionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SourceCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TAG CATEGORY
//------------------------------------------------------

export const TagCategoryIncludeSchema: z.ZodType<Prisma.TagCategoryInclude> = z.object({
  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TagCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TagCategoryArgsSchema: z.ZodType<Prisma.TagCategoryDefaultArgs> = z.object({
  select: z.lazy(() => TagCategorySelectSchema).optional(),
  include: z.lazy(() => TagCategoryIncludeSchema).optional(),
}).strict();

export const TagCategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.TagCategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TagCategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TagCategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.TagCategoryCountOutputTypeSelect> = z.object({
  tags: z.boolean().optional(),
}).strict();

export const TagCategorySelectSchema: z.ZodType<Prisma.TagCategorySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  code: z.boolean().optional(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdById: z.boolean().optional(),
  updatedById: z.boolean().optional(),
  tags: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TagCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TAG
//------------------------------------------------------

export const TagIncludeSchema: z.ZodType<Prisma.TagInclude> = z.object({
  category: z.union([z.boolean(),z.lazy(() => TagCategoryArgsSchema)]).optional(),
  parent: z.union([z.boolean(),z.lazy(() => TagArgsSchema)]).optional(),
  children: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  questions: z.union([z.boolean(),z.lazy(() => QuestionTagFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TagCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TagArgsSchema: z.ZodType<Prisma.TagDefaultArgs> = z.object({
  select: z.lazy(() => TagSelectSchema).optional(),
  include: z.lazy(() => TagIncludeSchema).optional(),
}).strict();

export const TagCountOutputTypeArgsSchema: z.ZodType<Prisma.TagCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TagCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TagCountOutputTypeSelectSchema: z.ZodType<Prisma.TagCountOutputTypeSelect> = z.object({
  children: z.boolean().optional(),
  questions: z.boolean().optional(),
}).strict();

export const TagSelectSchema: z.ZodType<Prisma.TagSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  description: z.boolean().optional(),
  sortOrder: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  parentId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdById: z.boolean().optional(),
  updatedById: z.boolean().optional(),
  category: z.union([z.boolean(),z.lazy(() => TagCategoryArgsSchema)]).optional(),
  parent: z.union([z.boolean(),z.lazy(() => TagArgsSchema)]).optional(),
  children: z.union([z.boolean(),z.lazy(() => TagFindManyArgsSchema)]).optional(),
  questions: z.union([z.boolean(),z.lazy(() => QuestionTagFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TagCountOutputTypeArgsSchema)]).optional(),
}).strict()

// QUESTION TAG
//------------------------------------------------------

export const QuestionTagIncludeSchema: z.ZodType<Prisma.QuestionTagInclude> = z.object({
  question: z.union([z.boolean(),z.lazy(() => QuestionArgsSchema)]).optional(),
  tag: z.union([z.boolean(),z.lazy(() => TagArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const QuestionTagArgsSchema: z.ZodType<Prisma.QuestionTagDefaultArgs> = z.object({
  select: z.lazy(() => QuestionTagSelectSchema).optional(),
  include: z.lazy(() => QuestionTagIncludeSchema).optional(),
}).strict();

export const QuestionTagSelectSchema: z.ZodType<Prisma.QuestionTagSelect> = z.object({
  id: z.boolean().optional(),
  questionId: z.boolean().optional(),
  tagId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdById: z.boolean().optional(),
  updatedById: z.boolean().optional(),
  question: z.union([z.boolean(),z.lazy(() => QuestionArgsSchema)]).optional(),
  tag: z.union([z.boolean(),z.lazy(() => TagArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SYSTEM LOG
//------------------------------------------------------

export const SystemLogIncludeSchema: z.ZodType<Prisma.SystemLogInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SystemLogArgsSchema: z.ZodType<Prisma.SystemLogDefaultArgs> = z.object({
  select: z.lazy(() => SystemLogSelectSchema).optional(),
  include: z.lazy(() => SystemLogIncludeSchema).optional(),
}).strict();

export const SystemLogSelectSchema: z.ZodType<Prisma.SystemLogSelect> = z.object({
  id: z.boolean().optional(),
  module: z.boolean().optional(),
  action: z.boolean().optional(),
  targetId: z.boolean().optional(),
  details: z.boolean().optional(),
  level: z.boolean().optional(),
  userId: z.boolean().optional(),
  ip: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// QUESTION
//------------------------------------------------------

export const QuestionIncludeSchema: z.ZodType<Prisma.QuestionInclude> = z.object({
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  subject: z.union([z.boolean(),z.lazy(() => SubjectArgsSchema)]).optional(),
  grade: z.union([z.boolean(),z.lazy(() => GradeArgsSchema)]).optional(),
  source: z.union([z.boolean(),z.lazy(() => SourceArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tags: z.union([z.boolean(),z.lazy(() => QuestionTagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => QuestionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const QuestionArgsSchema: z.ZodType<Prisma.QuestionDefaultArgs> = z.object({
  select: z.lazy(() => QuestionSelectSchema).optional(),
  include: z.lazy(() => QuestionIncludeSchema).optional(),
}).strict();

export const QuestionCountOutputTypeArgsSchema: z.ZodType<Prisma.QuestionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => QuestionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const QuestionCountOutputTypeSelectSchema: z.ZodType<Prisma.QuestionCountOutputTypeSelect> = z.object({
  tags: z.boolean().optional(),
}).strict();

export const QuestionSelectSchema: z.ZodType<Prisma.QuestionSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  content: z.boolean().optional(),
  type: z.boolean().optional(),
  difficulty: z.boolean().optional(),
  options: z.boolean().optional(),
  answer: z.boolean().optional(),
  explanation: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  subjectId: z.boolean().optional(),
  gradeId: z.boolean().optional(),
  sourceId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  createdById: z.boolean().optional(),
  updatedById: z.boolean().optional(),
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  subject: z.union([z.boolean(),z.lazy(() => SubjectArgsSchema)]).optional(),
  grade: z.union([z.boolean(),z.lazy(() => GradeArgsSchema)]).optional(),
  source: z.union([z.boolean(),z.lazy(() => SourceArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  updatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tags: z.union([z.boolean(),z.lazy(() => QuestionTagFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => QuestionCountOutputTypeArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  username: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  roles: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  createdRoles: z.lazy(() => RoleListRelationFilterSchema).optional(),
  updatedRoles: z.lazy(() => RoleListRelationFilterSchema).optional(),
  createdPermissions: z.lazy(() => PermissionListRelationFilterSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionListRelationFilterSchema).optional(),
  createdCategories: z.lazy(() => CategoryListRelationFilterSchema).optional(),
  updatedCategories: z.lazy(() => CategoryListRelationFilterSchema).optional(),
  createdSubjects: z.lazy(() => SubjectListRelationFilterSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectListRelationFilterSchema).optional(),
  createdGrades: z.lazy(() => GradeListRelationFilterSchema).optional(),
  updatedGrades: z.lazy(() => GradeListRelationFilterSchema).optional(),
  createdSources: z.lazy(() => SourceListRelationFilterSchema).optional(),
  updatedSources: z.lazy(() => SourceListRelationFilterSchema).optional(),
  createdQuestions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryListRelationFilterSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryListRelationFilterSchema).optional(),
  createdTags: z.lazy(() => TagListRelationFilterSchema).optional(),
  updatedTags: z.lazy(() => TagListRelationFilterSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagListRelationFilterSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagListRelationFilterSchema).optional(),
  systemLogs: z.lazy(() => SystemLogListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  roles: z.lazy(() => UserRoleOrderByRelationAggregateInputSchema).optional(),
  createdRoles: z.lazy(() => RoleOrderByRelationAggregateInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleOrderByRelationAggregateInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionOrderByRelationAggregateInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionOrderByRelationAggregateInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryOrderByRelationAggregateInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryOrderByRelationAggregateInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectOrderByRelationAggregateInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectOrderByRelationAggregateInputSchema).optional(),
  createdGrades: z.lazy(() => GradeOrderByRelationAggregateInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeOrderByRelationAggregateInputSchema).optional(),
  createdSources: z.lazy(() => SourceOrderByRelationAggregateInputSchema).optional(),
  updatedSources: z.lazy(() => SourceOrderByRelationAggregateInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionOrderByRelationAggregateInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionOrderByRelationAggregateInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryOrderByRelationAggregateInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryOrderByRelationAggregateInputSchema).optional(),
  createdTags: z.lazy(() => TagOrderByRelationAggregateInputSchema).optional(),
  updatedTags: z.lazy(() => TagOrderByRelationAggregateInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagOrderByRelationAggregateInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagOrderByRelationAggregateInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    username: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.number().int(),
    username: z.string(),
  }),
  z.object({
    id: z.number().int(),
    email: z.string(),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    username: z.string(),
    email: z.string(),
  }),
  z.object({
    username: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  username: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  roles: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  createdRoles: z.lazy(() => RoleListRelationFilterSchema).optional(),
  updatedRoles: z.lazy(() => RoleListRelationFilterSchema).optional(),
  createdPermissions: z.lazy(() => PermissionListRelationFilterSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionListRelationFilterSchema).optional(),
  createdCategories: z.lazy(() => CategoryListRelationFilterSchema).optional(),
  updatedCategories: z.lazy(() => CategoryListRelationFilterSchema).optional(),
  createdSubjects: z.lazy(() => SubjectListRelationFilterSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectListRelationFilterSchema).optional(),
  createdGrades: z.lazy(() => GradeListRelationFilterSchema).optional(),
  updatedGrades: z.lazy(() => GradeListRelationFilterSchema).optional(),
  createdSources: z.lazy(() => SourceListRelationFilterSchema).optional(),
  updatedSources: z.lazy(() => SourceListRelationFilterSchema).optional(),
  createdQuestions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryListRelationFilterSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryListRelationFilterSchema).optional(),
  createdTags: z.lazy(() => TagListRelationFilterSchema).optional(),
  updatedTags: z.lazy(() => TagListRelationFilterSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagListRelationFilterSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagListRelationFilterSchema).optional(),
  systemLogs: z.lazy(() => SystemLogListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  username: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RoleWhereInputSchema: z.ZodType<Prisma.RoleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RoleWhereInputSchema),z.lazy(() => RoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleWhereInputSchema),z.lazy(() => RoleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  permissions: z.lazy(() => RolePermissionListRelationFilterSchema).optional(),
  users: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const RoleOrderByWithRelationInputSchema: z.ZodType<Prisma.RoleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  permissions: z.lazy(() => RolePermissionOrderByRelationAggregateInputSchema).optional(),
  users: z.lazy(() => UserRoleOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const RoleWhereUniqueInputSchema: z.ZodType<Prisma.RoleWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => RoleWhereInputSchema),z.lazy(() => RoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleWhereInputSchema),z.lazy(() => RoleWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  permissions: z.lazy(() => RolePermissionListRelationFilterSchema).optional(),
  users: z.lazy(() => UserRoleListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const RoleOrderByWithAggregationInputSchema: z.ZodType<Prisma.RoleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RoleCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RoleAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RoleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RoleMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RoleSumOrderByAggregateInputSchema).optional()
}).strict();

export const RoleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RoleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RoleScalarWhereWithAggregatesInputSchema),z.lazy(() => RoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleScalarWhereWithAggregatesInputSchema),z.lazy(() => RoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const PermissionWhereInputSchema: z.ZodType<Prisma.PermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roles: z.lazy(() => RolePermissionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.PermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  roles: z.lazy(() => RolePermissionOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PermissionWhereUniqueInputSchema: z.ZodType<Prisma.PermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionWhereInputSchema),z.lazy(() => PermissionWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  roles: z.lazy(() => RolePermissionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.PermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PermissionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PermissionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PermissionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PermissionSumOrderByAggregateInputSchema).optional()
}).strict();

export const PermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const UserRoleWhereInputSchema: z.ZodType<Prisma.UserRoleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
}).strict();

export const UserRoleOrderByWithRelationInputSchema: z.ZodType<Prisma.UserRoleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  role: z.lazy(() => RoleOrderByWithRelationInputSchema).optional()
}).strict();

export const UserRoleWhereUniqueInputSchema: z.ZodType<Prisma.UserRoleWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    userId_roleId: z.lazy(() => UserRoleUserIdRoleIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    userId_roleId: z.lazy(() => UserRoleUserIdRoleIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  userId_roleId: z.lazy(() => UserRoleUserIdRoleIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleWhereInputSchema),z.lazy(() => UserRoleWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  roleId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
}).strict());

export const UserRoleOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserRoleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserRoleCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserRoleAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserRoleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserRoleMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserRoleSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserRoleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserRoleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema),z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema),z.lazy(() => UserRoleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RolePermissionWhereInputSchema: z.ZodType<Prisma.RolePermissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  permissionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => PermissionScalarRelationFilterSchema),z.lazy(() => PermissionWhereInputSchema) ]).optional(),
}).strict();

export const RolePermissionOrderByWithRelationInputSchema: z.ZodType<Prisma.RolePermissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => RoleOrderByWithRelationInputSchema).optional(),
  permission: z.lazy(() => PermissionOrderByWithRelationInputSchema).optional()
}).strict();

export const RolePermissionWhereUniqueInputSchema: z.ZodType<Prisma.RolePermissionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    roleId_permissionId: z.lazy(() => RolePermissionRoleIdPermissionIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    roleId_permissionId: z.lazy(() => RolePermissionRoleIdPermissionIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  roleId_permissionId: z.lazy(() => RolePermissionRoleIdPermissionIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionWhereInputSchema),z.lazy(() => RolePermissionWhereInputSchema).array() ]).optional(),
  roleId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  permissionId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => RoleScalarRelationFilterSchema),z.lazy(() => RoleWhereInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => PermissionScalarRelationFilterSchema),z.lazy(() => PermissionWhereInputSchema) ]).optional(),
}).strict());

export const RolePermissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RolePermissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RolePermissionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RolePermissionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RolePermissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RolePermissionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RolePermissionSumOrderByAggregateInputSchema).optional()
}).strict();

export const RolePermissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RolePermissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema),z.lazy(() => RolePermissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  permissionId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CategoryWhereInputSchema: z.ZodType<Prisma.CategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const CategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.CategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  questions: z.lazy(() => QuestionOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const CategoryWhereUniqueInputSchema: z.ZodType<Prisma.CategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const CategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.CategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CategoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CategoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CategoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CategorySumOrderByAggregateInputSchema).optional()
}).strict();

export const CategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const SubjectWhereInputSchema: z.ZodType<Prisma.SubjectWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubjectWhereInputSchema),z.lazy(() => SubjectWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubjectWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubjectWhereInputSchema),z.lazy(() => SubjectWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SubjectOrderByWithRelationInputSchema: z.ZodType<Prisma.SubjectOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  questions: z.lazy(() => QuestionOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SubjectWhereUniqueInputSchema: z.ZodType<Prisma.SubjectWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => SubjectWhereInputSchema),z.lazy(() => SubjectWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubjectWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubjectWhereInputSchema),z.lazy(() => SubjectWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SubjectOrderByWithAggregationInputSchema: z.ZodType<Prisma.SubjectOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SubjectCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SubjectAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SubjectMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SubjectMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SubjectSumOrderByAggregateInputSchema).optional()
}).strict();

export const SubjectScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SubjectScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SubjectScalarWhereWithAggregatesInputSchema),z.lazy(() => SubjectScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubjectScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubjectScalarWhereWithAggregatesInputSchema),z.lazy(() => SubjectScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const GradeWhereInputSchema: z.ZodType<Prisma.GradeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GradeWhereInputSchema),z.lazy(() => GradeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GradeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GradeWhereInputSchema),z.lazy(() => GradeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const GradeOrderByWithRelationInputSchema: z.ZodType<Prisma.GradeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  questions: z.lazy(() => QuestionOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const GradeWhereUniqueInputSchema: z.ZodType<Prisma.GradeWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => GradeWhereInputSchema),z.lazy(() => GradeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GradeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GradeWhereInputSchema),z.lazy(() => GradeWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const GradeOrderByWithAggregationInputSchema: z.ZodType<Prisma.GradeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => GradeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => GradeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => GradeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => GradeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => GradeSumOrderByAggregateInputSchema).optional()
}).strict();

export const GradeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.GradeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => GradeScalarWhereWithAggregatesInputSchema),z.lazy(() => GradeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => GradeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GradeScalarWhereWithAggregatesInputSchema),z.lazy(() => GradeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const SourceWhereInputSchema: z.ZodType<Prisma.SourceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SourceWhereInputSchema),z.lazy(() => SourceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SourceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SourceWhereInputSchema),z.lazy(() => SourceWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SourceOrderByWithRelationInputSchema: z.ZodType<Prisma.SourceOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  questions: z.lazy(() => QuestionOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SourceWhereUniqueInputSchema: z.ZodType<Prisma.SourceWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => SourceWhereInputSchema),z.lazy(() => SourceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SourceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SourceWhereInputSchema),z.lazy(() => SourceWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  questions: z.lazy(() => QuestionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  updatedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SourceOrderByWithAggregationInputSchema: z.ZodType<Prisma.SourceOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SourceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SourceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SourceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SourceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SourceSumOrderByAggregateInputSchema).optional()
}).strict();

export const SourceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SourceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SourceScalarWhereWithAggregatesInputSchema),z.lazy(() => SourceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SourceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SourceScalarWhereWithAggregatesInputSchema),z.lazy(() => SourceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const TagCategoryWhereInputSchema: z.ZodType<Prisma.TagCategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TagCategoryWhereInputSchema),z.lazy(() => TagCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagCategoryWhereInputSchema),z.lazy(() => TagCategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  allowMultiple: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  tags: z.lazy(() => TagListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  updatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TagCategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.TagCategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  allowMultiple: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => TagOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TagCategoryWhereUniqueInputSchema: z.ZodType<Prisma.TagCategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string(),
    code: z.string()
  }),
  z.object({
    id: z.number().int(),
    name: z.string(),
  }),
  z.object({
    id: z.number().int(),
    code: z.string(),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
    code: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => TagCategoryWhereInputSchema),z.lazy(() => TagCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagCategoryWhereInputSchema),z.lazy(() => TagCategoryWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allowMultiple: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  tags: z.lazy(() => TagListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  updatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TagCategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.TagCategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  allowMultiple: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => TagCategoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TagCategoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TagCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TagCategoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TagCategorySumOrderByAggregateInputSchema).optional()
}).strict();

export const TagCategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TagCategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TagCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => TagCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => TagCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  allowMultiple: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  sortOrder: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const TagWhereInputSchema: z.ZodType<Prisma.TagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  category: z.union([ z.lazy(() => TagCategoryScalarRelationFilterSchema),z.lazy(() => TagCategoryWhereInputSchema) ]).optional(),
  parent: z.union([ z.lazy(() => TagNullableScalarRelationFilterSchema),z.lazy(() => TagWhereInputSchema) ]).optional().nullable(),
  children: z.lazy(() => TagListRelationFilterSchema).optional(),
  questions: z.lazy(() => QuestionTagListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  updatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TagOrderByWithRelationInputSchema: z.ZodType<Prisma.TagOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => TagCategoryOrderByWithRelationInputSchema).optional(),
  parent: z.lazy(() => TagOrderByWithRelationInputSchema).optional(),
  children: z.lazy(() => TagOrderByRelationAggregateInputSchema).optional(),
  questions: z.lazy(() => QuestionTagOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TagWhereUniqueInputSchema: z.ZodType<Prisma.TagWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    categoryId_code: z.lazy(() => TagCategoryIdCodeCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    categoryId_code: z.lazy(() => TagCategoryIdCodeCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  categoryId_code: z.lazy(() => TagCategoryIdCodeCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  category: z.union([ z.lazy(() => TagCategoryScalarRelationFilterSchema),z.lazy(() => TagCategoryWhereInputSchema) ]).optional(),
  parent: z.union([ z.lazy(() => TagNullableScalarRelationFilterSchema),z.lazy(() => TagWhereInputSchema) ]).optional().nullable(),
  children: z.lazy(() => TagListRelationFilterSchema).optional(),
  questions: z.lazy(() => QuestionTagListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  updatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const TagOrderByWithAggregationInputSchema: z.ZodType<Prisma.TagOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => TagCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TagAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TagMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TagSumOrderByAggregateInputSchema).optional()
}).strict();

export const TagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TagScalarWhereWithAggregatesInputSchema),z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagScalarWhereWithAggregatesInputSchema),z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sortOrder: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  categoryId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  parentId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const QuestionTagWhereInputSchema: z.ZodType<Prisma.QuestionTagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionTagWhereInputSchema),z.lazy(() => QuestionTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionTagWhereInputSchema),z.lazy(() => QuestionTagWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  questionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  tagId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  question: z.union([ z.lazy(() => QuestionScalarRelationFilterSchema),z.lazy(() => QuestionWhereInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => TagScalarRelationFilterSchema),z.lazy(() => TagWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  updatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagOrderByWithRelationInputSchema: z.ZodType<Prisma.QuestionTagOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  questionId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  question: z.lazy(() => QuestionOrderByWithRelationInputSchema).optional(),
  tag: z.lazy(() => TagOrderByWithRelationInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const QuestionTagWhereUniqueInputSchema: z.ZodType<Prisma.QuestionTagWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    questionId_tagId: z.lazy(() => QuestionTagQuestionIdTagIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    questionId_tagId: z.lazy(() => QuestionTagQuestionIdTagIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  questionId_tagId: z.lazy(() => QuestionTagQuestionIdTagIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => QuestionTagWhereInputSchema),z.lazy(() => QuestionTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionTagWhereInputSchema),z.lazy(() => QuestionTagWhereInputSchema).array() ]).optional(),
  questionId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  tagId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  question: z.union([ z.lazy(() => QuestionScalarRelationFilterSchema),z.lazy(() => QuestionWhereInputSchema) ]).optional(),
  tag: z.union([ z.lazy(() => TagScalarRelationFilterSchema),z.lazy(() => TagWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  updatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const QuestionTagOrderByWithAggregationInputSchema: z.ZodType<Prisma.QuestionTagOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  questionId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => QuestionTagCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => QuestionTagAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => QuestionTagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => QuestionTagMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => QuestionTagSumOrderByAggregateInputSchema).optional()
}).strict();

export const QuestionTagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.QuestionTagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionTagScalarWhereWithAggregatesInputSchema),z.lazy(() => QuestionTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionTagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionTagScalarWhereWithAggregatesInputSchema),z.lazy(() => QuestionTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  questionId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  tagId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const SystemLogWhereInputSchema: z.ZodType<Prisma.SystemLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SystemLogWhereInputSchema),z.lazy(() => SystemLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SystemLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SystemLogWhereInputSchema),z.lazy(() => SystemLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  module: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  targetId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  details: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SystemLogOrderByWithRelationInputSchema: z.ZodType<Prisma.SystemLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  targetId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  ip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SystemLogWhereUniqueInputSchema: z.ZodType<Prisma.SystemLogWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => SystemLogWhereInputSchema),z.lazy(() => SystemLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SystemLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SystemLogWhereInputSchema),z.lazy(() => SystemLogWhereInputSchema).array() ]).optional(),
  module: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  targetId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  details: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SystemLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.SystemLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  targetId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  ip: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userAgent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SystemLogCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SystemLogAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SystemLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SystemLogMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SystemLogSumOrderByAggregateInputSchema).optional()
}).strict();

export const SystemLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SystemLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SystemLogScalarWhereWithAggregatesInputSchema),z.lazy(() => SystemLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SystemLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SystemLogScalarWhereWithAggregatesInputSchema),z.lazy(() => SystemLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  module: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  targetId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  details: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ip: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const QuestionWhereInputSchema: z.ZodType<Prisma.QuestionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionWhereInputSchema),z.lazy(() => QuestionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionWhereInputSchema),z.lazy(() => QuestionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  difficulty: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  options: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  answer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  explanation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  subjectId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  gradeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sourceId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  category: z.union([ z.lazy(() => CategoryScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  subject: z.union([ z.lazy(() => SubjectScalarRelationFilterSchema),z.lazy(() => SubjectWhereInputSchema) ]).optional(),
  grade: z.union([ z.lazy(() => GradeScalarRelationFilterSchema),z.lazy(() => GradeWhereInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SourceScalarRelationFilterSchema),z.lazy(() => SourceWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  updatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagListRelationFilterSchema).optional()
}).strict();

export const QuestionOrderByWithRelationInputSchema: z.ZodType<Prisma.QuestionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  difficulty: z.lazy(() => SortOrderSchema).optional(),
  options: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  explanation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subjectId: z.lazy(() => SortOrderSchema).optional(),
  gradeId: z.lazy(() => SortOrderSchema).optional(),
  sourceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => CategoryOrderByWithRelationInputSchema).optional(),
  subject: z.lazy(() => SubjectOrderByWithRelationInputSchema).optional(),
  grade: z.lazy(() => GradeOrderByWithRelationInputSchema).optional(),
  source: z.lazy(() => SourceOrderByWithRelationInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  updatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  tags: z.lazy(() => QuestionTagOrderByRelationAggregateInputSchema).optional()
}).strict();

export const QuestionWhereUniqueInputSchema: z.ZodType<Prisma.QuestionWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => QuestionWhereInputSchema),z.lazy(() => QuestionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionWhereInputSchema),z.lazy(() => QuestionWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  difficulty: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  options: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  answer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  explanation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  subjectId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  gradeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  sourceId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  category: z.union([ z.lazy(() => CategoryScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  subject: z.union([ z.lazy(() => SubjectScalarRelationFilterSchema),z.lazy(() => SubjectWhereInputSchema) ]).optional(),
  grade: z.union([ z.lazy(() => GradeScalarRelationFilterSchema),z.lazy(() => GradeWhereInputSchema) ]).optional(),
  source: z.union([ z.lazy(() => SourceScalarRelationFilterSchema),z.lazy(() => SourceWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  updatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagListRelationFilterSchema).optional()
}).strict());

export const QuestionOrderByWithAggregationInputSchema: z.ZodType<Prisma.QuestionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  difficulty: z.lazy(() => SortOrderSchema).optional(),
  options: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  explanation: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subjectId: z.lazy(() => SortOrderSchema).optional(),
  gradeId: z.lazy(() => SortOrderSchema).optional(),
  sourceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => QuestionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => QuestionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => QuestionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => QuestionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => QuestionSumOrderByAggregateInputSchema).optional()
}).strict();

export const QuestionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.QuestionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema),z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema),z.lazy(() => QuestionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  difficulty: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  options: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  answer: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  explanation: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  subjectId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  gradeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  sourceId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleCreateInputSchema: z.ZodType<Prisma.RoleCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  users: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedRolesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedRolesInputSchema)
}).strict();

export const RoleUncheckedCreateInputSchema: z.ZodType<Prisma.RoleUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
  permissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  users: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleUpdateInputSchema: z.ZodType<Prisma.RoleUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  users: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedRolesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedRolesNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  users: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleCreateManyInputSchema: z.ZodType<Prisma.RoleCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const RoleUpdateManyMutationInputSchema: z.ZodType<Prisma.RoleUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionCreateInputSchema: z.ZodType<Prisma.PermissionCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => RolePermissionCreateNestedManyWithoutPermissionInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedPermissionsInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedPermissionsInputSchema)
}).strict();

export const PermissionUncheckedCreateInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
  roles: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionUpdateInputSchema: z.ZodType<Prisma.PermissionUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => RolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedPermissionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionCreateManyInputSchema: z.ZodType<Prisma.PermissionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const PermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.PermissionUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleCreateInputSchema: z.ZodType<Prisma.UserRoleCreateInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutRolesInputSchema),
  role: z.lazy(() => RoleCreateNestedOneWithoutUsersInputSchema)
}).strict();

export const UserRoleUncheckedCreateInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  roleId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleUpdateInputSchema: z.ZodType<Prisma.UserRoleUpdateInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutRolesNestedInputSchema).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserRoleUncheckedUpdateInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleCreateManyInputSchema: z.ZodType<Prisma.UserRoleCreateManyInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  roleId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleUpdateManyMutationInputSchema: z.ZodType<Prisma.UserRoleUpdateManyMutationInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateInputSchema: z.ZodType<Prisma.RolePermissionCreateInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  role: z.lazy(() => RoleCreateNestedOneWithoutPermissionsInputSchema),
  permission: z.lazy(() => PermissionCreateNestedOneWithoutRolesInputSchema)
}).strict();

export const RolePermissionUncheckedCreateInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.number().int(),
  permissionId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateInputSchema: z.ZodType<Prisma.RolePermissionUpdateInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional(),
  permission: z.lazy(() => PermissionUpdateOneRequiredWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolePermissionUncheckedUpdateInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateManyInputSchema: z.ZodType<Prisma.RolePermissionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.number().int(),
  permissionId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateManyMutationInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyMutationInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryCreateInputSchema: z.ZodType<Prisma.CategoryCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutCategoryInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedCategoriesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedCategoriesInputSchema)
}).strict();

export const CategoryUncheckedCreateInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUpdateInputSchema: z.ZodType<Prisma.CategoryUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutCategoryNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedCategoriesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedCategoriesNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryCreateManyInputSchema: z.ZodType<Prisma.CategoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const CategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.CategoryUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubjectCreateInputSchema: z.ZodType<Prisma.SubjectCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutSubjectInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedSubjectsInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedSubjectsInputSchema)
}).strict();

export const SubjectUncheckedCreateInputSchema: z.ZodType<Prisma.SubjectUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutSubjectInputSchema).optional()
}).strict();

export const SubjectUpdateInputSchema: z.ZodType<Prisma.SubjectUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutSubjectNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedSubjectsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedSubjectsNestedInputSchema).optional()
}).strict();

export const SubjectUncheckedUpdateInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutSubjectNestedInputSchema).optional()
}).strict();

export const SubjectCreateManyInputSchema: z.ZodType<Prisma.SubjectCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const SubjectUpdateManyMutationInputSchema: z.ZodType<Prisma.SubjectUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubjectUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GradeCreateInputSchema: z.ZodType<Prisma.GradeCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutGradeInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedGradesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedGradesInputSchema)
}).strict();

export const GradeUncheckedCreateInputSchema: z.ZodType<Prisma.GradeUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutGradeInputSchema).optional()
}).strict();

export const GradeUpdateInputSchema: z.ZodType<Prisma.GradeUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutGradeNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedGradesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedGradesNestedInputSchema).optional()
}).strict();

export const GradeUncheckedUpdateInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutGradeNestedInputSchema).optional()
}).strict();

export const GradeCreateManyInputSchema: z.ZodType<Prisma.GradeCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const GradeUpdateManyMutationInputSchema: z.ZodType<Prisma.GradeUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GradeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SourceCreateInputSchema: z.ZodType<Prisma.SourceCreateInput> = z.object({
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutSourceInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedSourcesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedSourcesInputSchema)
}).strict();

export const SourceUncheckedCreateInputSchema: z.ZodType<Prisma.SourceUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutSourceInputSchema).optional()
}).strict();

export const SourceUpdateInputSchema: z.ZodType<Prisma.SourceUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutSourceNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedSourcesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedSourcesNestedInputSchema).optional()
}).strict();

export const SourceUncheckedUpdateInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutSourceNestedInputSchema).optional()
}).strict();

export const SourceCreateManyInputSchema: z.ZodType<Prisma.SourceCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const SourceUpdateManyMutationInputSchema: z.ZodType<Prisma.SourceUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SourceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagCategoryCreateInputSchema: z.ZodType<Prisma.TagCategoryCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutCategoryInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagCategoriesInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagCategoriesInputSchema).optional()
}).strict();

export const TagCategoryUncheckedCreateInputSchema: z.ZodType<Prisma.TagCategoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const TagCategoryUpdateInputSchema: z.ZodType<Prisma.TagCategoryUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutCategoryNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagCategoriesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagCategoriesNestedInputSchema).optional()
}).strict();

export const TagCategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const TagCategoryCreateManyInputSchema: z.ZodType<Prisma.TagCategoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const TagCategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.TagCategoryUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagCategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagCreateInputSchema: z.ZodType<Prisma.TagCreateInput> = z.object({
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => TagCategoryCreateNestedOneWithoutTagsInputSchema),
  parent: z.lazy(() => TagCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => TagCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagCreateNestedManyWithoutTagInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateInputSchema: z.ZodType<Prisma.TagUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  children: z.lazy(() => TagUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const TagUpdateInputSchema: z.ZodType<Prisma.TagUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => TagCategoryUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  parent: z.lazy(() => TagUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => TagUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUpdateManyWithoutTagNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateInputSchema: z.ZodType<Prisma.TagUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  children: z.lazy(() => TagUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const TagCreateManyInputSchema: z.ZodType<Prisma.TagCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const TagUpdateManyMutationInputSchema: z.ZodType<Prisma.TagUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagCreateInputSchema: z.ZodType<Prisma.QuestionTagCreateInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  question: z.lazy(() => QuestionCreateNestedOneWithoutTagsInputSchema),
  tag: z.lazy(() => TagCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionTagsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionTagsInputSchema).optional()
}).strict();

export const QuestionTagUncheckedCreateInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  questionId: z.number().int(),
  tagId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagUpdateInputSchema: z.ZodType<Prisma.QuestionTagUpdateInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.lazy(() => QuestionUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  tag: z.lazy(() => TagUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionTagsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionTagsNestedInputSchema).optional()
}).strict();

export const QuestionTagUncheckedUpdateInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagCreateManyInputSchema: z.ZodType<Prisma.QuestionTagCreateManyInput> = z.object({
  id: z.number().int().optional(),
  questionId: z.number().int(),
  tagId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagUpdateManyMutationInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyMutationInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionTagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SystemLogCreateInputSchema: z.ZodType<Prisma.SystemLogCreateInput> = z.object({
  module: z.string(),
  action: z.string(),
  targetId: z.string().optional().nullable(),
  details: z.string(),
  level: z.number().int().optional(),
  ip: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutSystemLogsInputSchema)
}).strict();

export const SystemLogUncheckedCreateInputSchema: z.ZodType<Prisma.SystemLogUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  module: z.string(),
  action: z.string(),
  targetId: z.string().optional().nullable(),
  details: z.string(),
  level: z.number().int().optional(),
  userId: z.number().int(),
  ip: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const SystemLogUpdateInputSchema: z.ZodType<Prisma.SystemLogUpdateInput> = z.object({
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSystemLogsNestedInputSchema).optional()
}).strict();

export const SystemLogUncheckedUpdateInputSchema: z.ZodType<Prisma.SystemLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SystemLogCreateManyInputSchema: z.ZodType<Prisma.SystemLogCreateManyInput> = z.object({
  id: z.number().int().optional(),
  module: z.string(),
  action: z.string(),
  targetId: z.string().optional().nullable(),
  details: z.string(),
  level: z.number().int().optional(),
  userId: z.number().int(),
  ip: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const SystemLogUpdateManyMutationInputSchema: z.ZodType<Prisma.SystemLogUpdateManyMutationInput> = z.object({
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SystemLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SystemLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionCreateInputSchema: z.ZodType<Prisma.QuestionCreateInput> = z.object({
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutQuestionsInputSchema),
  subject: z.lazy(() => SubjectCreateNestedOneWithoutQuestionsInputSchema),
  grade: z.lazy(() => GradeCreateNestedOneWithoutQuestionsInputSchema),
  source: z.lazy(() => SourceCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionsInputSchema).optional(),
  tags: z.lazy(() => QuestionTagCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionUpdateInputSchema: z.ZodType<Prisma.QuestionUpdateInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  subject: z.lazy(() => SubjectUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  grade: z.lazy(() => GradeUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  source: z.lazy(() => SourceUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionsNestedInputSchema).optional(),
  tags: z.lazy(() => QuestionTagUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionCreateManyInputSchema: z.ZodType<Prisma.QuestionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionUpdateManyMutationInputSchema: z.ZodType<Prisma.QuestionUpdateManyMutationInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const UserRoleListRelationFilterSchema: z.ZodType<Prisma.UserRoleListRelationFilter> = z.object({
  every: z.lazy(() => UserRoleWhereInputSchema).optional(),
  some: z.lazy(() => UserRoleWhereInputSchema).optional(),
  none: z.lazy(() => UserRoleWhereInputSchema).optional()
}).strict();

export const RoleListRelationFilterSchema: z.ZodType<Prisma.RoleListRelationFilter> = z.object({
  every: z.lazy(() => RoleWhereInputSchema).optional(),
  some: z.lazy(() => RoleWhereInputSchema).optional(),
  none: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const PermissionListRelationFilterSchema: z.ZodType<Prisma.PermissionListRelationFilter> = z.object({
  every: z.lazy(() => PermissionWhereInputSchema).optional(),
  some: z.lazy(() => PermissionWhereInputSchema).optional(),
  none: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const CategoryListRelationFilterSchema: z.ZodType<Prisma.CategoryListRelationFilter> = z.object({
  every: z.lazy(() => CategoryWhereInputSchema).optional(),
  some: z.lazy(() => CategoryWhereInputSchema).optional(),
  none: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const SubjectListRelationFilterSchema: z.ZodType<Prisma.SubjectListRelationFilter> = z.object({
  every: z.lazy(() => SubjectWhereInputSchema).optional(),
  some: z.lazy(() => SubjectWhereInputSchema).optional(),
  none: z.lazy(() => SubjectWhereInputSchema).optional()
}).strict();

export const GradeListRelationFilterSchema: z.ZodType<Prisma.GradeListRelationFilter> = z.object({
  every: z.lazy(() => GradeWhereInputSchema).optional(),
  some: z.lazy(() => GradeWhereInputSchema).optional(),
  none: z.lazy(() => GradeWhereInputSchema).optional()
}).strict();

export const SourceListRelationFilterSchema: z.ZodType<Prisma.SourceListRelationFilter> = z.object({
  every: z.lazy(() => SourceWhereInputSchema).optional(),
  some: z.lazy(() => SourceWhereInputSchema).optional(),
  none: z.lazy(() => SourceWhereInputSchema).optional()
}).strict();

export const QuestionListRelationFilterSchema: z.ZodType<Prisma.QuestionListRelationFilter> = z.object({
  every: z.lazy(() => QuestionWhereInputSchema).optional(),
  some: z.lazy(() => QuestionWhereInputSchema).optional(),
  none: z.lazy(() => QuestionWhereInputSchema).optional()
}).strict();

export const TagCategoryListRelationFilterSchema: z.ZodType<Prisma.TagCategoryListRelationFilter> = z.object({
  every: z.lazy(() => TagCategoryWhereInputSchema).optional(),
  some: z.lazy(() => TagCategoryWhereInputSchema).optional(),
  none: z.lazy(() => TagCategoryWhereInputSchema).optional()
}).strict();

export const TagListRelationFilterSchema: z.ZodType<Prisma.TagListRelationFilter> = z.object({
  every: z.lazy(() => TagWhereInputSchema).optional(),
  some: z.lazy(() => TagWhereInputSchema).optional(),
  none: z.lazy(() => TagWhereInputSchema).optional()
}).strict();

export const QuestionTagListRelationFilterSchema: z.ZodType<Prisma.QuestionTagListRelationFilter> = z.object({
  every: z.lazy(() => QuestionTagWhereInputSchema).optional(),
  some: z.lazy(() => QuestionTagWhereInputSchema).optional(),
  none: z.lazy(() => QuestionTagWhereInputSchema).optional()
}).strict();

export const SystemLogListRelationFilterSchema: z.ZodType<Prisma.SystemLogListRelationFilter> = z.object({
  every: z.lazy(() => SystemLogWhereInputSchema).optional(),
  some: z.lazy(() => SystemLogWhereInputSchema).optional(),
  none: z.lazy(() => SystemLogWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const UserRoleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserRoleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RoleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PermissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CategoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubjectOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SubjectOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GradeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.GradeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SourceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SourceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.QuestionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagCategoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TagCategoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TagOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionTagOrderByRelationAggregateInputSchema: z.ZodType<Prisma.QuestionTagOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SystemLogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SystemLogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  username: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const RolePermissionListRelationFilterSchema: z.ZodType<Prisma.RolePermissionListRelationFilter> = z.object({
  every: z.lazy(() => RolePermissionWhereInputSchema).optional(),
  some: z.lazy(() => RolePermissionWhereInputSchema).optional(),
  none: z.lazy(() => RolePermissionWhereInputSchema).optional()
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const RolePermissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RolePermissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleCountOrderByAggregateInputSchema: z.ZodType<Prisma.RoleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RoleAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RoleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleMinOrderByAggregateInputSchema: z.ZodType<Prisma.RoleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleSumOrderByAggregateInputSchema: z.ZodType<Prisma.RoleSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionSumOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RoleScalarRelationFilterSchema: z.ZodType<Prisma.RoleScalarRelationFilter> = z.object({
  is: z.lazy(() => RoleWhereInputSchema).optional(),
  isNot: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const UserRoleUserIdRoleIdCompoundUniqueInputSchema: z.ZodType<Prisma.UserRoleUserIdRoleIdCompoundUniqueInput> = z.object({
  userId: z.number(),
  roleId: z.number()
}).strict();

export const UserRoleCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserRoleSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionScalarRelationFilterSchema: z.ZodType<Prisma.PermissionScalarRelationFilter> = z.object({
  is: z.lazy(() => PermissionWhereInputSchema).optional(),
  isNot: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const RolePermissionRoleIdPermissionIdCompoundUniqueInputSchema: z.ZodType<Prisma.RolePermissionRoleIdPermissionIdCompoundUniqueInput> = z.object({
  roleId: z.number(),
  permissionId: z.number()
}).strict();

export const RolePermissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolePermissionSumOrderByAggregateInputSchema: z.ZodType<Prisma.RolePermissionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  roleId: z.lazy(() => SortOrderSchema).optional(),
  permissionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategorySumOrderByAggregateInputSchema: z.ZodType<Prisma.CategorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubjectCountOrderByAggregateInputSchema: z.ZodType<Prisma.SubjectCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubjectAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SubjectAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubjectMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SubjectMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubjectMinOrderByAggregateInputSchema: z.ZodType<Prisma.SubjectMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubjectSumOrderByAggregateInputSchema: z.ZodType<Prisma.SubjectSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GradeCountOrderByAggregateInputSchema: z.ZodType<Prisma.GradeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GradeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.GradeAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GradeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.GradeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GradeMinOrderByAggregateInputSchema: z.ZodType<Prisma.GradeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GradeSumOrderByAggregateInputSchema: z.ZodType<Prisma.GradeSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SourceCountOrderByAggregateInputSchema: z.ZodType<Prisma.SourceCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SourceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SourceAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SourceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SourceMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SourceMinOrderByAggregateInputSchema: z.ZodType<Prisma.SourceMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SourceSumOrderByAggregateInputSchema: z.ZodType<Prisma.SourceSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  creatorId: z.lazy(() => SortOrderSchema).optional(),
  updaterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UserNullableScalarRelationFilterSchema: z.ZodType<Prisma.UserNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const TagCategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.TagCategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  allowMultiple: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagCategoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TagCategoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagCategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TagCategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  allowMultiple: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagCategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.TagCategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  allowMultiple: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagCategorySumOrderByAggregateInputSchema: z.ZodType<Prisma.TagCategorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const TagCategoryScalarRelationFilterSchema: z.ZodType<Prisma.TagCategoryScalarRelationFilter> = z.object({
  is: z.lazy(() => TagCategoryWhereInputSchema).optional(),
  isNot: z.lazy(() => TagCategoryWhereInputSchema).optional()
}).strict();

export const TagNullableScalarRelationFilterSchema: z.ZodType<Prisma.TagNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => TagWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TagWhereInputSchema).optional().nullable()
}).strict();

export const TagCategoryIdCodeCompoundUniqueInputSchema: z.ZodType<Prisma.TagCategoryIdCodeCompoundUniqueInput> = z.object({
  categoryId: z.number(),
  code: z.string()
}).strict();

export const TagCountOrderByAggregateInputSchema: z.ZodType<Prisma.TagCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TagAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TagMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagMinOrderByAggregateInputSchema: z.ZodType<Prisma.TagMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagSumOrderByAggregateInputSchema: z.ZodType<Prisma.TagSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sortOrder: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  parentId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionScalarRelationFilterSchema: z.ZodType<Prisma.QuestionScalarRelationFilter> = z.object({
  is: z.lazy(() => QuestionWhereInputSchema).optional(),
  isNot: z.lazy(() => QuestionWhereInputSchema).optional()
}).strict();

export const TagScalarRelationFilterSchema: z.ZodType<Prisma.TagScalarRelationFilter> = z.object({
  is: z.lazy(() => TagWhereInputSchema).optional(),
  isNot: z.lazy(() => TagWhereInputSchema).optional()
}).strict();

export const QuestionTagQuestionIdTagIdCompoundUniqueInputSchema: z.ZodType<Prisma.QuestionTagQuestionIdTagIdCompoundUniqueInput> = z.object({
  questionId: z.number(),
  tagId: z.number()
}).strict();

export const QuestionTagCountOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionTagCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  questionId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionTagAvgOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionTagAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  questionId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionTagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionTagMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  questionId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionTagMinOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionTagMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  questionId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionTagSumOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionTagSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  questionId: z.lazy(() => SortOrderSchema).optional(),
  tagId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SystemLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.SystemLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  targetId: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  ip: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SystemLogAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SystemLogAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SystemLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SystemLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  targetId: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  ip: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SystemLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.SystemLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  module: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  targetId: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  ip: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SystemLogSumOrderByAggregateInputSchema: z.ZodType<Prisma.SystemLogSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryScalarRelationFilterSchema: z.ZodType<Prisma.CategoryScalarRelationFilter> = z.object({
  is: z.lazy(() => CategoryWhereInputSchema).optional(),
  isNot: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const SubjectScalarRelationFilterSchema: z.ZodType<Prisma.SubjectScalarRelationFilter> = z.object({
  is: z.lazy(() => SubjectWhereInputSchema).optional(),
  isNot: z.lazy(() => SubjectWhereInputSchema).optional()
}).strict();

export const GradeScalarRelationFilterSchema: z.ZodType<Prisma.GradeScalarRelationFilter> = z.object({
  is: z.lazy(() => GradeWhereInputSchema).optional(),
  isNot: z.lazy(() => GradeWhereInputSchema).optional()
}).strict();

export const SourceScalarRelationFilterSchema: z.ZodType<Prisma.SourceScalarRelationFilter> = z.object({
  is: z.lazy(() => SourceWhereInputSchema).optional(),
  isNot: z.lazy(() => SourceWhereInputSchema).optional()
}).strict();

export const QuestionCountOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  difficulty: z.lazy(() => SortOrderSchema).optional(),
  options: z.lazy(() => SortOrderSchema).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  explanation: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subjectId: z.lazy(() => SortOrderSchema).optional(),
  gradeId: z.lazy(() => SortOrderSchema).optional(),
  sourceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  difficulty: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subjectId: z.lazy(() => SortOrderSchema).optional(),
  gradeId: z.lazy(() => SortOrderSchema).optional(),
  sourceId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  difficulty: z.lazy(() => SortOrderSchema).optional(),
  options: z.lazy(() => SortOrderSchema).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  explanation: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subjectId: z.lazy(() => SortOrderSchema).optional(),
  gradeId: z.lazy(() => SortOrderSchema).optional(),
  sourceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionMinOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  difficulty: z.lazy(() => SortOrderSchema).optional(),
  options: z.lazy(() => SortOrderSchema).optional(),
  answer: z.lazy(() => SortOrderSchema).optional(),
  explanation: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subjectId: z.lazy(() => SortOrderSchema).optional(),
  gradeId: z.lazy(() => SortOrderSchema).optional(),
  sourceId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QuestionSumOrderByAggregateInputSchema: z.ZodType<Prisma.QuestionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  difficulty: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  subjectId: z.lazy(() => SortOrderSchema).optional(),
  gradeId: z.lazy(() => SortOrderSchema).optional(),
  sourceId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  updatedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRoleCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserRoleCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleCreateWithoutUserInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CategoryCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryCreateWithoutCreatedByInputSchema).array(),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CategoryCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => CategoryCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CategoryCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CategoryCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CategoryCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => CategoryCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CategoryCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubjectCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectCreateWithoutCreatedByInputSchema).array(),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubjectCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => SubjectCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubjectCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubjectCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubjectCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => SubjectCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubjectCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GradeCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutCreatedByInputSchema),z.lazy(() => GradeCreateWithoutCreatedByInputSchema).array(),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GradeCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => GradeCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GradeCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GradeCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GradeCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => GradeCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GradeCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SourceCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutCreatedByInputSchema),z.lazy(() => SourceCreateWithoutCreatedByInputSchema).array(),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SourceCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => SourceCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SourceCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SourceCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SourceCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => SourceCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SourceCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCategoryCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TagCategoryCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCategoryCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCategoryCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCategoryCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCreatedByInputSchema),z.lazy(() => TagCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TagCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => TagCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SystemLogCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SystemLogCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SystemLogCreateWithoutUserInputSchema),z.lazy(() => SystemLogCreateWithoutUserInputSchema).array(),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SystemLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => SystemLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SystemLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleCreateWithoutUserInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryCreateWithoutCreatedByInputSchema).array(),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CategoryCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => CategoryCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CategoryCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CategoryCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => CategoryCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CategoryCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectCreateWithoutCreatedByInputSchema).array(),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubjectCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => SubjectCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubjectCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubjectCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => SubjectCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubjectCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutCreatedByInputSchema),z.lazy(() => GradeCreateWithoutCreatedByInputSchema).array(),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GradeCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => GradeCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GradeCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GradeCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => GradeCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GradeCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutCreatedByInputSchema),z.lazy(() => SourceCreateWithoutCreatedByInputSchema).array(),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SourceCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => SourceCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SourceCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SourceCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => SourceCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SourceCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCategoryCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TagCategoryCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCategoryCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCategoryCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCategoryCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TagUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCreatedByInputSchema),z.lazy(() => TagCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TagCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => TagCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SystemLogUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SystemLogUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SystemLogCreateWithoutUserInputSchema),z.lazy(() => SystemLogCreateWithoutUserInputSchema).array(),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SystemLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => SystemLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SystemLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const UserRoleUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleCreateWithoutUserInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.RoleUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => RoleUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.RoleUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => RoleUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => RoleUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => RoleUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.PermissionUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => PermissionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => PermissionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => PermissionUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.PermissionUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => PermissionUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => PermissionUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => PermissionUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CategoryUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.CategoryUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryCreateWithoutCreatedByInputSchema).array(),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CategoryCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => CategoryCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => CategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CategoryCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => CategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CategoryUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => CategoryUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CategoryScalarWhereInputSchema),z.lazy(() => CategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CategoryUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.CategoryUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CategoryCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => CategoryCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => CategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CategoryCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => CategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CategoryUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => CategoryUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CategoryScalarWhereInputSchema),z.lazy(() => CategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubjectUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.SubjectUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectCreateWithoutCreatedByInputSchema).array(),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubjectCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => SubjectCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubjectUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => SubjectUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubjectCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubjectUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => SubjectUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubjectUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => SubjectUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubjectScalarWhereInputSchema),z.lazy(() => SubjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubjectUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.SubjectUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubjectCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => SubjectCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubjectUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => SubjectUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubjectCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubjectUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => SubjectUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubjectUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => SubjectUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubjectScalarWhereInputSchema),z.lazy(() => SubjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GradeUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.GradeUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutCreatedByInputSchema),z.lazy(() => GradeCreateWithoutCreatedByInputSchema).array(),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GradeCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => GradeCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GradeUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => GradeUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GradeCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GradeUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => GradeUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GradeUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => GradeUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GradeScalarWhereInputSchema),z.lazy(() => GradeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GradeUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.GradeUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GradeCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => GradeCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GradeUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => GradeUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GradeCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GradeUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => GradeUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GradeUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => GradeUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GradeScalarWhereInputSchema),z.lazy(() => GradeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SourceUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.SourceUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutCreatedByInputSchema),z.lazy(() => SourceCreateWithoutCreatedByInputSchema).array(),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SourceCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => SourceCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SourceUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => SourceUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SourceCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SourceUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => SourceUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SourceUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => SourceUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SourceScalarWhereInputSchema),z.lazy(() => SourceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SourceUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.SourceUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SourceCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => SourceCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SourceUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => SourceUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SourceCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SourceUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => SourceUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SourceUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => SourceUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SourceScalarWhereInputSchema),z.lazy(() => SourceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.TagCategoryUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCategoryCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TagCategoryCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagCategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCategoryCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagCategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagCategoryUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagCategoryScalarWhereInputSchema),z.lazy(() => TagCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.TagCategoryUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCategoryCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagCategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCategoryCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagCategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagCategoryUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagCategoryScalarWhereInputSchema),z.lazy(() => TagCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.TagUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCreatedByInputSchema),z.lazy(() => TagCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TagCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.TagUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => TagCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionTagUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionTagUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SystemLogUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SystemLogUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SystemLogCreateWithoutUserInputSchema),z.lazy(() => SystemLogCreateWithoutUserInputSchema).array(),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SystemLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => SystemLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SystemLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SystemLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SystemLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SystemLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SystemLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SystemLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SystemLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SystemLogScalarWhereInputSchema),z.lazy(() => SystemLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleCreateWithoutUserInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => RoleUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RoleCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => RoleCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RoleUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => RoleUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RoleCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RoleWhereUniqueInputSchema),z.lazy(() => RoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RoleUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => RoleUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RoleUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => RoleUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => PermissionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => PermissionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => PermissionUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => PermissionCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => PermissionUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionWhereUniqueInputSchema),z.lazy(() => PermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => PermissionUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => PermissionUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryCreateWithoutCreatedByInputSchema).array(),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CategoryCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => CategoryCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => CategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CategoryCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => CategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CategoryUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => CategoryUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CategoryScalarWhereInputSchema),z.lazy(() => CategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CategoryCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => CategoryCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => CategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CategoryCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CategoryWhereUniqueInputSchema),z.lazy(() => CategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => CategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CategoryUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => CategoryUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CategoryScalarWhereInputSchema),z.lazy(() => CategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectCreateWithoutCreatedByInputSchema).array(),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubjectCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => SubjectCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubjectUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => SubjectUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubjectCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubjectUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => SubjectUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubjectUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => SubjectUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubjectScalarWhereInputSchema),z.lazy(() => SubjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubjectCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => SubjectCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubjectUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => SubjectUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubjectCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubjectWhereUniqueInputSchema),z.lazy(() => SubjectWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubjectUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => SubjectUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubjectUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => SubjectUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubjectScalarWhereInputSchema),z.lazy(() => SubjectScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutCreatedByInputSchema),z.lazy(() => GradeCreateWithoutCreatedByInputSchema).array(),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GradeCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => GradeCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GradeUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => GradeUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GradeCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GradeUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => GradeUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GradeUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => GradeUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GradeScalarWhereInputSchema),z.lazy(() => GradeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GradeCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => GradeCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GradeUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => GradeUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GradeCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GradeWhereUniqueInputSchema),z.lazy(() => GradeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GradeUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => GradeUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GradeUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => GradeUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GradeScalarWhereInputSchema),z.lazy(() => GradeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutCreatedByInputSchema),z.lazy(() => SourceCreateWithoutCreatedByInputSchema).array(),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SourceCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => SourceCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SourceUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => SourceUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SourceCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SourceUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => SourceUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SourceUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => SourceUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SourceScalarWhereInputSchema),z.lazy(() => SourceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SourceCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => SourceCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SourceUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => SourceUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SourceCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SourceWhereUniqueInputSchema),z.lazy(() => SourceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SourceUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => SourceUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SourceUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => SourceUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SourceScalarWhereInputSchema),z.lazy(() => SourceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCategoryCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TagCategoryCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagCategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCategoryCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagCategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagCategoryUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagCategoryScalarWhereInputSchema),z.lazy(() => TagCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCategoryCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagCategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCategoryCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagCategoryWhereUniqueInputSchema),z.lazy(() => TagCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagCategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagCategoryUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagCategoryScalarWhereInputSchema),z.lazy(() => TagCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCreatedByInputSchema),z.lazy(() => TagCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TagCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => TagCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionTagUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionTagUpdateManyWithWhereWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUpdateManyWithWhereWithoutUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SystemLogUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SystemLogCreateWithoutUserInputSchema),z.lazy(() => SystemLogCreateWithoutUserInputSchema).array(),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SystemLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => SystemLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SystemLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SystemLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SystemLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SystemLogWhereUniqueInputSchema),z.lazy(() => SystemLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SystemLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SystemLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SystemLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SystemLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SystemLogScalarWhereInputSchema),z.lazy(() => SystemLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleCreateWithoutRoleInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCreatedRolesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedRolesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedRolesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedRolesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleCreateWithoutRoleInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleCreateWithoutRoleInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCreatedRolesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCreatedRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedRolesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedRolesInputSchema),z.lazy(() => UserUpdateWithoutCreatedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedRolesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUpdatedRolesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUpdatedRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedRolesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedRolesInputSchema),z.lazy(() => UserUpdateWithoutUpdatedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedRolesInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateWithoutRoleInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleCreateWithoutRoleInputSchema).array(),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => UserRoleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRoleCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRoleWhereUniqueInputSchema),z.lazy(() => UserRoleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRoleUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => UserRoleUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionCreateNestedManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateNestedManyWithoutPermissionInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCreatedPermissionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedPermissionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedPermissionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedPermissionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedPermissionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedPermissionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateNestedManyWithoutPermissionInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolePermissionUpdateManyWithoutPermissionNestedInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithoutPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCreatedPermissionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCreatedPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedPermissionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedPermissionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedPermissionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedPermissionsInputSchema),z.lazy(() => UserUpdateWithoutCreatedPermissionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedPermissionsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUpdatedPermissionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUpdatedPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedPermissionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedPermissionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedPermissionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedPermissionsInputSchema),z.lazy(() => UserUpdateWithoutUpdatedPermissionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedPermissionsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema).array(),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema),z.lazy(() => RolePermissionCreateOrConnectWithoutPermissionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolePermissionCreateManyPermissionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolePermissionWhereUniqueInputSchema),z.lazy(() => RolePermissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema),z.lazy(() => RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutRolesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RoleCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.RoleCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutUsersInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutRolesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRolesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutRolesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutRolesInputSchema),z.lazy(() => UserUpdateWithoutRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRolesInputSchema) ]).optional(),
}).strict();

export const RoleUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.RoleUpdateOneRequiredWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutUsersInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => RoleUpsertWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RoleUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => RoleUpdateWithoutUsersInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const RoleCreateNestedOneWithoutPermissionsInputSchema: z.ZodType<Prisma.RoleCreateNestedOneWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutPermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional()
}).strict();

export const PermissionCreateNestedOneWithoutRolesInputSchema: z.ZodType<Prisma.PermissionCreateNestedOneWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolesInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionCreateOrConnectWithoutRolesInputSchema).optional(),
  connect: z.lazy(() => PermissionWhereUniqueInputSchema).optional()
}).strict();

export const RoleUpdateOneRequiredWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.RoleUpdateOneRequiredWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RoleCreateWithoutPermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RoleCreateOrConnectWithoutPermissionsInputSchema).optional(),
  upsert: z.lazy(() => RoleUpsertWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => RoleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RoleUpdateToOneWithWhereWithoutPermissionsInputSchema),z.lazy(() => RoleUpdateWithoutPermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutPermissionsInputSchema) ]).optional(),
}).strict();

export const PermissionUpdateOneRequiredWithoutRolesNestedInputSchema: z.ZodType<Prisma.PermissionUpdateOneRequiredWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolesInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionCreateOrConnectWithoutRolesInputSchema).optional(),
  upsert: z.lazy(() => PermissionUpsertWithoutRolesInputSchema).optional(),
  connect: z.lazy(() => PermissionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PermissionUpdateToOneWithWhereWithoutRolesInputSchema),z.lazy(() => PermissionUpdateWithoutRolesInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolesInputSchema) ]).optional(),
}).strict();

export const QuestionCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutCategoryInputSchema),z.lazy(() => QuestionCreateWithoutCategoryInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCreatedCategoriesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedCategoriesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedCategoriesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedCategoriesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutCategoryInputSchema),z.lazy(() => QuestionCreateWithoutCategoryInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutCategoryInputSchema),z.lazy(() => QuestionCreateWithoutCategoryInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCreatedCategoriesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCreatedCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedCategoriesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedCategoriesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedCategoriesInputSchema),z.lazy(() => UserUpdateWithoutCreatedCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedCategoriesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUpdatedCategoriesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUpdatedCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedCategoriesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedCategoriesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedCategoriesInputSchema),z.lazy(() => UserUpdateWithoutUpdatedCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedCategoriesInputSchema) ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutCategoryInputSchema),z.lazy(() => QuestionCreateWithoutCategoryInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionCreateNestedManyWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionCreateNestedManyWithoutSubjectInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutSubjectInputSchema),z.lazy(() => QuestionCreateWithoutSubjectInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutSubjectInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutSubjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManySubjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCreatedSubjectsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedSubjectsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedSubjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedSubjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedSubjectsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedSubjectsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedSubjectsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedSubjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedSubjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedSubjectsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateNestedManyWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateNestedManyWithoutSubjectInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutSubjectInputSchema),z.lazy(() => QuestionCreateWithoutSubjectInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutSubjectInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutSubjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManySubjectInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionUpdateManyWithoutSubjectNestedInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithoutSubjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutSubjectInputSchema),z.lazy(() => QuestionCreateWithoutSubjectInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutSubjectInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutSubjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutSubjectInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutSubjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManySubjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutSubjectInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutSubjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutSubjectInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutSubjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCreatedSubjectsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCreatedSubjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedSubjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedSubjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedSubjectsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedSubjectsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedSubjectsInputSchema),z.lazy(() => UserUpdateWithoutCreatedSubjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedSubjectsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUpdatedSubjectsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUpdatedSubjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedSubjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedSubjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedSubjectsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedSubjectsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedSubjectsInputSchema),z.lazy(() => UserUpdateWithoutUpdatedSubjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedSubjectsInputSchema) ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyWithoutSubjectNestedInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutSubjectNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutSubjectInputSchema),z.lazy(() => QuestionCreateWithoutSubjectInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutSubjectInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutSubjectInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutSubjectInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutSubjectInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManySubjectInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutSubjectInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutSubjectInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutSubjectInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutSubjectInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionCreateNestedManyWithoutGradeInputSchema: z.ZodType<Prisma.QuestionCreateNestedManyWithoutGradeInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutGradeInputSchema),z.lazy(() => QuestionCreateWithoutGradeInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutGradeInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutGradeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyGradeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCreatedGradesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedGradesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedGradesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedGradesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedGradesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedGradesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedGradesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedGradesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedGradesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedGradesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateNestedManyWithoutGradeInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateNestedManyWithoutGradeInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutGradeInputSchema),z.lazy(() => QuestionCreateWithoutGradeInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutGradeInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutGradeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyGradeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionUpdateManyWithoutGradeNestedInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithoutGradeNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutGradeInputSchema),z.lazy(() => QuestionCreateWithoutGradeInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutGradeInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutGradeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutGradeInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutGradeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyGradeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutGradeInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutGradeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutGradeInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutGradeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCreatedGradesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCreatedGradesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedGradesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedGradesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedGradesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedGradesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedGradesInputSchema),z.lazy(() => UserUpdateWithoutCreatedGradesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedGradesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUpdatedGradesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUpdatedGradesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedGradesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedGradesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedGradesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedGradesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedGradesInputSchema),z.lazy(() => UserUpdateWithoutUpdatedGradesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedGradesInputSchema) ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyWithoutGradeNestedInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutGradeNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutGradeInputSchema),z.lazy(() => QuestionCreateWithoutGradeInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutGradeInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutGradeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutGradeInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutGradeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManyGradeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutGradeInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutGradeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutGradeInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutGradeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionCreateNestedManyWithoutSourceInputSchema: z.ZodType<Prisma.QuestionCreateNestedManyWithoutSourceInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutSourceInputSchema),z.lazy(() => QuestionCreateWithoutSourceInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutSourceInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutSourceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManySourceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCreatedSourcesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedSourcesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedSourcesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedSourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedSourcesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedSourcesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedSourcesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedSourcesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedSourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedSourcesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateNestedManyWithoutSourceInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateNestedManyWithoutSourceInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutSourceInputSchema),z.lazy(() => QuestionCreateWithoutSourceInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutSourceInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutSourceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManySourceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionUpdateManyWithoutSourceNestedInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithoutSourceNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutSourceInputSchema),z.lazy(() => QuestionCreateWithoutSourceInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutSourceInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutSourceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutSourceInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutSourceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManySourceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutSourceInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutSourceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutSourceInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutSourceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCreatedSourcesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCreatedSourcesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedSourcesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedSourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedSourcesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedSourcesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedSourcesInputSchema),z.lazy(() => UserUpdateWithoutCreatedSourcesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedSourcesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUpdatedSourcesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUpdatedSourcesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedSourcesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedSourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedSourcesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedSourcesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedSourcesInputSchema),z.lazy(() => UserUpdateWithoutUpdatedSourcesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedSourcesInputSchema) ]).optional(),
}).strict();

export const QuestionUncheckedUpdateManyWithoutSourceNestedInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutSourceNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutSourceInputSchema),z.lazy(() => QuestionCreateWithoutSourceInputSchema).array(),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionCreateOrConnectWithoutSourceInputSchema),z.lazy(() => QuestionCreateOrConnectWithoutSourceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionUpsertWithWhereUniqueWithoutSourceInputSchema),z.lazy(() => QuestionUpsertWithWhereUniqueWithoutSourceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionCreateManySourceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionWhereUniqueInputSchema),z.lazy(() => QuestionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateWithWhereUniqueWithoutSourceInputSchema),z.lazy(() => QuestionUpdateWithWhereUniqueWithoutSourceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionUpdateManyWithWhereWithoutSourceInputSchema),z.lazy(() => QuestionUpdateManyWithWhereWithoutSourceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.TagCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCategoryInputSchema),z.lazy(() => TagCreateWithoutCategoryInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => TagCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCreatedTagCategoriesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedTagCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedTagCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedTagCategoriesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedTagCategoriesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedTagCategoriesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedTagCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedTagCategoriesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TagUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.TagUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCategoryInputSchema),z.lazy(() => TagCreateWithoutCategoryInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => TagCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const TagUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.TagUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCategoryInputSchema),z.lazy(() => TagCreateWithoutCategoryInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => TagCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutCreatedTagCategoriesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutCreatedTagCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedTagCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedTagCategoriesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedTagCategoriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedTagCategoriesInputSchema),z.lazy(() => UserUpdateWithoutCreatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedTagCategoriesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutUpdatedTagCategoriesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutUpdatedTagCategoriesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedTagCategoriesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedTagCategoriesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedTagCategoriesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedTagCategoriesInputSchema),z.lazy(() => UserUpdateWithoutUpdatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedTagCategoriesInputSchema) ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const TagUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutCategoryInputSchema),z.lazy(() => TagCreateWithoutCategoryInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => TagCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryCreateNestedOneWithoutTagsInputSchema: z.ZodType<Prisma.TagCategoryCreateNestedOneWithoutTagsInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutTagsInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TagCategoryCreateOrConnectWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => TagCategoryWhereUniqueInputSchema).optional()
}).strict();

export const TagCreateNestedOneWithoutChildrenInputSchema: z.ZodType<Prisma.TagCreateNestedOneWithoutChildrenInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutChildrenInputSchema),z.lazy(() => TagUncheckedCreateWithoutChildrenInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TagCreateOrConnectWithoutChildrenInputSchema).optional(),
  connect: z.lazy(() => TagWhereUniqueInputSchema).optional()
}).strict();

export const TagCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.TagCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutParentInputSchema),z.lazy(() => TagCreateWithoutParentInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutParentInputSchema),z.lazy(() => TagCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagCreateNestedManyWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagCreateNestedManyWithoutTagInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutTagInputSchema),z.lazy(() => QuestionTagCreateWithoutTagInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutTagInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyTagInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutCreatedTagsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedTagsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedTagsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedTagsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedTagsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedTagsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TagUncheckedCreateNestedManyWithoutParentInputSchema: z.ZodType<Prisma.TagUncheckedCreateNestedManyWithoutParentInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutParentInputSchema),z.lazy(() => TagCreateWithoutParentInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutParentInputSchema),z.lazy(() => TagCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyParentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUncheckedCreateNestedManyWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateNestedManyWithoutTagInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutTagInputSchema),z.lazy(() => QuestionTagCreateWithoutTagInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutTagInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyTagInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TagCategoryUpdateOneRequiredWithoutTagsNestedInputSchema: z.ZodType<Prisma.TagCategoryUpdateOneRequiredWithoutTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutTagsInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TagCategoryCreateOrConnectWithoutTagsInputSchema).optional(),
  upsert: z.lazy(() => TagCategoryUpsertWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => TagCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TagCategoryUpdateToOneWithWhereWithoutTagsInputSchema),z.lazy(() => TagCategoryUpdateWithoutTagsInputSchema),z.lazy(() => TagCategoryUncheckedUpdateWithoutTagsInputSchema) ]).optional(),
}).strict();

export const TagUpdateOneWithoutChildrenNestedInputSchema: z.ZodType<Prisma.TagUpdateOneWithoutChildrenNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutChildrenInputSchema),z.lazy(() => TagUncheckedCreateWithoutChildrenInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TagCreateOrConnectWithoutChildrenInputSchema).optional(),
  upsert: z.lazy(() => TagUpsertWithoutChildrenInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TagWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TagWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TagWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TagUpdateToOneWithWhereWithoutChildrenInputSchema),z.lazy(() => TagUpdateWithoutChildrenInputSchema),z.lazy(() => TagUncheckedUpdateWithoutChildrenInputSchema) ]).optional(),
}).strict();

export const TagUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.TagUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutParentInputSchema),z.lazy(() => TagCreateWithoutParentInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutParentInputSchema),z.lazy(() => TagCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUpdateManyWithoutTagNestedInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyWithoutTagNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutTagInputSchema),z.lazy(() => QuestionTagCreateWithoutTagInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutTagInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutTagInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutTagInputSchema),z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyTagInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutTagInputSchema),z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutTagInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionTagUpdateManyWithWhereWithoutTagInputSchema),z.lazy(() => QuestionTagUpdateManyWithWhereWithoutTagInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutCreatedTagsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutCreatedTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedTagsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedTagsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedTagsInputSchema),z.lazy(() => UserUpdateWithoutCreatedTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedTagsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutUpdatedTagsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutUpdatedTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedTagsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedTagsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedTagsInputSchema),z.lazy(() => UserUpdateWithoutUpdatedTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedTagsInputSchema) ]).optional(),
}).strict();

export const TagUncheckedUpdateManyWithoutParentNestedInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutParentNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutParentInputSchema),z.lazy(() => TagCreateWithoutParentInputSchema).array(),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TagCreateOrConnectWithoutParentInputSchema),z.lazy(() => TagCreateOrConnectWithoutParentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TagUpsertWithWhereUniqueWithoutParentInputSchema),z.lazy(() => TagUpsertWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TagCreateManyParentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TagWhereUniqueInputSchema),z.lazy(() => TagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TagUpdateWithWhereUniqueWithoutParentInputSchema),z.lazy(() => TagUpdateWithWhereUniqueWithoutParentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TagUpdateManyWithWhereWithoutParentInputSchema),z.lazy(() => TagUpdateManyWithWhereWithoutParentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUncheckedUpdateManyWithoutTagNestedInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyWithoutTagNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutTagInputSchema),z.lazy(() => QuestionTagCreateWithoutTagInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutTagInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutTagInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutTagInputSchema),z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutTagInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyTagInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutTagInputSchema),z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutTagInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionTagUpdateManyWithWhereWithoutTagInputSchema),z.lazy(() => QuestionTagUpdateManyWithWhereWithoutTagInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionCreateNestedOneWithoutTagsInputSchema: z.ZodType<Prisma.QuestionCreateNestedOneWithoutTagsInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutTagsInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QuestionCreateOrConnectWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => QuestionWhereUniqueInputSchema).optional()
}).strict();

export const TagCreateNestedOneWithoutQuestionsInputSchema: z.ZodType<Prisma.TagCreateNestedOneWithoutQuestionsInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutQuestionsInputSchema),z.lazy(() => TagUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TagCreateOrConnectWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => TagWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutCreatedQuestionTagsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedQuestionTagsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedQuestionTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedQuestionTagsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedQuestionTagsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedQuestionTagsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedQuestionTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedQuestionTagsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const QuestionUpdateOneRequiredWithoutTagsNestedInputSchema: z.ZodType<Prisma.QuestionUpdateOneRequiredWithoutTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionCreateWithoutTagsInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QuestionCreateOrConnectWithoutTagsInputSchema).optional(),
  upsert: z.lazy(() => QuestionUpsertWithoutTagsInputSchema).optional(),
  connect: z.lazy(() => QuestionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => QuestionUpdateToOneWithWhereWithoutTagsInputSchema),z.lazy(() => QuestionUpdateWithoutTagsInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutTagsInputSchema) ]).optional(),
}).strict();

export const TagUpdateOneRequiredWithoutQuestionsNestedInputSchema: z.ZodType<Prisma.TagUpdateOneRequiredWithoutQuestionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TagCreateWithoutQuestionsInputSchema),z.lazy(() => TagUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TagCreateOrConnectWithoutQuestionsInputSchema).optional(),
  upsert: z.lazy(() => TagUpsertWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => TagWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TagUpdateToOneWithWhereWithoutQuestionsInputSchema),z.lazy(() => TagUpdateWithoutQuestionsInputSchema),z.lazy(() => TagUncheckedUpdateWithoutQuestionsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutCreatedQuestionTagsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutCreatedQuestionTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedQuestionTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedQuestionTagsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedQuestionTagsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedQuestionTagsInputSchema),z.lazy(() => UserUpdateWithoutCreatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedQuestionTagsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutUpdatedQuestionTagsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutUpdatedQuestionTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedQuestionTagsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedQuestionTagsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedQuestionTagsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedQuestionTagsInputSchema),z.lazy(() => UserUpdateWithoutUpdatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedQuestionTagsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSystemLogsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSystemLogsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSystemLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSystemLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSystemLogsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSystemLogsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSystemLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSystemLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSystemLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSystemLogsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSystemLogsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSystemLogsInputSchema),z.lazy(() => UserUpdateWithoutSystemLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSystemLogsInputSchema) ]).optional(),
}).strict();

export const CategoryCreateNestedOneWithoutQuestionsInputSchema: z.ZodType<Prisma.CategoryCreateNestedOneWithoutQuestionsInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutQuestionsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional()
}).strict();

export const SubjectCreateNestedOneWithoutQuestionsInputSchema: z.ZodType<Prisma.SubjectCreateNestedOneWithoutQuestionsInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutQuestionsInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubjectCreateOrConnectWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => SubjectWhereUniqueInputSchema).optional()
}).strict();

export const GradeCreateNestedOneWithoutQuestionsInputSchema: z.ZodType<Prisma.GradeCreateNestedOneWithoutQuestionsInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutQuestionsInputSchema),z.lazy(() => GradeUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GradeCreateOrConnectWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => GradeWhereUniqueInputSchema).optional()
}).strict();

export const SourceCreateNestedOneWithoutQuestionsInputSchema: z.ZodType<Prisma.SourceCreateNestedOneWithoutQuestionsInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutQuestionsInputSchema),z.lazy(() => SourceUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SourceCreateOrConnectWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => SourceWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutCreatedQuestionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCreatedQuestionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedQuestionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedQuestionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUpdatedQuestionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUpdatedQuestionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedQuestionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedQuestionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const QuestionTagCreateNestedManyWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagCreateNestedManyWithoutQuestionInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutQuestionInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutQuestionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyQuestionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUncheckedCreateNestedManyWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateNestedManyWithoutQuestionInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutQuestionInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutQuestionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyQuestionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CategoryUpdateOneRequiredWithoutQuestionsNestedInputSchema: z.ZodType<Prisma.CategoryUpdateOneRequiredWithoutQuestionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutQuestionsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutQuestionsInputSchema).optional(),
  upsert: z.lazy(() => CategoryUpsertWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateToOneWithWhereWithoutQuestionsInputSchema),z.lazy(() => CategoryUpdateWithoutQuestionsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutQuestionsInputSchema) ]).optional(),
}).strict();

export const SubjectUpdateOneRequiredWithoutQuestionsNestedInputSchema: z.ZodType<Prisma.SubjectUpdateOneRequiredWithoutQuestionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubjectCreateWithoutQuestionsInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubjectCreateOrConnectWithoutQuestionsInputSchema).optional(),
  upsert: z.lazy(() => SubjectUpsertWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => SubjectWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubjectUpdateToOneWithWhereWithoutQuestionsInputSchema),z.lazy(() => SubjectUpdateWithoutQuestionsInputSchema),z.lazy(() => SubjectUncheckedUpdateWithoutQuestionsInputSchema) ]).optional(),
}).strict();

export const GradeUpdateOneRequiredWithoutQuestionsNestedInputSchema: z.ZodType<Prisma.GradeUpdateOneRequiredWithoutQuestionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => GradeCreateWithoutQuestionsInputSchema),z.lazy(() => GradeUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GradeCreateOrConnectWithoutQuestionsInputSchema).optional(),
  upsert: z.lazy(() => GradeUpsertWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => GradeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => GradeUpdateToOneWithWhereWithoutQuestionsInputSchema),z.lazy(() => GradeUpdateWithoutQuestionsInputSchema),z.lazy(() => GradeUncheckedUpdateWithoutQuestionsInputSchema) ]).optional(),
}).strict();

export const SourceUpdateOneRequiredWithoutQuestionsNestedInputSchema: z.ZodType<Prisma.SourceUpdateOneRequiredWithoutQuestionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SourceCreateWithoutQuestionsInputSchema),z.lazy(() => SourceUncheckedCreateWithoutQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SourceCreateOrConnectWithoutQuestionsInputSchema).optional(),
  upsert: z.lazy(() => SourceUpsertWithoutQuestionsInputSchema).optional(),
  connect: z.lazy(() => SourceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SourceUpdateToOneWithWhereWithoutQuestionsInputSchema),z.lazy(() => SourceUpdateWithoutQuestionsInputSchema),z.lazy(() => SourceUncheckedUpdateWithoutQuestionsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutCreatedQuestionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutCreatedQuestionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedQuestionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCreatedQuestionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCreatedQuestionsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCreatedQuestionsInputSchema),z.lazy(() => UserUpdateWithoutCreatedQuestionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedQuestionsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutUpdatedQuestionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutUpdatedQuestionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedQuestionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedQuestionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUpdatedQuestionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUpdatedQuestionsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUpdatedQuestionsInputSchema),z.lazy(() => UserUpdateWithoutUpdatedQuestionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedQuestionsInputSchema) ]).optional(),
}).strict();

export const QuestionTagUpdateManyWithoutQuestionNestedInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyWithoutQuestionNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutQuestionInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutQuestionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutQuestionInputSchema),z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutQuestionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyQuestionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutQuestionInputSchema),z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutQuestionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionTagUpdateManyWithWhereWithoutQuestionInputSchema),z.lazy(() => QuestionTagUpdateManyWithWhereWithoutQuestionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QuestionTagUncheckedUpdateManyWithoutQuestionNestedInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyWithoutQuestionNestedInput> = z.object({
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema).array(),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QuestionTagCreateOrConnectWithoutQuestionInputSchema),z.lazy(() => QuestionTagCreateOrConnectWithoutQuestionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutQuestionInputSchema),z.lazy(() => QuestionTagUpsertWithWhereUniqueWithoutQuestionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QuestionTagCreateManyQuestionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QuestionTagWhereUniqueInputSchema),z.lazy(() => QuestionTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutQuestionInputSchema),z.lazy(() => QuestionTagUpdateWithWhereUniqueWithoutQuestionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QuestionTagUpdateManyWithWhereWithoutQuestionInputSchema),z.lazy(() => QuestionTagUpdateManyWithWhereWithoutQuestionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UserRoleCreateWithoutUserInputSchema: z.ZodType<Prisma.UserRoleCreateWithoutUserInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  role: z.lazy(() => RoleCreateNestedOneWithoutUsersInputSchema)
}).strict();

export const UserRoleUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserRoleCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserRoleCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.UserRoleCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserRoleCreateManyUserInputSchema),z.lazy(() => UserRoleCreateManyUserInputSchema).array() ]),
}).strict();

export const RoleCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleCreateWithoutCreatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  users: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedRolesInputSchema)
}).strict();

export const RoleUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int(),
  permissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  users: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const RoleCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.RoleCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RoleCreateManyCreatedByInputSchema),z.lazy(() => RoleCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const RoleCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleCreateWithoutUpdatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  users: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedRolesInputSchema)
}).strict();

export const RoleUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  permissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  users: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const RoleCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.RoleCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RoleCreateManyUpdatedByInputSchema),z.lazy(() => RoleCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const PermissionCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionCreateWithoutCreatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => RolePermissionCreateNestedManyWithoutPermissionInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedPermissionsInputSchema)
}).strict();

export const PermissionUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int(),
  roles: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const PermissionCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.PermissionCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PermissionCreateManyCreatedByInputSchema),z.lazy(() => PermissionCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const PermissionCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionCreateWithoutUpdatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => RolePermissionCreateNestedManyWithoutPermissionInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedPermissionsInputSchema)
}).strict();

export const PermissionUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  roles: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutPermissionInputSchema).optional()
}).strict();

export const PermissionCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const PermissionCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.PermissionCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PermissionCreateManyUpdatedByInputSchema),z.lazy(() => PermissionCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const CategoryCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryCreateWithoutCreatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutCategoryInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedCategoriesInputSchema)
}).strict();

export const CategoryUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CategoryCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const CategoryCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.CategoryCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CategoryCreateManyCreatedByInputSchema),z.lazy(() => CategoryCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const CategoryCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryCreateWithoutUpdatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutCategoryInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedCategoriesInputSchema)
}).strict();

export const CategoryUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const CategoryCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.CategoryCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CategoryCreateManyUpdatedByInputSchema),z.lazy(() => CategoryCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const SubjectCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectCreateWithoutCreatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutSubjectInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedSubjectsInputSchema)
}).strict();

export const SubjectUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutSubjectInputSchema).optional()
}).strict();

export const SubjectCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => SubjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubjectCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const SubjectCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.SubjectCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SubjectCreateManyCreatedByInputSchema),z.lazy(() => SubjectCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const SubjectCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectCreateWithoutUpdatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutSubjectInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedSubjectsInputSchema)
}).strict();

export const SubjectUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutSubjectInputSchema).optional()
}).strict();

export const SubjectCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => SubjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const SubjectCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.SubjectCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SubjectCreateManyUpdatedByInputSchema),z.lazy(() => SubjectCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const GradeCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeCreateWithoutCreatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutGradeInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedGradesInputSchema)
}).strict();

export const GradeUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutGradeInputSchema).optional()
}).strict();

export const GradeCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => GradeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GradeCreateWithoutCreatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const GradeCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.GradeCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => GradeCreateManyCreatedByInputSchema),z.lazy(() => GradeCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const GradeCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeCreateWithoutUpdatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutGradeInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedGradesInputSchema)
}).strict();

export const GradeUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutGradeInputSchema).optional()
}).strict();

export const GradeCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => GradeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GradeCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const GradeCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.GradeCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => GradeCreateManyUpdatedByInputSchema),z.lazy(() => GradeCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const SourceCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceCreateWithoutCreatedByInput> = z.object({
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutSourceInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedSourcesInputSchema)
}).strict();

export const SourceUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutSourceInputSchema).optional()
}).strict();

export const SourceCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => SourceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SourceCreateWithoutCreatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const SourceCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.SourceCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SourceCreateManyCreatedByInputSchema),z.lazy(() => SourceCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const SourceCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceCreateWithoutUpdatedByInput> = z.object({
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  questions: z.lazy(() => QuestionCreateNestedManyWithoutSourceInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedSourcesInputSchema)
}).strict();

export const SourceUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  questions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutSourceInputSchema).optional()
}).strict();

export const SourceCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => SourceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SourceCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const SourceCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.SourceCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SourceCreateManyUpdatedByInputSchema),z.lazy(() => SourceCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const QuestionCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionCreateWithoutCreatedByInput> = z.object({
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutQuestionsInputSchema),
  subject: z.lazy(() => SubjectCreateNestedOneWithoutQuestionsInputSchema),
  grade: z.lazy(() => GradeCreateNestedOneWithoutQuestionsInputSchema),
  source: z.lazy(() => SourceCreateNestedOneWithoutQuestionsInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionsInputSchema).optional(),
  tags: z.lazy(() => QuestionTagCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updatedById: z.number().int().optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const QuestionCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.QuestionCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionCreateManyCreatedByInputSchema),z.lazy(() => QuestionCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const QuestionCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionCreateWithoutUpdatedByInput> = z.object({
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutQuestionsInputSchema),
  subject: z.lazy(() => SubjectCreateNestedOneWithoutQuestionsInputSchema),
  grade: z.lazy(() => GradeCreateNestedOneWithoutQuestionsInputSchema),
  source: z.lazy(() => SourceCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionsInputSchema).optional(),
  tags: z.lazy(() => QuestionTagCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const QuestionCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.QuestionCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionCreateManyUpdatedByInputSchema),z.lazy(() => QuestionCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const TagCategoryCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryCreateWithoutCreatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutCategoryInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagCategoriesInputSchema).optional()
}).strict();

export const TagCategoryUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updatedById: z.number().int().optional().nullable(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const TagCategoryCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TagCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const TagCategoryCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.TagCategoryCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCategoryCreateManyCreatedByInputSchema),z.lazy(() => TagCategoryCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const TagCategoryCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryCreateWithoutUpdatedByInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tags: z.lazy(() => TagCreateNestedManyWithoutCategoryInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagCategoriesInputSchema).optional()
}).strict();

export const TagCategoryUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  tags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const TagCategoryCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => TagCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const TagCategoryCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.TagCategoryCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCategoryCreateManyUpdatedByInputSchema),z.lazy(() => TagCategoryCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const TagCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCreateWithoutCreatedByInput> = z.object({
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => TagCategoryCreateNestedOneWithoutTagsInputSchema),
  parent: z.lazy(() => TagCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => TagCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagCreateNestedManyWithoutTagInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updatedById: z.number().int().optional().nullable(),
  children: z.lazy(() => TagUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const TagCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutCreatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const TagCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.TagCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCreateManyCreatedByInputSchema),z.lazy(() => TagCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const TagCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCreateWithoutUpdatedByInput> = z.object({
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => TagCategoryCreateNestedOneWithoutTagsInputSchema),
  parent: z.lazy(() => TagCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => TagCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagCreateNestedManyWithoutTagInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  children: z.lazy(() => TagUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const TagCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutUpdatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const TagCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.TagCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCreateManyUpdatedByInputSchema),z.lazy(() => TagCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const QuestionTagCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagCreateWithoutCreatedByInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  question: z.lazy(() => QuestionCreateNestedOneWithoutTagsInputSchema),
  tag: z.lazy(() => TagCreateNestedOneWithoutQuestionsInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionTagsInputSchema).optional()
}).strict();

export const QuestionTagUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  questionId: z.number().int(),
  tagId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const QuestionTagCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.QuestionTagCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionTagCreateManyCreatedByInputSchema),z.lazy(() => QuestionTagCreateManyCreatedByInputSchema).array() ]),
}).strict();

export const QuestionTagCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagCreateWithoutUpdatedByInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  question: z.lazy(() => QuestionCreateNestedOneWithoutTagsInputSchema),
  tag: z.lazy(() => TagCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionTagsInputSchema).optional()
}).strict();

export const QuestionTagUncheckedCreateWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateWithoutUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  questionId: z.number().int(),
  tagId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagCreateOrConnectWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagCreateOrConnectWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const QuestionTagCreateManyUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.QuestionTagCreateManyUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionTagCreateManyUpdatedByInputSchema),z.lazy(() => QuestionTagCreateManyUpdatedByInputSchema).array() ]),
}).strict();

export const SystemLogCreateWithoutUserInputSchema: z.ZodType<Prisma.SystemLogCreateWithoutUserInput> = z.object({
  module: z.string(),
  action: z.string(),
  targetId: z.string().optional().nullable(),
  details: z.string(),
  level: z.number().int().optional(),
  ip: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const SystemLogUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SystemLogUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  module: z.string(),
  action: z.string(),
  targetId: z.string().optional().nullable(),
  details: z.string(),
  level: z.number().int().optional(),
  ip: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const SystemLogCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SystemLogCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SystemLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SystemLogCreateWithoutUserInputSchema),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SystemLogCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SystemLogCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SystemLogCreateManyUserInputSchema),z.lazy(() => SystemLogCreateManyUserInputSchema).array() ]),
}).strict();

export const UserRoleUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserRoleUpdateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserRoleUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateWithoutUserInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserRoleUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserRoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateManyMutationInputSchema),z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const UserRoleScalarWhereInputSchema: z.ZodType<Prisma.UserRoleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRoleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRoleScalarWhereInputSchema),z.lazy(() => UserRoleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RoleUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RoleUpdateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const RoleUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RoleUpdateWithoutCreatedByInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const RoleUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RoleUpdateManyMutationInputSchema),z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const RoleScalarWhereInputSchema: z.ZodType<Prisma.RoleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RoleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RoleScalarWhereInputSchema),z.lazy(() => RoleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const RoleUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RoleUpdateWithoutUpdatedByInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutUpdatedByInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const RoleUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RoleUpdateWithoutUpdatedByInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const RoleUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => RoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RoleUpdateManyMutationInputSchema),z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const PermissionUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PermissionUpdateWithoutCreatedByInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionCreateWithoutCreatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const PermissionUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PermissionUpdateWithoutCreatedByInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const PermissionUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => PermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PermissionUpdateManyMutationInputSchema),z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const PermissionScalarWhereInputSchema: z.ZodType<Prisma.PermissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionScalarWhereInputSchema),z.lazy(() => PermissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const PermissionUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PermissionUpdateWithoutUpdatedByInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionCreateWithoutUpdatedByInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const PermissionUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PermissionUpdateWithoutUpdatedByInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const PermissionUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => PermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PermissionUpdateManyMutationInputSchema),z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const CategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CategoryUpdateWithoutCreatedByInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => CategoryCreateWithoutCreatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const CategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CategoryUpdateWithoutCreatedByInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const CategoryUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => CategoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CategoryUpdateManyMutationInputSchema),z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const CategoryScalarWhereInputSchema: z.ZodType<Prisma.CategoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryScalarWhereInputSchema),z.lazy(() => CategoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryScalarWhereInputSchema),z.lazy(() => CategoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const CategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CategoryUpdateWithoutUpdatedByInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => CategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const CategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CategoryUpdateWithoutUpdatedByInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const CategoryUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => CategoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CategoryUpdateManyMutationInputSchema),z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const SubjectUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => SubjectWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SubjectUpdateWithoutCreatedByInputSchema),z.lazy(() => SubjectUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => SubjectCreateWithoutCreatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const SubjectUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => SubjectWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SubjectUpdateWithoutCreatedByInputSchema),z.lazy(() => SubjectUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const SubjectUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => SubjectScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SubjectUpdateManyMutationInputSchema),z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const SubjectScalarWhereInputSchema: z.ZodType<Prisma.SubjectScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubjectScalarWhereInputSchema),z.lazy(() => SubjectScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubjectScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubjectScalarWhereInputSchema),z.lazy(() => SubjectScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const SubjectUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => SubjectWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SubjectUpdateWithoutUpdatedByInputSchema),z.lazy(() => SubjectUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => SubjectCreateWithoutUpdatedByInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const SubjectUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => SubjectWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SubjectUpdateWithoutUpdatedByInputSchema),z.lazy(() => SubjectUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const SubjectUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => SubjectScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SubjectUpdateManyMutationInputSchema),z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const GradeUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => GradeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => GradeUpdateWithoutCreatedByInputSchema),z.lazy(() => GradeUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => GradeCreateWithoutCreatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const GradeUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => GradeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => GradeUpdateWithoutCreatedByInputSchema),z.lazy(() => GradeUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const GradeUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => GradeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => GradeUpdateManyMutationInputSchema),z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const GradeScalarWhereInputSchema: z.ZodType<Prisma.GradeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GradeScalarWhereInputSchema),z.lazy(() => GradeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GradeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GradeScalarWhereInputSchema),z.lazy(() => GradeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const GradeUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => GradeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => GradeUpdateWithoutUpdatedByInputSchema),z.lazy(() => GradeUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => GradeCreateWithoutUpdatedByInputSchema),z.lazy(() => GradeUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const GradeUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => GradeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => GradeUpdateWithoutUpdatedByInputSchema),z.lazy(() => GradeUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const GradeUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => GradeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => GradeUpdateManyMutationInputSchema),z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const SourceUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => SourceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SourceUpdateWithoutCreatedByInputSchema),z.lazy(() => SourceUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => SourceCreateWithoutCreatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const SourceUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => SourceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SourceUpdateWithoutCreatedByInputSchema),z.lazy(() => SourceUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const SourceUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => SourceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SourceUpdateManyMutationInputSchema),z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const SourceScalarWhereInputSchema: z.ZodType<Prisma.SourceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SourceScalarWhereInputSchema),z.lazy(() => SourceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SourceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SourceScalarWhereInputSchema),z.lazy(() => SourceScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  creatorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  updaterId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const SourceUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => SourceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SourceUpdateWithoutUpdatedByInputSchema),z.lazy(() => SourceUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => SourceCreateWithoutUpdatedByInputSchema),z.lazy(() => SourceUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const SourceUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => SourceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SourceUpdateWithoutUpdatedByInputSchema),z.lazy(() => SourceUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const SourceUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => SourceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SourceUpdateManyMutationInputSchema),z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const QuestionUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionUpdateWithoutCreatedByInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const QuestionUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateWithoutCreatedByInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const QuestionUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => QuestionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateManyMutationInputSchema),z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const QuestionScalarWhereInputSchema: z.ZodType<Prisma.QuestionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionScalarWhereInputSchema),z.lazy(() => QuestionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  difficulty: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  options: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  answer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  explanation: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  subjectId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  gradeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sourceId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const QuestionUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionUpdateWithoutUpdatedByInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const QuestionUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateWithoutUpdatedByInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const QuestionUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => QuestionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateManyMutationInputSchema),z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const TagCategoryUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TagCategoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagCategoryUpdateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const TagCategoryUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TagCategoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagCategoryUpdateWithoutCreatedByInputSchema),z.lazy(() => TagCategoryUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const TagCategoryUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TagCategoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagCategoryUpdateManyMutationInputSchema),z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const TagCategoryScalarWhereInputSchema: z.ZodType<Prisma.TagCategoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TagCategoryScalarWhereInputSchema),z.lazy(() => TagCategoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagCategoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagCategoryScalarWhereInputSchema),z.lazy(() => TagCategoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  allowMultiple: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const TagCategoryUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => TagCategoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagCategoryUpdateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const TagCategoryUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => TagCategoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagCategoryUpdateWithoutUpdatedByInputSchema),z.lazy(() => TagCategoryUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const TagCategoryUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => TagCategoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagCategoryUpdateManyMutationInputSchema),z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const TagUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.TagUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagUpdateWithoutCreatedByInputSchema),z.lazy(() => TagUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutCreatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const TagUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.TagUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagUpdateWithoutCreatedByInputSchema),z.lazy(() => TagUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const TagUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.TagUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagUpdateManyMutationInputSchema),z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const TagScalarWhereInputSchema: z.ZodType<Prisma.TagScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagScalarWhereInputSchema),z.lazy(() => TagScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sortOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  categoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const TagUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagUpdateWithoutUpdatedByInputSchema),z.lazy(() => TagUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutUpdatedByInputSchema),z.lazy(() => TagUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const TagUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagUpdateWithoutUpdatedByInputSchema),z.lazy(() => TagUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const TagUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => TagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagUpdateManyMutationInputSchema),z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const QuestionTagUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const QuestionTagUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionTagUpdateWithoutCreatedByInputSchema),z.lazy(() => QuestionTagUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const QuestionTagUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => QuestionTagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionTagUpdateManyMutationInputSchema),z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const QuestionTagScalarWhereInputSchema: z.ZodType<Prisma.QuestionTagScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QuestionTagScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QuestionTagScalarWhereInputSchema),z.lazy(() => QuestionTagScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  questionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  tagId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  updatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const QuestionTagUpsertWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagUpsertWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUncheckedUpdateWithoutUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutUpdatedByInputSchema) ]),
}).strict();

export const QuestionTagUpdateWithWhereUniqueWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagUpdateWithWhereUniqueWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionTagUpdateWithoutUpdatedByInputSchema),z.lazy(() => QuestionTagUncheckedUpdateWithoutUpdatedByInputSchema) ]),
}).strict();

export const QuestionTagUpdateManyWithWhereWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyWithWhereWithoutUpdatedByInput> = z.object({
  where: z.lazy(() => QuestionTagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionTagUpdateManyMutationInputSchema),z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByInputSchema) ]),
}).strict();

export const SystemLogUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SystemLogUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SystemLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SystemLogUpdateWithoutUserInputSchema),z.lazy(() => SystemLogUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SystemLogCreateWithoutUserInputSchema),z.lazy(() => SystemLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SystemLogUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SystemLogUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SystemLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SystemLogUpdateWithoutUserInputSchema),z.lazy(() => SystemLogUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SystemLogUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SystemLogUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SystemLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SystemLogUpdateManyMutationInputSchema),z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SystemLogScalarWhereInputSchema: z.ZodType<Prisma.SystemLogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SystemLogScalarWhereInputSchema),z.lazy(() => SystemLogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SystemLogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SystemLogScalarWhereInputSchema),z.lazy(() => SystemLogScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  module: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  targetId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  details: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  level: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ip: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RolePermissionCreateWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionCreateWithoutRoleInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permission: z.lazy(() => PermissionCreateNestedOneWithoutRolesInputSchema)
}).strict();

export const RolePermissionUncheckedCreateWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateWithoutRoleInput> = z.object({
  id: z.number().int().optional(),
  permissionId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RolePermissionCreateOrConnectWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionCreateOrConnectWithoutRoleInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const RolePermissionCreateManyRoleInputEnvelopeSchema: z.ZodType<Prisma.RolePermissionCreateManyRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RolePermissionCreateManyRoleInputSchema),z.lazy(() => RolePermissionCreateManyRoleInputSchema).array() ]),
}).strict();

export const UserRoleCreateWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleCreateWithoutRoleInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutRolesInputSchema)
}).strict();

export const UserRoleUncheckedCreateWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUncheckedCreateWithoutRoleInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleCreateOrConnectWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleCreateOrConnectWithoutRoleInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const UserRoleCreateManyRoleInputEnvelopeSchema: z.ZodType<Prisma.UserRoleCreateManyRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserRoleCreateManyRoleInputSchema),z.lazy(() => UserRoleCreateManyRoleInputSchema).array() ]),
}).strict();

export const UserCreateWithoutCreatedRolesInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedRolesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedRolesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedRolesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedRolesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedRolesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedRolesInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedRolesInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedRolesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedRolesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedRolesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedRolesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedRolesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedRolesInputSchema) ]),
}).strict();

export const RolePermissionUpsertWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUpsertWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutRoleInputSchema) ]),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const RolePermissionUpdateWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateWithoutRoleInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutRoleInputSchema) ]),
}).strict();

export const RolePermissionUpdateManyWithWhereWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithWhereWithoutRoleInput> = z.object({
  where: z.lazy(() => RolePermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateManyMutationInputSchema),z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleInputSchema) ]),
}).strict();

export const RolePermissionScalarWhereInputSchema: z.ZodType<Prisma.RolePermissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolePermissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolePermissionScalarWhereInputSchema),z.lazy(() => RolePermissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  roleId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  permissionId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserRoleUpsertWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUpsertWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserRoleUpdateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutRoleInputSchema) ]),
  create: z.union([ z.lazy(() => UserRoleCreateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const UserRoleUpdateWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUpdateWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => UserRoleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateWithoutRoleInputSchema),z.lazy(() => UserRoleUncheckedUpdateWithoutRoleInputSchema) ]),
}).strict();

export const UserRoleUpdateManyWithWhereWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUpdateManyWithWhereWithoutRoleInput> = z.object({
  where: z.lazy(() => UserRoleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserRoleUpdateManyMutationInputSchema),z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleInputSchema) ]),
}).strict();

export const UserUpsertWithoutCreatedRolesInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedRolesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedRolesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedRolesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedRolesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedRolesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedRolesInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedRolesInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedRolesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedRolesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedRolesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedRolesInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedRolesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedRolesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedRolesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedRolesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedRolesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedRolesInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedRolesInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedRolesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedRolesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedRolesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const RolePermissionCreateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateWithoutPermissionInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  role: z.lazy(() => RoleCreateNestedOneWithoutPermissionsInputSchema)
}).strict();

export const RolePermissionUncheckedCreateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedCreateWithoutPermissionInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RolePermissionCreateOrConnectWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateOrConnectWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionCreateManyPermissionInputEnvelopeSchema: z.ZodType<Prisma.RolePermissionCreateManyPermissionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RolePermissionCreateManyPermissionInputSchema),z.lazy(() => RolePermissionCreateManyPermissionInputSchema).array() ]),
}).strict();

export const UserCreateWithoutCreatedPermissionsInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedPermissionsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedPermissionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedPermissionsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedPermissionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedPermissionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedPermissionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedPermissionsInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedPermissionsInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedPermissionsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedPermissionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedPermissionsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedPermissionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedPermissionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedPermissionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedPermissionsInputSchema) ]),
}).strict();

export const RolePermissionUpsertWithWhereUniqueWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpsertWithWhereUniqueWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RolePermissionUpdateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutPermissionInputSchema) ]),
  create: z.union([ z.lazy(() => RolePermissionCreateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedCreateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionUpdateWithWhereUniqueWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithWhereUniqueWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateWithoutPermissionInputSchema),z.lazy(() => RolePermissionUncheckedUpdateWithoutPermissionInputSchema) ]),
}).strict();

export const RolePermissionUpdateManyWithWhereWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateManyWithWhereWithoutPermissionInput> = z.object({
  where: z.lazy(() => RolePermissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RolePermissionUpdateManyMutationInputSchema),z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionInputSchema) ]),
}).strict();

export const UserUpsertWithoutCreatedPermissionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedPermissionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedPermissionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedPermissionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedPermissionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedPermissionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedPermissionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedPermissionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedPermissionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedPermissionsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedPermissionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedPermissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedPermissionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedPermissionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedPermissionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedPermissionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedPermissionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedPermissionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedPermissionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedPermissionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedPermissionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedPermissionsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedPermissionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedPermissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutRolesInputSchema: z.ZodType<Prisma.UserCreateWithoutRolesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRolesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const RoleCreateWithoutUsersInputSchema: z.ZodType<Prisma.RoleCreateWithoutUsersInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  permissions: z.lazy(() => RolePermissionCreateNestedManyWithoutRoleInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedRolesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedRolesInputSchema)
}).strict();

export const RoleUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutUsersInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
  permissions: z.lazy(() => RolePermissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutUsersInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const UserUpsertWithoutRolesInputSchema: z.ZodType<Prisma.UserUpsertWithoutRolesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRolesInputSchema),z.lazy(() => UserUncheckedCreateWithoutRolesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutRolesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const UserUpdateWithoutRolesInputSchema: z.ZodType<Prisma.UserUpdateWithoutRolesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRolesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const RoleUpsertWithoutUsersInputSchema: z.ZodType<Prisma.RoleUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => RoleUpdateWithoutUsersInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutUsersInputSchema),z.lazy(() => RoleUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const RoleUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.RoleUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => RoleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RoleUpdateWithoutUsersInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const RoleUpdateWithoutUsersInputSchema: z.ZodType<Prisma.RoleUpdateWithoutUsersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedRolesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedRolesNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.RoleCreateWithoutPermissionsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserRoleCreateNestedManyWithoutRoleInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedRolesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedRolesInputSchema)
}).strict();

export const RoleUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.RoleUncheckedCreateWithoutPermissionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int(),
  users: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const RoleCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.RoleCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => RoleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RoleCreateWithoutPermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const PermissionCreateWithoutRolesInputSchema: z.ZodType<Prisma.PermissionCreateWithoutRolesInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedPermissionsInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedPermissionsInputSchema)
}).strict();

export const PermissionUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.PermissionUncheckedCreateWithoutRolesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const PermissionCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.PermissionCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => PermissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolesInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const RoleUpsertWithoutPermissionsInputSchema: z.ZodType<Prisma.RoleUpsertWithoutPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => RoleUpdateWithoutPermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => RoleCreateWithoutPermissionsInputSchema),z.lazy(() => RoleUncheckedCreateWithoutPermissionsInputSchema) ]),
  where: z.lazy(() => RoleWhereInputSchema).optional()
}).strict();

export const RoleUpdateToOneWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.RoleUpdateToOneWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => RoleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RoleUpdateWithoutPermissionsInputSchema),z.lazy(() => RoleUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const RoleUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.RoleUpdateWithoutPermissionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedRolesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedRolesNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutPermissionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const PermissionUpsertWithoutRolesInputSchema: z.ZodType<Prisma.PermissionUpsertWithoutRolesInput> = z.object({
  update: z.union([ z.lazy(() => PermissionUpdateWithoutRolesInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionCreateWithoutRolesInputSchema),z.lazy(() => PermissionUncheckedCreateWithoutRolesInputSchema) ]),
  where: z.lazy(() => PermissionWhereInputSchema).optional()
}).strict();

export const PermissionUpdateToOneWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.PermissionUpdateToOneWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => PermissionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PermissionUpdateWithoutRolesInputSchema),z.lazy(() => PermissionUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const PermissionUpdateWithoutRolesInputSchema: z.ZodType<Prisma.PermissionUpdateWithoutRolesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedPermissionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateWithoutRolesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionCreateWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionCreateWithoutCategoryInput> = z.object({
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  subject: z.lazy(() => SubjectCreateNestedOneWithoutQuestionsInputSchema),
  grade: z.lazy(() => GradeCreateNestedOneWithoutQuestionsInputSchema),
  source: z.lazy(() => SourceCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionsInputSchema).optional(),
  tags: z.lazy(() => QuestionTagCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionCreateWithoutCategoryInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const QuestionCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.QuestionCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionCreateManyCategoryInputSchema),z.lazy(() => QuestionCreateManyCategoryInputSchema).array() ]),
}).strict();

export const UserCreateWithoutCreatedCategoriesInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedCategoriesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedCategoriesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedCategoriesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedCategoriesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedCategoriesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedCategoriesInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedCategoriesInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedCategoriesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedCategoriesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedCategoriesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedCategoriesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedCategoriesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedCategoriesInputSchema) ]),
}).strict();

export const QuestionUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionUpdateWithoutCategoryInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionCreateWithoutCategoryInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const QuestionUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateWithoutCategoryInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const QuestionUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => QuestionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateManyMutationInputSchema),z.lazy(() => QuestionUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const UserUpsertWithoutCreatedCategoriesInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedCategoriesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedCategoriesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedCategoriesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedCategoriesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedCategoriesInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedCategoriesInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedCategoriesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedCategoriesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedCategoriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedCategoriesInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedCategoriesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedCategoriesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedCategoriesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedCategoriesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedCategoriesInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedCategoriesInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedCategoriesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedCategoriesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedCategoriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const QuestionCreateWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionCreateWithoutSubjectInput> = z.object({
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutQuestionsInputSchema),
  grade: z.lazy(() => GradeCreateNestedOneWithoutQuestionsInputSchema),
  source: z.lazy(() => SourceCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionsInputSchema).optional(),
  tags: z.lazy(() => QuestionTagCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateWithoutSubjectInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionCreateOrConnectWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionCreateOrConnectWithoutSubjectInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionCreateWithoutSubjectInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema) ]),
}).strict();

export const QuestionCreateManySubjectInputEnvelopeSchema: z.ZodType<Prisma.QuestionCreateManySubjectInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionCreateManySubjectInputSchema),z.lazy(() => QuestionCreateManySubjectInputSchema).array() ]),
}).strict();

export const UserCreateWithoutCreatedSubjectsInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedSubjectsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedSubjectsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedSubjectsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedSubjectsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedSubjectsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedSubjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedSubjectsInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedSubjectsInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedSubjectsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedSubjectsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedSubjectsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedSubjectsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedSubjectsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedSubjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedSubjectsInputSchema) ]),
}).strict();

export const QuestionUpsertWithWhereUniqueWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionUpsertWithWhereUniqueWithoutSubjectInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionUpdateWithoutSubjectInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutSubjectInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionCreateWithoutSubjectInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSubjectInputSchema) ]),
}).strict();

export const QuestionUpdateWithWhereUniqueWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionUpdateWithWhereUniqueWithoutSubjectInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateWithoutSubjectInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutSubjectInputSchema) ]),
}).strict();

export const QuestionUpdateManyWithWhereWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithWhereWithoutSubjectInput> = z.object({
  where: z.lazy(() => QuestionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateManyMutationInputSchema),z.lazy(() => QuestionUncheckedUpdateManyWithoutSubjectInputSchema) ]),
}).strict();

export const UserUpsertWithoutCreatedSubjectsInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedSubjectsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedSubjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedSubjectsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedSubjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedSubjectsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedSubjectsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedSubjectsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedSubjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedSubjectsInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedSubjectsInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedSubjectsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedSubjectsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedSubjectsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedSubjectsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedSubjectsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedSubjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedSubjectsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedSubjectsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedSubjectsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedSubjectsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedSubjectsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedSubjectsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedSubjectsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedSubjectsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedSubjectsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedSubjectsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedSubjectsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const QuestionCreateWithoutGradeInputSchema: z.ZodType<Prisma.QuestionCreateWithoutGradeInput> = z.object({
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutQuestionsInputSchema),
  subject: z.lazy(() => SubjectCreateNestedOneWithoutQuestionsInputSchema),
  source: z.lazy(() => SourceCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionsInputSchema).optional(),
  tags: z.lazy(() => QuestionTagCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateWithoutGradeInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateWithoutGradeInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionCreateOrConnectWithoutGradeInputSchema: z.ZodType<Prisma.QuestionCreateOrConnectWithoutGradeInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionCreateWithoutGradeInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema) ]),
}).strict();

export const QuestionCreateManyGradeInputEnvelopeSchema: z.ZodType<Prisma.QuestionCreateManyGradeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionCreateManyGradeInputSchema),z.lazy(() => QuestionCreateManyGradeInputSchema).array() ]),
}).strict();

export const UserCreateWithoutCreatedGradesInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedGradesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedGradesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedGradesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedGradesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedGradesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedGradesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedGradesInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedGradesInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedGradesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedGradesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedGradesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedGradesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedGradesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedGradesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedGradesInputSchema) ]),
}).strict();

export const QuestionUpsertWithWhereUniqueWithoutGradeInputSchema: z.ZodType<Prisma.QuestionUpsertWithWhereUniqueWithoutGradeInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionUpdateWithoutGradeInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutGradeInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionCreateWithoutGradeInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutGradeInputSchema) ]),
}).strict();

export const QuestionUpdateWithWhereUniqueWithoutGradeInputSchema: z.ZodType<Prisma.QuestionUpdateWithWhereUniqueWithoutGradeInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateWithoutGradeInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutGradeInputSchema) ]),
}).strict();

export const QuestionUpdateManyWithWhereWithoutGradeInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithWhereWithoutGradeInput> = z.object({
  where: z.lazy(() => QuestionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateManyMutationInputSchema),z.lazy(() => QuestionUncheckedUpdateManyWithoutGradeInputSchema) ]),
}).strict();

export const UserUpsertWithoutCreatedGradesInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedGradesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedGradesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedGradesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedGradesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedGradesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedGradesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedGradesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedGradesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedGradesInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedGradesInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedGradesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedGradesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedGradesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedGradesInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedGradesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedGradesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedGradesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedGradesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedGradesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedGradesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedGradesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedGradesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedGradesInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedGradesInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedGradesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedGradesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedGradesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const QuestionCreateWithoutSourceInputSchema: z.ZodType<Prisma.QuestionCreateWithoutSourceInput> = z.object({
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutQuestionsInputSchema),
  subject: z.lazy(() => SubjectCreateNestedOneWithoutQuestionsInputSchema),
  grade: z.lazy(() => GradeCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionsInputSchema).optional(),
  tags: z.lazy(() => QuestionTagCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateWithoutSourceInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateWithoutSourceInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutQuestionInputSchema).optional()
}).strict();

export const QuestionCreateOrConnectWithoutSourceInputSchema: z.ZodType<Prisma.QuestionCreateOrConnectWithoutSourceInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionCreateWithoutSourceInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema) ]),
}).strict();

export const QuestionCreateManySourceInputEnvelopeSchema: z.ZodType<Prisma.QuestionCreateManySourceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionCreateManySourceInputSchema),z.lazy(() => QuestionCreateManySourceInputSchema).array() ]),
}).strict();

export const UserCreateWithoutCreatedSourcesInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedSourcesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedSourcesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedSourcesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedSourcesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedSourcesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedSourcesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedSourcesInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedSourcesInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedSourcesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedSourcesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedSourcesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedSourcesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedSourcesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedSourcesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedSourcesInputSchema) ]),
}).strict();

export const QuestionUpsertWithWhereUniqueWithoutSourceInputSchema: z.ZodType<Prisma.QuestionUpsertWithWhereUniqueWithoutSourceInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionUpdateWithoutSourceInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutSourceInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionCreateWithoutSourceInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutSourceInputSchema) ]),
}).strict();

export const QuestionUpdateWithWhereUniqueWithoutSourceInputSchema: z.ZodType<Prisma.QuestionUpdateWithWhereUniqueWithoutSourceInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateWithoutSourceInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutSourceInputSchema) ]),
}).strict();

export const QuestionUpdateManyWithWhereWithoutSourceInputSchema: z.ZodType<Prisma.QuestionUpdateManyWithWhereWithoutSourceInput> = z.object({
  where: z.lazy(() => QuestionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionUpdateManyMutationInputSchema),z.lazy(() => QuestionUncheckedUpdateManyWithoutSourceInputSchema) ]),
}).strict();

export const UserUpsertWithoutCreatedSourcesInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedSourcesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedSourcesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedSourcesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedSourcesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedSourcesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedSourcesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedSourcesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedSourcesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedSourcesInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedSourcesInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedSourcesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedSourcesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedSourcesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedSourcesInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedSourcesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedSourcesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedSourcesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedSourcesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedSourcesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedSourcesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedSourcesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedSourcesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedSourcesInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedSourcesInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedSourcesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedSourcesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedSourcesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TagCreateWithoutCategoryInputSchema: z.ZodType<Prisma.TagCreateWithoutCategoryInput> = z.object({
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  parent: z.lazy(() => TagCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => TagCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagCreateNestedManyWithoutTagInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  children: z.lazy(() => TagUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const TagCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutCategoryInputSchema),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const TagCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.TagCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCreateManyCategoryInputSchema),z.lazy(() => TagCreateManyCategoryInputSchema).array() ]),
}).strict();

export const UserCreateWithoutCreatedTagCategoriesInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedTagCategoriesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedTagCategoriesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedTagCategoriesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedTagCategoriesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedTagCategoriesInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedTagCategoriesInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedTagCategoriesInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedTagCategoriesInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedTagCategoriesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedTagCategoriesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedTagCategoriesInputSchema) ]),
}).strict();

export const TagUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.TagUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagUpdateWithoutCategoryInputSchema),z.lazy(() => TagUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutCategoryInputSchema),z.lazy(() => TagUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const TagUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.TagUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagUpdateWithoutCategoryInputSchema),z.lazy(() => TagUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const TagUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.TagUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => TagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagUpdateManyMutationInputSchema),z.lazy(() => TagUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const UserUpsertWithoutCreatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedTagCategoriesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedTagCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedTagCategoriesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedTagCategoriesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedTagCategoriesInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedTagCategoriesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedTagCategoriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedTagCategoriesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedTagCategoriesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedTagCategoriesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedTagCategoriesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedTagCategoriesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedTagCategoriesInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedTagCategoriesInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedTagCategoriesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedTagCategoriesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TagCategoryCreateWithoutTagsInputSchema: z.ZodType<Prisma.TagCategoryCreateWithoutTagsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagCategoriesInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagCategoriesInputSchema).optional()
}).strict();

export const TagCategoryUncheckedCreateWithoutTagsInputSchema: z.ZodType<Prisma.TagCategoryUncheckedCreateWithoutTagsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const TagCategoryCreateOrConnectWithoutTagsInputSchema: z.ZodType<Prisma.TagCategoryCreateOrConnectWithoutTagsInput> = z.object({
  where: z.lazy(() => TagCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutTagsInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutTagsInputSchema) ]),
}).strict();

export const TagCreateWithoutChildrenInputSchema: z.ZodType<Prisma.TagCreateWithoutChildrenInput> = z.object({
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => TagCategoryCreateNestedOneWithoutTagsInputSchema),
  parent: z.lazy(() => TagCreateNestedOneWithoutChildrenInputSchema).optional(),
  questions: z.lazy(() => QuestionTagCreateNestedManyWithoutTagInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutChildrenInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutChildrenInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  questions: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const TagCreateOrConnectWithoutChildrenInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutChildrenInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutChildrenInputSchema),z.lazy(() => TagUncheckedCreateWithoutChildrenInputSchema) ]),
}).strict();

export const TagCreateWithoutParentInputSchema: z.ZodType<Prisma.TagCreateWithoutParentInput> = z.object({
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => TagCategoryCreateNestedOneWithoutTagsInputSchema),
  children: z.lazy(() => TagCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagCreateNestedManyWithoutTagInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutParentInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutParentInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  children: z.lazy(() => TagUncheckedCreateNestedManyWithoutParentInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutTagInputSchema).optional()
}).strict();

export const TagCreateOrConnectWithoutParentInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutParentInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutParentInputSchema),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const TagCreateManyParentInputEnvelopeSchema: z.ZodType<Prisma.TagCreateManyParentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TagCreateManyParentInputSchema),z.lazy(() => TagCreateManyParentInputSchema).array() ]),
}).strict();

export const QuestionTagCreateWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagCreateWithoutTagInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  question: z.lazy(() => QuestionCreateNestedOneWithoutTagsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionTagsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionTagsInputSchema).optional()
}).strict();

export const QuestionTagUncheckedCreateWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateWithoutTagInput> = z.object({
  id: z.number().int().optional(),
  questionId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagCreateOrConnectWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagCreateOrConnectWithoutTagInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutTagInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema) ]),
}).strict();

export const QuestionTagCreateManyTagInputEnvelopeSchema: z.ZodType<Prisma.QuestionTagCreateManyTagInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionTagCreateManyTagInputSchema),z.lazy(() => QuestionTagCreateManyTagInputSchema).array() ]),
}).strict();

export const UserCreateWithoutCreatedTagsInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedTagsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedTagsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedTagsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedTagsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedTagsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedTagsInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedTagsInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedTagsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedTagsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedTagsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedTagsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedTagsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedTagsInputSchema) ]),
}).strict();

export const TagCategoryUpsertWithoutTagsInputSchema: z.ZodType<Prisma.TagCategoryUpsertWithoutTagsInput> = z.object({
  update: z.union([ z.lazy(() => TagCategoryUpdateWithoutTagsInputSchema),z.lazy(() => TagCategoryUncheckedUpdateWithoutTagsInputSchema) ]),
  create: z.union([ z.lazy(() => TagCategoryCreateWithoutTagsInputSchema),z.lazy(() => TagCategoryUncheckedCreateWithoutTagsInputSchema) ]),
  where: z.lazy(() => TagCategoryWhereInputSchema).optional()
}).strict();

export const TagCategoryUpdateToOneWithWhereWithoutTagsInputSchema: z.ZodType<Prisma.TagCategoryUpdateToOneWithWhereWithoutTagsInput> = z.object({
  where: z.lazy(() => TagCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TagCategoryUpdateWithoutTagsInputSchema),z.lazy(() => TagCategoryUncheckedUpdateWithoutTagsInputSchema) ]),
}).strict();

export const TagCategoryUpdateWithoutTagsInputSchema: z.ZodType<Prisma.TagCategoryUpdateWithoutTagsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagCategoriesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagCategoriesNestedInputSchema).optional()
}).strict();

export const TagCategoryUncheckedUpdateWithoutTagsInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagUpsertWithoutChildrenInputSchema: z.ZodType<Prisma.TagUpsertWithoutChildrenInput> = z.object({
  update: z.union([ z.lazy(() => TagUpdateWithoutChildrenInputSchema),z.lazy(() => TagUncheckedUpdateWithoutChildrenInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutChildrenInputSchema),z.lazy(() => TagUncheckedCreateWithoutChildrenInputSchema) ]),
  where: z.lazy(() => TagWhereInputSchema).optional()
}).strict();

export const TagUpdateToOneWithWhereWithoutChildrenInputSchema: z.ZodType<Prisma.TagUpdateToOneWithWhereWithoutChildrenInput> = z.object({
  where: z.lazy(() => TagWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TagUpdateWithoutChildrenInputSchema),z.lazy(() => TagUncheckedUpdateWithoutChildrenInputSchema) ]),
}).strict();

export const TagUpdateWithoutChildrenInputSchema: z.ZodType<Prisma.TagUpdateWithoutChildrenInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => TagCategoryUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  parent: z.lazy(() => TagUpdateOneWithoutChildrenNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUpdateManyWithoutTagNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutChildrenInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutChildrenInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  questions: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const TagUpsertWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.TagUpsertWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TagUpdateWithoutParentInputSchema),z.lazy(() => TagUncheckedUpdateWithoutParentInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutParentInputSchema),z.lazy(() => TagUncheckedCreateWithoutParentInputSchema) ]),
}).strict();

export const TagUpdateWithWhereUniqueWithoutParentInputSchema: z.ZodType<Prisma.TagUpdateWithWhereUniqueWithoutParentInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TagUpdateWithoutParentInputSchema),z.lazy(() => TagUncheckedUpdateWithoutParentInputSchema) ]),
}).strict();

export const TagUpdateManyWithWhereWithoutParentInputSchema: z.ZodType<Prisma.TagUpdateManyWithWhereWithoutParentInput> = z.object({
  where: z.lazy(() => TagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TagUpdateManyMutationInputSchema),z.lazy(() => TagUncheckedUpdateManyWithoutParentInputSchema) ]),
}).strict();

export const QuestionTagUpsertWithWhereUniqueWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagUpsertWithWhereUniqueWithoutTagInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithoutTagInputSchema),z.lazy(() => QuestionTagUncheckedUpdateWithoutTagInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutTagInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutTagInputSchema) ]),
}).strict();

export const QuestionTagUpdateWithWhereUniqueWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagUpdateWithWhereUniqueWithoutTagInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionTagUpdateWithoutTagInputSchema),z.lazy(() => QuestionTagUncheckedUpdateWithoutTagInputSchema) ]),
}).strict();

export const QuestionTagUpdateManyWithWhereWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyWithWhereWithoutTagInput> = z.object({
  where: z.lazy(() => QuestionTagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionTagUpdateManyMutationInputSchema),z.lazy(() => QuestionTagUncheckedUpdateManyWithoutTagInputSchema) ]),
}).strict();

export const UserUpsertWithoutCreatedTagsInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedTagsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedTagsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedTagsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedTagsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedTagsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedTagsInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedTagsInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedTagsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedTagsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedTagsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedTagsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedTagsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedTagsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedTagsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedTagsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedTagsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedTagsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedTagsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedTagsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedTagsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedTagsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const QuestionCreateWithoutTagsInputSchema: z.ZodType<Prisma.QuestionCreateWithoutTagsInput> = z.object({
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => CategoryCreateNestedOneWithoutQuestionsInputSchema),
  subject: z.lazy(() => SubjectCreateNestedOneWithoutQuestionsInputSchema),
  grade: z.lazy(() => GradeCreateNestedOneWithoutQuestionsInputSchema),
  source: z.lazy(() => SourceCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionsInputSchema).optional()
}).strict();

export const QuestionUncheckedCreateWithoutTagsInputSchema: z.ZodType<Prisma.QuestionUncheckedCreateWithoutTagsInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionCreateOrConnectWithoutTagsInputSchema: z.ZodType<Prisma.QuestionCreateOrConnectWithoutTagsInput> = z.object({
  where: z.lazy(() => QuestionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionCreateWithoutTagsInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutTagsInputSchema) ]),
}).strict();

export const TagCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.TagCreateWithoutQuestionsInput> = z.object({
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  category: z.lazy(() => TagCategoryCreateNestedOneWithoutTagsInputSchema),
  parent: z.lazy(() => TagCreateNestedOneWithoutChildrenInputSchema).optional(),
  children: z.lazy(() => TagCreateNestedManyWithoutParentInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedTagsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedTagsInputSchema).optional()
}).strict();

export const TagUncheckedCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.TagUncheckedCreateWithoutQuestionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable(),
  children: z.lazy(() => TagUncheckedCreateNestedManyWithoutParentInputSchema).optional()
}).strict();

export const TagCreateOrConnectWithoutQuestionsInputSchema: z.ZodType<Prisma.TagCreateOrConnectWithoutQuestionsInput> = z.object({
  where: z.lazy(() => TagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TagCreateWithoutQuestionsInputSchema),z.lazy(() => TagUncheckedCreateWithoutQuestionsInputSchema) ]),
}).strict();

export const UserCreateWithoutCreatedQuestionTagsInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedQuestionTagsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedQuestionTagsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedQuestionTagsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedQuestionTagsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedQuestionTagsInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedQuestionTagsInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedQuestionTagsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedQuestionTagsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedQuestionTagsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedQuestionTagsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedQuestionTagsInputSchema) ]),
}).strict();

export const QuestionUpsertWithoutTagsInputSchema: z.ZodType<Prisma.QuestionUpsertWithoutTagsInput> = z.object({
  update: z.union([ z.lazy(() => QuestionUpdateWithoutTagsInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutTagsInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionCreateWithoutTagsInputSchema),z.lazy(() => QuestionUncheckedCreateWithoutTagsInputSchema) ]),
  where: z.lazy(() => QuestionWhereInputSchema).optional()
}).strict();

export const QuestionUpdateToOneWithWhereWithoutTagsInputSchema: z.ZodType<Prisma.QuestionUpdateToOneWithWhereWithoutTagsInput> = z.object({
  where: z.lazy(() => QuestionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => QuestionUpdateWithoutTagsInputSchema),z.lazy(() => QuestionUncheckedUpdateWithoutTagsInputSchema) ]),
}).strict();

export const QuestionUpdateWithoutTagsInputSchema: z.ZodType<Prisma.QuestionUpdateWithoutTagsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  subject: z.lazy(() => SubjectUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  grade: z.lazy(() => GradeUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  source: z.lazy(() => SourceUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionsNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateWithoutTagsInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagUpsertWithoutQuestionsInputSchema: z.ZodType<Prisma.TagUpsertWithoutQuestionsInput> = z.object({
  update: z.union([ z.lazy(() => TagUpdateWithoutQuestionsInputSchema),z.lazy(() => TagUncheckedUpdateWithoutQuestionsInputSchema) ]),
  create: z.union([ z.lazy(() => TagCreateWithoutQuestionsInputSchema),z.lazy(() => TagUncheckedCreateWithoutQuestionsInputSchema) ]),
  where: z.lazy(() => TagWhereInputSchema).optional()
}).strict();

export const TagUpdateToOneWithWhereWithoutQuestionsInputSchema: z.ZodType<Prisma.TagUpdateToOneWithWhereWithoutQuestionsInput> = z.object({
  where: z.lazy(() => TagWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TagUpdateWithoutQuestionsInputSchema),z.lazy(() => TagUncheckedUpdateWithoutQuestionsInputSchema) ]),
}).strict();

export const TagUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.TagUpdateWithoutQuestionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => TagCategoryUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  parent: z.lazy(() => TagUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => TagUpdateManyWithoutParentNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutQuestionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  children: z.lazy(() => TagUncheckedUpdateManyWithoutParentNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutCreatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedQuestionTagsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedQuestionTagsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedQuestionTagsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedQuestionTagsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedQuestionTagsInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedQuestionTagsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedQuestionTagsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedQuestionTagsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedQuestionTagsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedQuestionTagsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedQuestionTagsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedQuestionTagsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedQuestionTagsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedQuestionTagsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedQuestionTagsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedQuestionTagsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutSystemLogsInputSchema: z.ZodType<Prisma.UserCreateWithoutSystemLogsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSystemLogsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSystemLogsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSystemLogsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSystemLogsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSystemLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSystemLogsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSystemLogsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSystemLogsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSystemLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSystemLogsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSystemLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSystemLogsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSystemLogsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSystemLogsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSystemLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSystemLogsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSystemLogsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSystemLogsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSystemLogsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSystemLogsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional()
}).strict();

export const CategoryCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.CategoryCreateWithoutQuestionsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedCategoriesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedCategoriesInputSchema)
}).strict();

export const CategoryUncheckedCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateWithoutQuestionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const CategoryCreateOrConnectWithoutQuestionsInputSchema: z.ZodType<Prisma.CategoryCreateOrConnectWithoutQuestionsInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CategoryCreateWithoutQuestionsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutQuestionsInputSchema) ]),
}).strict();

export const SubjectCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.SubjectCreateWithoutQuestionsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedSubjectsInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedSubjectsInputSchema)
}).strict();

export const SubjectUncheckedCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.SubjectUncheckedCreateWithoutQuestionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const SubjectCreateOrConnectWithoutQuestionsInputSchema: z.ZodType<Prisma.SubjectCreateOrConnectWithoutQuestionsInput> = z.object({
  where: z.lazy(() => SubjectWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubjectCreateWithoutQuestionsInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutQuestionsInputSchema) ]),
}).strict();

export const GradeCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.GradeCreateWithoutQuestionsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedGradesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedGradesInputSchema)
}).strict();

export const GradeUncheckedCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.GradeUncheckedCreateWithoutQuestionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const GradeCreateOrConnectWithoutQuestionsInputSchema: z.ZodType<Prisma.GradeCreateOrConnectWithoutQuestionsInput> = z.object({
  where: z.lazy(() => GradeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GradeCreateWithoutQuestionsInputSchema),z.lazy(() => GradeUncheckedCreateWithoutQuestionsInputSchema) ]),
}).strict();

export const SourceCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.SourceCreateWithoutQuestionsInput> = z.object({
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedSourcesInputSchema),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedSourcesInputSchema)
}).strict();

export const SourceUncheckedCreateWithoutQuestionsInputSchema: z.ZodType<Prisma.SourceUncheckedCreateWithoutQuestionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int(),
  updaterId: z.number().int()
}).strict();

export const SourceCreateOrConnectWithoutQuestionsInputSchema: z.ZodType<Prisma.SourceCreateOrConnectWithoutQuestionsInput> = z.object({
  where: z.lazy(() => SourceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SourceCreateWithoutQuestionsInputSchema),z.lazy(() => SourceUncheckedCreateWithoutQuestionsInputSchema) ]),
}).strict();

export const UserCreateWithoutCreatedQuestionsInputSchema: z.ZodType<Prisma.UserCreateWithoutCreatedQuestionsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCreatedQuestionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCreatedQuestionsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCreatedQuestionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCreatedQuestionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedQuestionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedQuestionsInputSchema) ]),
}).strict();

export const UserCreateWithoutUpdatedQuestionsInputSchema: z.ZodType<Prisma.UserCreateWithoutUpdatedQuestionsInput> = z.object({
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUpdatedQuestionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUpdatedQuestionsInput> = z.object({
  id: z.number().int().optional(),
  username: z.string(),
  email: z.string(),
  password: z.string(),
  name: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  roles: z.lazy(() => UserRoleUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedCreateNestedManyWithoutUpdatedByInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUpdatedQuestionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUpdatedQuestionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedQuestionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedQuestionsInputSchema) ]),
}).strict();

export const QuestionTagCreateWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagCreateWithoutQuestionInput> = z.object({
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tag: z.lazy(() => TagCreateNestedOneWithoutQuestionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutCreatedQuestionTagsInputSchema).optional(),
  updatedBy: z.lazy(() => UserCreateNestedOneWithoutUpdatedQuestionTagsInputSchema).optional()
}).strict();

export const QuestionTagUncheckedCreateWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagUncheckedCreateWithoutQuestionInput> = z.object({
  id: z.number().int().optional(),
  tagId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagCreateOrConnectWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagCreateOrConnectWithoutQuestionInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema) ]),
}).strict();

export const QuestionTagCreateManyQuestionInputEnvelopeSchema: z.ZodType<Prisma.QuestionTagCreateManyQuestionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QuestionTagCreateManyQuestionInputSchema),z.lazy(() => QuestionTagCreateManyQuestionInputSchema).array() ]),
}).strict();

export const CategoryUpsertWithoutQuestionsInputSchema: z.ZodType<Prisma.CategoryUpsertWithoutQuestionsInput> = z.object({
  update: z.union([ z.lazy(() => CategoryUpdateWithoutQuestionsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutQuestionsInputSchema) ]),
  create: z.union([ z.lazy(() => CategoryCreateWithoutQuestionsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutQuestionsInputSchema) ]),
  where: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const CategoryUpdateToOneWithWhereWithoutQuestionsInputSchema: z.ZodType<Prisma.CategoryUpdateToOneWithWhereWithoutQuestionsInput> = z.object({
  where: z.lazy(() => CategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CategoryUpdateWithoutQuestionsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutQuestionsInputSchema) ]),
}).strict();

export const CategoryUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.CategoryUpdateWithoutQuestionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedCategoriesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedCategoriesNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateWithoutQuestionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubjectUpsertWithoutQuestionsInputSchema: z.ZodType<Prisma.SubjectUpsertWithoutQuestionsInput> = z.object({
  update: z.union([ z.lazy(() => SubjectUpdateWithoutQuestionsInputSchema),z.lazy(() => SubjectUncheckedUpdateWithoutQuestionsInputSchema) ]),
  create: z.union([ z.lazy(() => SubjectCreateWithoutQuestionsInputSchema),z.lazy(() => SubjectUncheckedCreateWithoutQuestionsInputSchema) ]),
  where: z.lazy(() => SubjectWhereInputSchema).optional()
}).strict();

export const SubjectUpdateToOneWithWhereWithoutQuestionsInputSchema: z.ZodType<Prisma.SubjectUpdateToOneWithWhereWithoutQuestionsInput> = z.object({
  where: z.lazy(() => SubjectWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SubjectUpdateWithoutQuestionsInputSchema),z.lazy(() => SubjectUncheckedUpdateWithoutQuestionsInputSchema) ]),
}).strict();

export const SubjectUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.SubjectUpdateWithoutQuestionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedSubjectsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedSubjectsNestedInputSchema).optional()
}).strict();

export const SubjectUncheckedUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateWithoutQuestionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GradeUpsertWithoutQuestionsInputSchema: z.ZodType<Prisma.GradeUpsertWithoutQuestionsInput> = z.object({
  update: z.union([ z.lazy(() => GradeUpdateWithoutQuestionsInputSchema),z.lazy(() => GradeUncheckedUpdateWithoutQuestionsInputSchema) ]),
  create: z.union([ z.lazy(() => GradeCreateWithoutQuestionsInputSchema),z.lazy(() => GradeUncheckedCreateWithoutQuestionsInputSchema) ]),
  where: z.lazy(() => GradeWhereInputSchema).optional()
}).strict();

export const GradeUpdateToOneWithWhereWithoutQuestionsInputSchema: z.ZodType<Prisma.GradeUpdateToOneWithWhereWithoutQuestionsInput> = z.object({
  where: z.lazy(() => GradeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => GradeUpdateWithoutQuestionsInputSchema),z.lazy(() => GradeUncheckedUpdateWithoutQuestionsInputSchema) ]),
}).strict();

export const GradeUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.GradeUpdateWithoutQuestionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedGradesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedGradesNestedInputSchema).optional()
}).strict();

export const GradeUncheckedUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateWithoutQuestionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SourceUpsertWithoutQuestionsInputSchema: z.ZodType<Prisma.SourceUpsertWithoutQuestionsInput> = z.object({
  update: z.union([ z.lazy(() => SourceUpdateWithoutQuestionsInputSchema),z.lazy(() => SourceUncheckedUpdateWithoutQuestionsInputSchema) ]),
  create: z.union([ z.lazy(() => SourceCreateWithoutQuestionsInputSchema),z.lazy(() => SourceUncheckedCreateWithoutQuestionsInputSchema) ]),
  where: z.lazy(() => SourceWhereInputSchema).optional()
}).strict();

export const SourceUpdateToOneWithWhereWithoutQuestionsInputSchema: z.ZodType<Prisma.SourceUpdateToOneWithWhereWithoutQuestionsInput> = z.object({
  where: z.lazy(() => SourceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SourceUpdateWithoutQuestionsInputSchema),z.lazy(() => SourceUncheckedUpdateWithoutQuestionsInputSchema) ]),
}).strict();

export const SourceUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.SourceUpdateWithoutQuestionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedSourcesNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedSourcesNestedInputSchema).optional()
}).strict();

export const SourceUncheckedUpdateWithoutQuestionsInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateWithoutQuestionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUpsertWithoutCreatedQuestionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutCreatedQuestionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCreatedQuestionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedQuestionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCreatedQuestionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutCreatedQuestionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCreatedQuestionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCreatedQuestionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCreatedQuestionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCreatedQuestionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutCreatedQuestionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutCreatedQuestionsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCreatedQuestionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCreatedQuestionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  updatedQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUpdatedQuestionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUpdatedQuestionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUpdatedQuestionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedQuestionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUpdatedQuestionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUpdatedQuestionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUpdatedQuestionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUpdatedQuestionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUpdatedQuestionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUpdatedQuestionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUpdatedQuestionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUpdatedQuestionsInput> = z.object({
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUpdatedQuestionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUpdatedQuestionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  username: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => UserRoleUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  createdRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedRoles: z.lazy(() => RoleUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedPermissions: z.lazy(() => PermissionUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedCategories: z.lazy(() => CategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSubjects: z.lazy(() => SubjectUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedGrades: z.lazy(() => GradeUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdSources: z.lazy(() => SourceUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedSources: z.lazy(() => SourceUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  createdTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTagCategories: z.lazy(() => TagCategoryUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdTags: z.lazy(() => TagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedTags: z.lazy(() => TagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  createdQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  updatedQuestionTags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutUpdatedByNestedInputSchema).optional(),
  systemLogs: z.lazy(() => SystemLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const QuestionTagUpsertWithWhereUniqueWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagUpsertWithWhereUniqueWithoutQuestionInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QuestionTagUpdateWithoutQuestionInputSchema),z.lazy(() => QuestionTagUncheckedUpdateWithoutQuestionInputSchema) ]),
  create: z.union([ z.lazy(() => QuestionTagCreateWithoutQuestionInputSchema),z.lazy(() => QuestionTagUncheckedCreateWithoutQuestionInputSchema) ]),
}).strict();

export const QuestionTagUpdateWithWhereUniqueWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagUpdateWithWhereUniqueWithoutQuestionInput> = z.object({
  where: z.lazy(() => QuestionTagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QuestionTagUpdateWithoutQuestionInputSchema),z.lazy(() => QuestionTagUncheckedUpdateWithoutQuestionInputSchema) ]),
}).strict();

export const QuestionTagUpdateManyWithWhereWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagUpdateManyWithWhereWithoutQuestionInput> = z.object({
  where: z.lazy(() => QuestionTagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QuestionTagUpdateManyMutationInputSchema),z.lazy(() => QuestionTagUncheckedUpdateManyWithoutQuestionInputSchema) ]),
}).strict();

export const UserRoleCreateManyUserInputSchema: z.ZodType<Prisma.UserRoleCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RoleCreateManyCreatedByInputSchema: z.ZodType<Prisma.RoleCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int()
}).strict();

export const RoleCreateManyUpdatedByInputSchema: z.ZodType<Prisma.RoleCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int()
}).strict();

export const PermissionCreateManyCreatedByInputSchema: z.ZodType<Prisma.PermissionCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int()
}).strict();

export const PermissionCreateManyUpdatedByInputSchema: z.ZodType<Prisma.PermissionCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int()
}).strict();

export const CategoryCreateManyCreatedByInputSchema: z.ZodType<Prisma.CategoryCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int()
}).strict();

export const CategoryCreateManyUpdatedByInputSchema: z.ZodType<Prisma.CategoryCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int()
}).strict();

export const SubjectCreateManyCreatedByInputSchema: z.ZodType<Prisma.SubjectCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int()
}).strict();

export const SubjectCreateManyUpdatedByInputSchema: z.ZodType<Prisma.SubjectCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int()
}).strict();

export const GradeCreateManyCreatedByInputSchema: z.ZodType<Prisma.GradeCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int()
}).strict();

export const GradeCreateManyUpdatedByInputSchema: z.ZodType<Prisma.GradeCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int()
}).strict();

export const SourceCreateManyCreatedByInputSchema: z.ZodType<Prisma.SourceCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updaterId: z.number().int()
}).strict();

export const SourceCreateManyUpdatedByInputSchema: z.ZodType<Prisma.SourceCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  type: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creatorId: z.number().int()
}).strict();

export const QuestionCreateManyCreatedByInputSchema: z.ZodType<Prisma.QuestionCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionCreateManyUpdatedByInputSchema: z.ZodType<Prisma.QuestionCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable()
}).strict();

export const TagCategoryCreateManyCreatedByInputSchema: z.ZodType<Prisma.TagCategoryCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const TagCategoryCreateManyUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  code: z.string(),
  allowMultiple: z.boolean().optional(),
  sortOrder: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable()
}).strict();

export const TagCreateManyCreatedByInputSchema: z.ZodType<Prisma.TagCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const TagCreateManyUpdatedByInputSchema: z.ZodType<Prisma.TagCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagCreateManyCreatedByInputSchema: z.ZodType<Prisma.QuestionTagCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  questionId: z.number().int(),
  tagId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagCreateManyUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagCreateManyUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  questionId: z.number().int(),
  tagId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable()
}).strict();

export const SystemLogCreateManyUserInputSchema: z.ZodType<Prisma.SystemLogCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  module: z.string(),
  action: z.string(),
  targetId: z.string().optional().nullable(),
  details: z.string(),
  level: z.number().int().optional(),
  ip: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const UserRoleUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUpdateWithoutUserInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
}).strict();

export const UserRoleUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUpdateWithoutCreatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  users: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedRolesNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  users: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RoleUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleUpdateWithoutUpdatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => RolePermissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  users: z.lazy(() => UserRoleUpdateManyWithoutRoleNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedRolesNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  users: z.lazy(() => UserRoleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const RoleUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.RoleUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionUpdateWithoutCreatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => RolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionUpdateWithoutUpdatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => RolePermissionUpdateManyWithoutPermissionNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => RolePermissionUncheckedUpdateManyWithoutPermissionNestedInputSchema).optional()
}).strict();

export const PermissionUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.PermissionUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryUpdateWithoutCreatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutCategoryNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedCategoriesNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryUpdateWithoutUpdatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutCategoryNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedCategoriesNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubjectUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectUpdateWithoutCreatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutSubjectNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedSubjectsNestedInputSchema).optional()
}).strict();

export const SubjectUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutSubjectNestedInputSchema).optional()
}).strict();

export const SubjectUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SubjectUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectUpdateWithoutUpdatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutSubjectNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedSubjectsNestedInputSchema).optional()
}).strict();

export const SubjectUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutSubjectNestedInputSchema).optional()
}).strict();

export const SubjectUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.SubjectUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GradeUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeUpdateWithoutCreatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutGradeNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedGradesNestedInputSchema).optional()
}).strict();

export const GradeUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutGradeNestedInputSchema).optional()
}).strict();

export const GradeUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GradeUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeUpdateWithoutUpdatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutGradeNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedGradesNestedInputSchema).optional()
}).strict();

export const GradeUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutGradeNestedInputSchema).optional()
}).strict();

export const GradeUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.GradeUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SourceUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceUpdateWithoutCreatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutSourceNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneRequiredWithoutUpdatedSourcesNestedInputSchema).optional()
}).strict();

export const SourceUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutSourceNestedInputSchema).optional()
}).strict();

export const SourceUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updaterId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SourceUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceUpdateWithoutUpdatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUpdateManyWithoutSourceNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutCreatedSourcesNestedInputSchema).optional()
}).strict();

export const SourceUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questions: z.lazy(() => QuestionUncheckedUpdateManyWithoutSourceNestedInputSchema).optional()
}).strict();

export const SourceUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.SourceUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creatorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionUpdateWithoutCreatedByInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  subject: z.lazy(() => SubjectUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  grade: z.lazy(() => GradeUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  source: z.lazy(() => SourceUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionsNestedInputSchema).optional(),
  tags: z.lazy(() => QuestionTagUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionUpdateWithoutUpdatedByInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  subject: z.lazy(() => SubjectUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  grade: z.lazy(() => GradeUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  source: z.lazy(() => SourceUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionsNestedInputSchema).optional(),
  tags: z.lazy(() => QuestionTagUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagCategoryUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryUpdateWithoutCreatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutCategoryNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagCategoriesNestedInputSchema).optional()
}).strict();

export const TagCategoryUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const TagCategoryUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagCategoryUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryUpdateWithoutUpdatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.lazy(() => TagUpdateManyWithoutCategoryNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagCategoriesNestedInputSchema).optional()
}).strict();

export const TagCategoryUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => TagUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const TagCategoryUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagCategoryUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  allowMultiple: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.TagUpdateWithoutCreatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => TagCategoryUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  parent: z.lazy(() => TagUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => TagUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUpdateManyWithoutTagNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  children: z.lazy(() => TagUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagUpdateWithoutUpdatedByInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => TagCategoryUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  parent: z.lazy(() => TagUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => TagUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUpdateManyWithoutTagNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  children: z.lazy(() => TagUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagUpdateWithoutCreatedByInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.lazy(() => QuestionUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  tag: z.lazy(() => TagUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionTagsNestedInputSchema).optional()
}).strict();

export const QuestionTagUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagUpdateWithoutUpdatedByInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.lazy(() => QuestionUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  tag: z.lazy(() => TagUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionTagsNestedInputSchema).optional()
}).strict();

export const QuestionTagUncheckedUpdateWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagUncheckedUpdateManyWithoutUpdatedByInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyWithoutUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SystemLogUpdateWithoutUserInputSchema: z.ZodType<Prisma.SystemLogUpdateWithoutUserInput> = z.object({
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SystemLogUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SystemLogUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SystemLogUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SystemLogUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  module: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  targetId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  details: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateManyRoleInputSchema: z.ZodType<Prisma.RolePermissionCreateManyRoleInput> = z.object({
  id: z.number().int().optional(),
  permissionId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserRoleCreateManyRoleInputSchema: z.ZodType<Prisma.UserRoleCreateManyRoleInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithoutRoleInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.lazy(() => PermissionUpdateOneRequiredWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolePermissionUncheckedUpdateWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutRoleInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutRoleInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permissionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUpdateWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUpdateWithoutRoleInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutRolesNestedInputSchema).optional()
}).strict();

export const UserRoleUncheckedUpdateWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserRoleUncheckedUpdateManyWithoutRoleInputSchema: z.ZodType<Prisma.UserRoleUncheckedUpdateManyWithoutRoleInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionCreateManyPermissionInputSchema: z.ZodType<Prisma.RolePermissionCreateManyPermissionInput> = z.object({
  id: z.number().int().optional(),
  roleId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RolePermissionUpdateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUpdateWithoutPermissionInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => RoleUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const RolePermissionUncheckedUpdateWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateWithoutPermissionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolePermissionUncheckedUpdateManyWithoutPermissionInputSchema: z.ZodType<Prisma.RolePermissionUncheckedUpdateManyWithoutPermissionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  roleId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QuestionCreateManyCategoryInputSchema: z.ZodType<Prisma.QuestionCreateManyCategoryInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionUpdateWithoutCategoryInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.lazy(() => SubjectUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  grade: z.lazy(() => GradeUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  source: z.lazy(() => SourceUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionsNestedInputSchema).optional(),
  tags: z.lazy(() => QuestionTagUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionCreateManySubjectInputSchema: z.ZodType<Prisma.QuestionCreateManySubjectInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  gradeId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionUpdateWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionUpdateWithoutSubjectInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  grade: z.lazy(() => GradeUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  source: z.lazy(() => SourceUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionsNestedInputSchema).optional(),
  tags: z.lazy(() => QuestionTagUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateWithoutSubjectInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateManyWithoutSubjectInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutSubjectInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionCreateManyGradeInputSchema: z.ZodType<Prisma.QuestionCreateManyGradeInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  sourceId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionUpdateWithoutGradeInputSchema: z.ZodType<Prisma.QuestionUpdateWithoutGradeInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  subject: z.lazy(() => SubjectUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  source: z.lazy(() => SourceUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionsNestedInputSchema).optional(),
  tags: z.lazy(() => QuestionTagUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateWithoutGradeInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateWithoutGradeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateManyWithoutGradeInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutGradeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sourceId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionCreateManySourceInputSchema: z.ZodType<Prisma.QuestionCreateManySourceInput> = z.object({
  id: z.number().int().optional(),
  title: z.string(),
  content: z.string(),
  type: z.string(),
  difficulty: z.number().int().optional(),
  options: z.string().optional().nullable(),
  answer: z.string(),
  explanation: z.string().optional().nullable(),
  categoryId: z.number().int(),
  subjectId: z.number().int(),
  gradeId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionUpdateWithoutSourceInputSchema: z.ZodType<Prisma.QuestionUpdateWithoutSourceInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => CategoryUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  subject: z.lazy(() => SubjectUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  grade: z.lazy(() => GradeUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionsNestedInputSchema).optional(),
  tags: z.lazy(() => QuestionTagUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateWithoutSourceInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateWithoutSourceInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutQuestionNestedInputSchema).optional()
}).strict();

export const QuestionUncheckedUpdateManyWithoutSourceInputSchema: z.ZodType<Prisma.QuestionUncheckedUpdateManyWithoutSourceInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  difficulty: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  options: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  answer: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  explanation: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  subjectId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  gradeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagCreateManyCategoryInputSchema: z.ZodType<Prisma.TagCreateManyCategoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  parentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const TagUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.TagUpdateWithoutCategoryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  parent: z.lazy(() => TagUpdateOneWithoutChildrenNestedInputSchema).optional(),
  children: z.lazy(() => TagUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUpdateManyWithoutTagNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  children: z.lazy(() => TagUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TagCreateManyParentInputSchema: z.ZodType<Prisma.TagCreateManyParentInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  code: z.string(),
  description: z.string().optional().nullable(),
  sortOrder: z.number().int().optional(),
  categoryId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagCreateManyTagInputSchema: z.ZodType<Prisma.QuestionTagCreateManyTagInput> = z.object({
  id: z.number().int().optional(),
  questionId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const TagUpdateWithoutParentInputSchema: z.ZodType<Prisma.TagUpdateWithoutParentInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.lazy(() => TagCategoryUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  children: z.lazy(() => TagUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUpdateManyWithoutTagNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedTagsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedTagsNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateWithoutParentInputSchema: z.ZodType<Prisma.TagUncheckedUpdateWithoutParentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  children: z.lazy(() => TagUncheckedUpdateManyWithoutParentNestedInputSchema).optional(),
  questions: z.lazy(() => QuestionTagUncheckedUpdateManyWithoutTagNestedInputSchema).optional()
}).strict();

export const TagUncheckedUpdateManyWithoutParentInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyWithoutParentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sortOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagUpdateWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagUpdateWithoutTagInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  question: z.lazy(() => QuestionUpdateOneRequiredWithoutTagsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionTagsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionTagsNestedInputSchema).optional()
}).strict();

export const QuestionTagUncheckedUpdateWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateWithoutTagInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagUncheckedUpdateManyWithoutTagInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyWithoutTagInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  questionId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagCreateManyQuestionInputSchema: z.ZodType<Prisma.QuestionTagCreateManyQuestionInput> = z.object({
  id: z.number().int().optional(),
  tagId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdById: z.number().int().optional().nullable(),
  updatedById: z.number().int().optional().nullable()
}).strict();

export const QuestionTagUpdateWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagUpdateWithoutQuestionInput> = z.object({
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tag: z.lazy(() => TagUpdateOneRequiredWithoutQuestionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneWithoutCreatedQuestionTagsNestedInputSchema).optional(),
  updatedBy: z.lazy(() => UserUpdateOneWithoutUpdatedQuestionTagsNestedInputSchema).optional()
}).strict();

export const QuestionTagUncheckedUpdateWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateWithoutQuestionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const QuestionTagUncheckedUpdateManyWithoutQuestionInputSchema: z.ZodType<Prisma.QuestionTagUncheckedUpdateManyWithoutQuestionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  tagId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const RoleFindFirstArgsSchema: z.ZodType<Prisma.RoleFindFirstArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithRelationInputSchema.array(),RoleOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleScalarFieldEnumSchema,RoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RoleFindFirstOrThrowArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithRelationInputSchema.array(),RoleOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleScalarFieldEnumSchema,RoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleFindManyArgsSchema: z.ZodType<Prisma.RoleFindManyArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithRelationInputSchema.array(),RoleOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RoleScalarFieldEnumSchema,RoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RoleAggregateArgsSchema: z.ZodType<Prisma.RoleAggregateArgs> = z.object({
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithRelationInputSchema.array(),RoleOrderByWithRelationInputSchema ]).optional(),
  cursor: RoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RoleGroupByArgsSchema: z.ZodType<Prisma.RoleGroupByArgs> = z.object({
  where: RoleWhereInputSchema.optional(),
  orderBy: z.union([ RoleOrderByWithAggregationInputSchema.array(),RoleOrderByWithAggregationInputSchema ]).optional(),
  by: RoleScalarFieldEnumSchema.array(),
  having: RoleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RoleFindUniqueArgsSchema: z.ZodType<Prisma.RoleFindUniqueArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereUniqueInputSchema,
}).strict() ;

export const RoleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RoleFindUniqueOrThrowArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereUniqueInputSchema,
}).strict() ;

export const PermissionFindFirstArgsSchema: z.ZodType<Prisma.PermissionFindFirstArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PermissionFindFirstOrThrowArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionFindManyArgsSchema: z.ZodType<Prisma.PermissionFindManyArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionScalarFieldEnumSchema,PermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PermissionAggregateArgsSchema: z.ZodType<Prisma.PermissionAggregateArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithRelationInputSchema.array(),PermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PermissionGroupByArgsSchema: z.ZodType<Prisma.PermissionGroupByArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
  orderBy: z.union([ PermissionOrderByWithAggregationInputSchema.array(),PermissionOrderByWithAggregationInputSchema ]).optional(),
  by: PermissionScalarFieldEnumSchema.array(),
  having: PermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PermissionFindUniqueArgsSchema: z.ZodType<Prisma.PermissionFindUniqueArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PermissionFindUniqueOrThrowArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const UserRoleFindFirstArgsSchema: z.ZodType<Prisma.UserRoleFindFirstArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserRoleFindFirstOrThrowArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleFindManyArgsSchema: z.ZodType<Prisma.UserRoleFindManyArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRoleScalarFieldEnumSchema,UserRoleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRoleAggregateArgsSchema: z.ZodType<Prisma.UserRoleAggregateArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithRelationInputSchema.array(),UserRoleOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRoleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserRoleGroupByArgsSchema: z.ZodType<Prisma.UserRoleGroupByArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
  orderBy: z.union([ UserRoleOrderByWithAggregationInputSchema.array(),UserRoleOrderByWithAggregationInputSchema ]).optional(),
  by: UserRoleScalarFieldEnumSchema.array(),
  having: UserRoleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserRoleFindUniqueArgsSchema: z.ZodType<Prisma.UserRoleFindUniqueArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserRoleFindUniqueOrThrowArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionFindFirstArgsSchema: z.ZodType<Prisma.RolePermissionFindFirstArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RolePermissionFindFirstOrThrowArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionFindManyArgsSchema: z.ZodType<Prisma.RolePermissionFindManyArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolePermissionScalarFieldEnumSchema,RolePermissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RolePermissionAggregateArgsSchema: z.ZodType<Prisma.RolePermissionAggregateArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithRelationInputSchema.array(),RolePermissionOrderByWithRelationInputSchema ]).optional(),
  cursor: RolePermissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RolePermissionGroupByArgsSchema: z.ZodType<Prisma.RolePermissionGroupByArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
  orderBy: z.union([ RolePermissionOrderByWithAggregationInputSchema.array(),RolePermissionOrderByWithAggregationInputSchema ]).optional(),
  by: RolePermissionScalarFieldEnumSchema.array(),
  having: RolePermissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RolePermissionFindUniqueArgsSchema: z.ZodType<Prisma.RolePermissionFindUniqueArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RolePermissionFindUniqueOrThrowArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const CategoryFindFirstArgsSchema: z.ZodType<Prisma.CategoryFindFirstArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CategoryFindFirstOrThrowArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryFindManyArgsSchema: z.ZodType<Prisma.CategoryFindManyArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryAggregateArgsSchema: z.ZodType<Prisma.CategoryAggregateArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CategoryGroupByArgsSchema: z.ZodType<Prisma.CategoryGroupByArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithAggregationInputSchema.array(),CategoryOrderByWithAggregationInputSchema ]).optional(),
  by: CategoryScalarFieldEnumSchema.array(),
  having: CategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CategoryFindUniqueArgsSchema: z.ZodType<Prisma.CategoryFindUniqueArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CategoryFindUniqueOrThrowArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const SubjectFindFirstArgsSchema: z.ZodType<Prisma.SubjectFindFirstArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  where: SubjectWhereInputSchema.optional(),
  orderBy: z.union([ SubjectOrderByWithRelationInputSchema.array(),SubjectOrderByWithRelationInputSchema ]).optional(),
  cursor: SubjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubjectScalarFieldEnumSchema,SubjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubjectFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SubjectFindFirstOrThrowArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  where: SubjectWhereInputSchema.optional(),
  orderBy: z.union([ SubjectOrderByWithRelationInputSchema.array(),SubjectOrderByWithRelationInputSchema ]).optional(),
  cursor: SubjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubjectScalarFieldEnumSchema,SubjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubjectFindManyArgsSchema: z.ZodType<Prisma.SubjectFindManyArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  where: SubjectWhereInputSchema.optional(),
  orderBy: z.union([ SubjectOrderByWithRelationInputSchema.array(),SubjectOrderByWithRelationInputSchema ]).optional(),
  cursor: SubjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SubjectScalarFieldEnumSchema,SubjectScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SubjectAggregateArgsSchema: z.ZodType<Prisma.SubjectAggregateArgs> = z.object({
  where: SubjectWhereInputSchema.optional(),
  orderBy: z.union([ SubjectOrderByWithRelationInputSchema.array(),SubjectOrderByWithRelationInputSchema ]).optional(),
  cursor: SubjectWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SubjectGroupByArgsSchema: z.ZodType<Prisma.SubjectGroupByArgs> = z.object({
  where: SubjectWhereInputSchema.optional(),
  orderBy: z.union([ SubjectOrderByWithAggregationInputSchema.array(),SubjectOrderByWithAggregationInputSchema ]).optional(),
  by: SubjectScalarFieldEnumSchema.array(),
  having: SubjectScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SubjectFindUniqueArgsSchema: z.ZodType<Prisma.SubjectFindUniqueArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  where: SubjectWhereUniqueInputSchema,
}).strict() ;

export const SubjectFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SubjectFindUniqueOrThrowArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  where: SubjectWhereUniqueInputSchema,
}).strict() ;

export const GradeFindFirstArgsSchema: z.ZodType<Prisma.GradeFindFirstArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  where: GradeWhereInputSchema.optional(),
  orderBy: z.union([ GradeOrderByWithRelationInputSchema.array(),GradeOrderByWithRelationInputSchema ]).optional(),
  cursor: GradeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GradeScalarFieldEnumSchema,GradeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GradeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.GradeFindFirstOrThrowArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  where: GradeWhereInputSchema.optional(),
  orderBy: z.union([ GradeOrderByWithRelationInputSchema.array(),GradeOrderByWithRelationInputSchema ]).optional(),
  cursor: GradeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GradeScalarFieldEnumSchema,GradeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GradeFindManyArgsSchema: z.ZodType<Prisma.GradeFindManyArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  where: GradeWhereInputSchema.optional(),
  orderBy: z.union([ GradeOrderByWithRelationInputSchema.array(),GradeOrderByWithRelationInputSchema ]).optional(),
  cursor: GradeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GradeScalarFieldEnumSchema,GradeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GradeAggregateArgsSchema: z.ZodType<Prisma.GradeAggregateArgs> = z.object({
  where: GradeWhereInputSchema.optional(),
  orderBy: z.union([ GradeOrderByWithRelationInputSchema.array(),GradeOrderByWithRelationInputSchema ]).optional(),
  cursor: GradeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const GradeGroupByArgsSchema: z.ZodType<Prisma.GradeGroupByArgs> = z.object({
  where: GradeWhereInputSchema.optional(),
  orderBy: z.union([ GradeOrderByWithAggregationInputSchema.array(),GradeOrderByWithAggregationInputSchema ]).optional(),
  by: GradeScalarFieldEnumSchema.array(),
  having: GradeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const GradeFindUniqueArgsSchema: z.ZodType<Prisma.GradeFindUniqueArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  where: GradeWhereUniqueInputSchema,
}).strict() ;

export const GradeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.GradeFindUniqueOrThrowArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  where: GradeWhereUniqueInputSchema,
}).strict() ;

export const SourceFindFirstArgsSchema: z.ZodType<Prisma.SourceFindFirstArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  where: SourceWhereInputSchema.optional(),
  orderBy: z.union([ SourceOrderByWithRelationInputSchema.array(),SourceOrderByWithRelationInputSchema ]).optional(),
  cursor: SourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SourceScalarFieldEnumSchema,SourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SourceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SourceFindFirstOrThrowArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  where: SourceWhereInputSchema.optional(),
  orderBy: z.union([ SourceOrderByWithRelationInputSchema.array(),SourceOrderByWithRelationInputSchema ]).optional(),
  cursor: SourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SourceScalarFieldEnumSchema,SourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SourceFindManyArgsSchema: z.ZodType<Prisma.SourceFindManyArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  where: SourceWhereInputSchema.optional(),
  orderBy: z.union([ SourceOrderByWithRelationInputSchema.array(),SourceOrderByWithRelationInputSchema ]).optional(),
  cursor: SourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SourceScalarFieldEnumSchema,SourceScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SourceAggregateArgsSchema: z.ZodType<Prisma.SourceAggregateArgs> = z.object({
  where: SourceWhereInputSchema.optional(),
  orderBy: z.union([ SourceOrderByWithRelationInputSchema.array(),SourceOrderByWithRelationInputSchema ]).optional(),
  cursor: SourceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SourceGroupByArgsSchema: z.ZodType<Prisma.SourceGroupByArgs> = z.object({
  where: SourceWhereInputSchema.optional(),
  orderBy: z.union([ SourceOrderByWithAggregationInputSchema.array(),SourceOrderByWithAggregationInputSchema ]).optional(),
  by: SourceScalarFieldEnumSchema.array(),
  having: SourceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SourceFindUniqueArgsSchema: z.ZodType<Prisma.SourceFindUniqueArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  where: SourceWhereUniqueInputSchema,
}).strict() ;

export const SourceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SourceFindUniqueOrThrowArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  where: SourceWhereUniqueInputSchema,
}).strict() ;

export const TagCategoryFindFirstArgsSchema: z.ZodType<Prisma.TagCategoryFindFirstArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  where: TagCategoryWhereInputSchema.optional(),
  orderBy: z.union([ TagCategoryOrderByWithRelationInputSchema.array(),TagCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: TagCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagCategoryScalarFieldEnumSchema,TagCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagCategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TagCategoryFindFirstOrThrowArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  where: TagCategoryWhereInputSchema.optional(),
  orderBy: z.union([ TagCategoryOrderByWithRelationInputSchema.array(),TagCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: TagCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagCategoryScalarFieldEnumSchema,TagCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagCategoryFindManyArgsSchema: z.ZodType<Prisma.TagCategoryFindManyArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  where: TagCategoryWhereInputSchema.optional(),
  orderBy: z.union([ TagCategoryOrderByWithRelationInputSchema.array(),TagCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: TagCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagCategoryScalarFieldEnumSchema,TagCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagCategoryAggregateArgsSchema: z.ZodType<Prisma.TagCategoryAggregateArgs> = z.object({
  where: TagCategoryWhereInputSchema.optional(),
  orderBy: z.union([ TagCategoryOrderByWithRelationInputSchema.array(),TagCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: TagCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagCategoryGroupByArgsSchema: z.ZodType<Prisma.TagCategoryGroupByArgs> = z.object({
  where: TagCategoryWhereInputSchema.optional(),
  orderBy: z.union([ TagCategoryOrderByWithAggregationInputSchema.array(),TagCategoryOrderByWithAggregationInputSchema ]).optional(),
  by: TagCategoryScalarFieldEnumSchema.array(),
  having: TagCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagCategoryFindUniqueArgsSchema: z.ZodType<Prisma.TagCategoryFindUniqueArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  where: TagCategoryWhereUniqueInputSchema,
}).strict() ;

export const TagCategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TagCategoryFindUniqueOrThrowArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  where: TagCategoryWhereUniqueInputSchema,
}).strict() ;

export const TagFindFirstArgsSchema: z.ZodType<Prisma.TagFindFirstArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TagFindFirstOrThrowArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagFindManyArgsSchema: z.ZodType<Prisma.TagFindManyArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagAggregateArgsSchema: z.ZodType<Prisma.TagAggregateArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagGroupByArgsSchema: z.ZodType<Prisma.TagGroupByArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithAggregationInputSchema.array(),TagOrderByWithAggregationInputSchema ]).optional(),
  by: TagScalarFieldEnumSchema.array(),
  having: TagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagFindUniqueArgsSchema: z.ZodType<Prisma.TagFindUniqueArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TagFindUniqueOrThrowArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const QuestionTagFindFirstArgsSchema: z.ZodType<Prisma.QuestionTagFindFirstArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  where: QuestionTagWhereInputSchema.optional(),
  orderBy: z.union([ QuestionTagOrderByWithRelationInputSchema.array(),QuestionTagOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionTagScalarFieldEnumSchema,QuestionTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionTagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.QuestionTagFindFirstOrThrowArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  where: QuestionTagWhereInputSchema.optional(),
  orderBy: z.union([ QuestionTagOrderByWithRelationInputSchema.array(),QuestionTagOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionTagScalarFieldEnumSchema,QuestionTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionTagFindManyArgsSchema: z.ZodType<Prisma.QuestionTagFindManyArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  where: QuestionTagWhereInputSchema.optional(),
  orderBy: z.union([ QuestionTagOrderByWithRelationInputSchema.array(),QuestionTagOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionTagScalarFieldEnumSchema,QuestionTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionTagAggregateArgsSchema: z.ZodType<Prisma.QuestionTagAggregateArgs> = z.object({
  where: QuestionTagWhereInputSchema.optional(),
  orderBy: z.union([ QuestionTagOrderByWithRelationInputSchema.array(),QuestionTagOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QuestionTagGroupByArgsSchema: z.ZodType<Prisma.QuestionTagGroupByArgs> = z.object({
  where: QuestionTagWhereInputSchema.optional(),
  orderBy: z.union([ QuestionTagOrderByWithAggregationInputSchema.array(),QuestionTagOrderByWithAggregationInputSchema ]).optional(),
  by: QuestionTagScalarFieldEnumSchema.array(),
  having: QuestionTagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QuestionTagFindUniqueArgsSchema: z.ZodType<Prisma.QuestionTagFindUniqueArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  where: QuestionTagWhereUniqueInputSchema,
}).strict() ;

export const QuestionTagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.QuestionTagFindUniqueOrThrowArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  where: QuestionTagWhereUniqueInputSchema,
}).strict() ;

export const SystemLogFindFirstArgsSchema: z.ZodType<Prisma.SystemLogFindFirstArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  where: SystemLogWhereInputSchema.optional(),
  orderBy: z.union([ SystemLogOrderByWithRelationInputSchema.array(),SystemLogOrderByWithRelationInputSchema ]).optional(),
  cursor: SystemLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SystemLogScalarFieldEnumSchema,SystemLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SystemLogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SystemLogFindFirstOrThrowArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  where: SystemLogWhereInputSchema.optional(),
  orderBy: z.union([ SystemLogOrderByWithRelationInputSchema.array(),SystemLogOrderByWithRelationInputSchema ]).optional(),
  cursor: SystemLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SystemLogScalarFieldEnumSchema,SystemLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SystemLogFindManyArgsSchema: z.ZodType<Prisma.SystemLogFindManyArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  where: SystemLogWhereInputSchema.optional(),
  orderBy: z.union([ SystemLogOrderByWithRelationInputSchema.array(),SystemLogOrderByWithRelationInputSchema ]).optional(),
  cursor: SystemLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SystemLogScalarFieldEnumSchema,SystemLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SystemLogAggregateArgsSchema: z.ZodType<Prisma.SystemLogAggregateArgs> = z.object({
  where: SystemLogWhereInputSchema.optional(),
  orderBy: z.union([ SystemLogOrderByWithRelationInputSchema.array(),SystemLogOrderByWithRelationInputSchema ]).optional(),
  cursor: SystemLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SystemLogGroupByArgsSchema: z.ZodType<Prisma.SystemLogGroupByArgs> = z.object({
  where: SystemLogWhereInputSchema.optional(),
  orderBy: z.union([ SystemLogOrderByWithAggregationInputSchema.array(),SystemLogOrderByWithAggregationInputSchema ]).optional(),
  by: SystemLogScalarFieldEnumSchema.array(),
  having: SystemLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SystemLogFindUniqueArgsSchema: z.ZodType<Prisma.SystemLogFindUniqueArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  where: SystemLogWhereUniqueInputSchema,
}).strict() ;

export const SystemLogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SystemLogFindUniqueOrThrowArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  where: SystemLogWhereUniqueInputSchema,
}).strict() ;

export const QuestionFindFirstArgsSchema: z.ZodType<Prisma.QuestionFindFirstArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithRelationInputSchema.array(),QuestionOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionScalarFieldEnumSchema,QuestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.QuestionFindFirstOrThrowArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithRelationInputSchema.array(),QuestionOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionScalarFieldEnumSchema,QuestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionFindManyArgsSchema: z.ZodType<Prisma.QuestionFindManyArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithRelationInputSchema.array(),QuestionOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QuestionScalarFieldEnumSchema,QuestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QuestionAggregateArgsSchema: z.ZodType<Prisma.QuestionAggregateArgs> = z.object({
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithRelationInputSchema.array(),QuestionOrderByWithRelationInputSchema ]).optional(),
  cursor: QuestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QuestionGroupByArgsSchema: z.ZodType<Prisma.QuestionGroupByArgs> = z.object({
  where: QuestionWhereInputSchema.optional(),
  orderBy: z.union([ QuestionOrderByWithAggregationInputSchema.array(),QuestionOrderByWithAggregationInputSchema ]).optional(),
  by: QuestionScalarFieldEnumSchema.array(),
  having: QuestionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QuestionFindUniqueArgsSchema: z.ZodType<Prisma.QuestionFindUniqueArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereUniqueInputSchema,
}).strict() ;

export const QuestionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.QuestionFindUniqueOrThrowArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereUniqueInputSchema,
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const RoleCreateArgsSchema: z.ZodType<Prisma.RoleCreateArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  data: z.union([ RoleCreateInputSchema,RoleUncheckedCreateInputSchema ]),
}).strict() ;

export const RoleUpsertArgsSchema: z.ZodType<Prisma.RoleUpsertArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereUniqueInputSchema,
  create: z.union([ RoleCreateInputSchema,RoleUncheckedCreateInputSchema ]),
  update: z.union([ RoleUpdateInputSchema,RoleUncheckedUpdateInputSchema ]),
}).strict() ;

export const RoleCreateManyArgsSchema: z.ZodType<Prisma.RoleCreateManyArgs> = z.object({
  data: z.union([ RoleCreateManyInputSchema,RoleCreateManyInputSchema.array() ]),
}).strict() ;

export const RoleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RoleCreateManyAndReturnArgs> = z.object({
  data: z.union([ RoleCreateManyInputSchema,RoleCreateManyInputSchema.array() ]),
}).strict() ;

export const RoleDeleteArgsSchema: z.ZodType<Prisma.RoleDeleteArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  where: RoleWhereUniqueInputSchema,
}).strict() ;

export const RoleUpdateArgsSchema: z.ZodType<Prisma.RoleUpdateArgs> = z.object({
  select: RoleSelectSchema.optional(),
  include: RoleIncludeSchema.optional(),
  data: z.union([ RoleUpdateInputSchema,RoleUncheckedUpdateInputSchema ]),
  where: RoleWhereUniqueInputSchema,
}).strict() ;

export const RoleUpdateManyArgsSchema: z.ZodType<Prisma.RoleUpdateManyArgs> = z.object({
  data: z.union([ RoleUpdateManyMutationInputSchema,RoleUncheckedUpdateManyInputSchema ]),
  where: RoleWhereInputSchema.optional(),
}).strict() ;

export const RoleDeleteManyArgsSchema: z.ZodType<Prisma.RoleDeleteManyArgs> = z.object({
  where: RoleWhereInputSchema.optional(),
}).strict() ;

export const PermissionCreateArgsSchema: z.ZodType<Prisma.PermissionCreateArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  data: z.union([ PermissionCreateInputSchema,PermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const PermissionUpsertArgsSchema: z.ZodType<Prisma.PermissionUpsertArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
  create: z.union([ PermissionCreateInputSchema,PermissionUncheckedCreateInputSchema ]),
  update: z.union([ PermissionUpdateInputSchema,PermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const PermissionCreateManyArgsSchema: z.ZodType<Prisma.PermissionCreateManyArgs> = z.object({
  data: z.union([ PermissionCreateManyInputSchema,PermissionCreateManyInputSchema.array() ]),
}).strict() ;

export const PermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ PermissionCreateManyInputSchema,PermissionCreateManyInputSchema.array() ]),
}).strict() ;

export const PermissionDeleteArgsSchema: z.ZodType<Prisma.PermissionDeleteArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionUpdateArgsSchema: z.ZodType<Prisma.PermissionUpdateArgs> = z.object({
  select: PermissionSelectSchema.optional(),
  include: PermissionIncludeSchema.optional(),
  data: z.union([ PermissionUpdateInputSchema,PermissionUncheckedUpdateInputSchema ]),
  where: PermissionWhereUniqueInputSchema,
}).strict() ;

export const PermissionUpdateManyArgsSchema: z.ZodType<Prisma.PermissionUpdateManyArgs> = z.object({
  data: z.union([ PermissionUpdateManyMutationInputSchema,PermissionUncheckedUpdateManyInputSchema ]),
  where: PermissionWhereInputSchema.optional(),
}).strict() ;

export const PermissionDeleteManyArgsSchema: z.ZodType<Prisma.PermissionDeleteManyArgs> = z.object({
  where: PermissionWhereInputSchema.optional(),
}).strict() ;

export const UserRoleCreateArgsSchema: z.ZodType<Prisma.UserRoleCreateArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  data: z.union([ UserRoleCreateInputSchema,UserRoleUncheckedCreateInputSchema ]),
}).strict() ;

export const UserRoleUpsertArgsSchema: z.ZodType<Prisma.UserRoleUpsertArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
  create: z.union([ UserRoleCreateInputSchema,UserRoleUncheckedCreateInputSchema ]),
  update: z.union([ UserRoleUpdateInputSchema,UserRoleUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserRoleCreateManyArgsSchema: z.ZodType<Prisma.UserRoleCreateManyArgs> = z.object({
  data: z.union([ UserRoleCreateManyInputSchema,UserRoleCreateManyInputSchema.array() ]),
}).strict() ;

export const UserRoleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserRoleCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserRoleCreateManyInputSchema,UserRoleCreateManyInputSchema.array() ]),
}).strict() ;

export const UserRoleDeleteArgsSchema: z.ZodType<Prisma.UserRoleDeleteArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleUpdateArgsSchema: z.ZodType<Prisma.UserRoleUpdateArgs> = z.object({
  select: UserRoleSelectSchema.optional(),
  include: UserRoleIncludeSchema.optional(),
  data: z.union([ UserRoleUpdateInputSchema,UserRoleUncheckedUpdateInputSchema ]),
  where: UserRoleWhereUniqueInputSchema,
}).strict() ;

export const UserRoleUpdateManyArgsSchema: z.ZodType<Prisma.UserRoleUpdateManyArgs> = z.object({
  data: z.union([ UserRoleUpdateManyMutationInputSchema,UserRoleUncheckedUpdateManyInputSchema ]),
  where: UserRoleWhereInputSchema.optional(),
}).strict() ;

export const UserRoleDeleteManyArgsSchema: z.ZodType<Prisma.UserRoleDeleteManyArgs> = z.object({
  where: UserRoleWhereInputSchema.optional(),
}).strict() ;

export const RolePermissionCreateArgsSchema: z.ZodType<Prisma.RolePermissionCreateArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  data: z.union([ RolePermissionCreateInputSchema,RolePermissionUncheckedCreateInputSchema ]),
}).strict() ;

export const RolePermissionUpsertArgsSchema: z.ZodType<Prisma.RolePermissionUpsertArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
  create: z.union([ RolePermissionCreateInputSchema,RolePermissionUncheckedCreateInputSchema ]),
  update: z.union([ RolePermissionUpdateInputSchema,RolePermissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RolePermissionCreateManyArgsSchema: z.ZodType<Prisma.RolePermissionCreateManyArgs> = z.object({
  data: z.union([ RolePermissionCreateManyInputSchema,RolePermissionCreateManyInputSchema.array() ]),
}).strict() ;

export const RolePermissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RolePermissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RolePermissionCreateManyInputSchema,RolePermissionCreateManyInputSchema.array() ]),
}).strict() ;

export const RolePermissionDeleteArgsSchema: z.ZodType<Prisma.RolePermissionDeleteArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionUpdateArgsSchema: z.ZodType<Prisma.RolePermissionUpdateArgs> = z.object({
  select: RolePermissionSelectSchema.optional(),
  include: RolePermissionIncludeSchema.optional(),
  data: z.union([ RolePermissionUpdateInputSchema,RolePermissionUncheckedUpdateInputSchema ]),
  where: RolePermissionWhereUniqueInputSchema,
}).strict() ;

export const RolePermissionUpdateManyArgsSchema: z.ZodType<Prisma.RolePermissionUpdateManyArgs> = z.object({
  data: z.union([ RolePermissionUpdateManyMutationInputSchema,RolePermissionUncheckedUpdateManyInputSchema ]),
  where: RolePermissionWhereInputSchema.optional(),
}).strict() ;

export const RolePermissionDeleteManyArgsSchema: z.ZodType<Prisma.RolePermissionDeleteManyArgs> = z.object({
  where: RolePermissionWhereInputSchema.optional(),
}).strict() ;

export const CategoryCreateArgsSchema: z.ZodType<Prisma.CategoryCreateArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  data: z.union([ CategoryCreateInputSchema,CategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const CategoryUpsertArgsSchema: z.ZodType<Prisma.CategoryUpsertArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
  create: z.union([ CategoryCreateInputSchema,CategoryUncheckedCreateInputSchema ]),
  update: z.union([ CategoryUpdateInputSchema,CategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const CategoryCreateManyArgsSchema: z.ZodType<Prisma.CategoryCreateManyArgs> = z.object({
  data: z.union([ CategoryCreateManyInputSchema,CategoryCreateManyInputSchema.array() ]),
}).strict() ;

export const CategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ CategoryCreateManyInputSchema,CategoryCreateManyInputSchema.array() ]),
}).strict() ;

export const CategoryDeleteArgsSchema: z.ZodType<Prisma.CategoryDeleteArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryUpdateArgsSchema: z.ZodType<Prisma.CategoryUpdateArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  data: z.union([ CategoryUpdateInputSchema,CategoryUncheckedUpdateInputSchema ]),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryUpdateManyArgsSchema: z.ZodType<Prisma.CategoryUpdateManyArgs> = z.object({
  data: z.union([ CategoryUpdateManyMutationInputSchema,CategoryUncheckedUpdateManyInputSchema ]),
  where: CategoryWhereInputSchema.optional(),
}).strict() ;

export const CategoryDeleteManyArgsSchema: z.ZodType<Prisma.CategoryDeleteManyArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
}).strict() ;

export const SubjectCreateArgsSchema: z.ZodType<Prisma.SubjectCreateArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  data: z.union([ SubjectCreateInputSchema,SubjectUncheckedCreateInputSchema ]),
}).strict() ;

export const SubjectUpsertArgsSchema: z.ZodType<Prisma.SubjectUpsertArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  where: SubjectWhereUniqueInputSchema,
  create: z.union([ SubjectCreateInputSchema,SubjectUncheckedCreateInputSchema ]),
  update: z.union([ SubjectUpdateInputSchema,SubjectUncheckedUpdateInputSchema ]),
}).strict() ;

export const SubjectCreateManyArgsSchema: z.ZodType<Prisma.SubjectCreateManyArgs> = z.object({
  data: z.union([ SubjectCreateManyInputSchema,SubjectCreateManyInputSchema.array() ]),
}).strict() ;

export const SubjectCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SubjectCreateManyAndReturnArgs> = z.object({
  data: z.union([ SubjectCreateManyInputSchema,SubjectCreateManyInputSchema.array() ]),
}).strict() ;

export const SubjectDeleteArgsSchema: z.ZodType<Prisma.SubjectDeleteArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  where: SubjectWhereUniqueInputSchema,
}).strict() ;

export const SubjectUpdateArgsSchema: z.ZodType<Prisma.SubjectUpdateArgs> = z.object({
  select: SubjectSelectSchema.optional(),
  include: SubjectIncludeSchema.optional(),
  data: z.union([ SubjectUpdateInputSchema,SubjectUncheckedUpdateInputSchema ]),
  where: SubjectWhereUniqueInputSchema,
}).strict() ;

export const SubjectUpdateManyArgsSchema: z.ZodType<Prisma.SubjectUpdateManyArgs> = z.object({
  data: z.union([ SubjectUpdateManyMutationInputSchema,SubjectUncheckedUpdateManyInputSchema ]),
  where: SubjectWhereInputSchema.optional(),
}).strict() ;

export const SubjectDeleteManyArgsSchema: z.ZodType<Prisma.SubjectDeleteManyArgs> = z.object({
  where: SubjectWhereInputSchema.optional(),
}).strict() ;

export const GradeCreateArgsSchema: z.ZodType<Prisma.GradeCreateArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  data: z.union([ GradeCreateInputSchema,GradeUncheckedCreateInputSchema ]),
}).strict() ;

export const GradeUpsertArgsSchema: z.ZodType<Prisma.GradeUpsertArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  where: GradeWhereUniqueInputSchema,
  create: z.union([ GradeCreateInputSchema,GradeUncheckedCreateInputSchema ]),
  update: z.union([ GradeUpdateInputSchema,GradeUncheckedUpdateInputSchema ]),
}).strict() ;

export const GradeCreateManyArgsSchema: z.ZodType<Prisma.GradeCreateManyArgs> = z.object({
  data: z.union([ GradeCreateManyInputSchema,GradeCreateManyInputSchema.array() ]),
}).strict() ;

export const GradeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.GradeCreateManyAndReturnArgs> = z.object({
  data: z.union([ GradeCreateManyInputSchema,GradeCreateManyInputSchema.array() ]),
}).strict() ;

export const GradeDeleteArgsSchema: z.ZodType<Prisma.GradeDeleteArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  where: GradeWhereUniqueInputSchema,
}).strict() ;

export const GradeUpdateArgsSchema: z.ZodType<Prisma.GradeUpdateArgs> = z.object({
  select: GradeSelectSchema.optional(),
  include: GradeIncludeSchema.optional(),
  data: z.union([ GradeUpdateInputSchema,GradeUncheckedUpdateInputSchema ]),
  where: GradeWhereUniqueInputSchema,
}).strict() ;

export const GradeUpdateManyArgsSchema: z.ZodType<Prisma.GradeUpdateManyArgs> = z.object({
  data: z.union([ GradeUpdateManyMutationInputSchema,GradeUncheckedUpdateManyInputSchema ]),
  where: GradeWhereInputSchema.optional(),
}).strict() ;

export const GradeDeleteManyArgsSchema: z.ZodType<Prisma.GradeDeleteManyArgs> = z.object({
  where: GradeWhereInputSchema.optional(),
}).strict() ;

export const SourceCreateArgsSchema: z.ZodType<Prisma.SourceCreateArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  data: z.union([ SourceCreateInputSchema,SourceUncheckedCreateInputSchema ]),
}).strict() ;

export const SourceUpsertArgsSchema: z.ZodType<Prisma.SourceUpsertArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  where: SourceWhereUniqueInputSchema,
  create: z.union([ SourceCreateInputSchema,SourceUncheckedCreateInputSchema ]),
  update: z.union([ SourceUpdateInputSchema,SourceUncheckedUpdateInputSchema ]),
}).strict() ;

export const SourceCreateManyArgsSchema: z.ZodType<Prisma.SourceCreateManyArgs> = z.object({
  data: z.union([ SourceCreateManyInputSchema,SourceCreateManyInputSchema.array() ]),
}).strict() ;

export const SourceCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SourceCreateManyAndReturnArgs> = z.object({
  data: z.union([ SourceCreateManyInputSchema,SourceCreateManyInputSchema.array() ]),
}).strict() ;

export const SourceDeleteArgsSchema: z.ZodType<Prisma.SourceDeleteArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  where: SourceWhereUniqueInputSchema,
}).strict() ;

export const SourceUpdateArgsSchema: z.ZodType<Prisma.SourceUpdateArgs> = z.object({
  select: SourceSelectSchema.optional(),
  include: SourceIncludeSchema.optional(),
  data: z.union([ SourceUpdateInputSchema,SourceUncheckedUpdateInputSchema ]),
  where: SourceWhereUniqueInputSchema,
}).strict() ;

export const SourceUpdateManyArgsSchema: z.ZodType<Prisma.SourceUpdateManyArgs> = z.object({
  data: z.union([ SourceUpdateManyMutationInputSchema,SourceUncheckedUpdateManyInputSchema ]),
  where: SourceWhereInputSchema.optional(),
}).strict() ;

export const SourceDeleteManyArgsSchema: z.ZodType<Prisma.SourceDeleteManyArgs> = z.object({
  where: SourceWhereInputSchema.optional(),
}).strict() ;

export const TagCategoryCreateArgsSchema: z.ZodType<Prisma.TagCategoryCreateArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  data: z.union([ TagCategoryCreateInputSchema,TagCategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const TagCategoryUpsertArgsSchema: z.ZodType<Prisma.TagCategoryUpsertArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  where: TagCategoryWhereUniqueInputSchema,
  create: z.union([ TagCategoryCreateInputSchema,TagCategoryUncheckedCreateInputSchema ]),
  update: z.union([ TagCategoryUpdateInputSchema,TagCategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const TagCategoryCreateManyArgsSchema: z.ZodType<Prisma.TagCategoryCreateManyArgs> = z.object({
  data: z.union([ TagCategoryCreateManyInputSchema,TagCategoryCreateManyInputSchema.array() ]),
}).strict() ;

export const TagCategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TagCategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ TagCategoryCreateManyInputSchema,TagCategoryCreateManyInputSchema.array() ]),
}).strict() ;

export const TagCategoryDeleteArgsSchema: z.ZodType<Prisma.TagCategoryDeleteArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  where: TagCategoryWhereUniqueInputSchema,
}).strict() ;

export const TagCategoryUpdateArgsSchema: z.ZodType<Prisma.TagCategoryUpdateArgs> = z.object({
  select: TagCategorySelectSchema.optional(),
  include: TagCategoryIncludeSchema.optional(),
  data: z.union([ TagCategoryUpdateInputSchema,TagCategoryUncheckedUpdateInputSchema ]),
  where: TagCategoryWhereUniqueInputSchema,
}).strict() ;

export const TagCategoryUpdateManyArgsSchema: z.ZodType<Prisma.TagCategoryUpdateManyArgs> = z.object({
  data: z.union([ TagCategoryUpdateManyMutationInputSchema,TagCategoryUncheckedUpdateManyInputSchema ]),
  where: TagCategoryWhereInputSchema.optional(),
}).strict() ;

export const TagCategoryDeleteManyArgsSchema: z.ZodType<Prisma.TagCategoryDeleteManyArgs> = z.object({
  where: TagCategoryWhereInputSchema.optional(),
}).strict() ;

export const TagCreateArgsSchema: z.ZodType<Prisma.TagCreateArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  data: z.union([ TagCreateInputSchema,TagUncheckedCreateInputSchema ]),
}).strict() ;

export const TagUpsertArgsSchema: z.ZodType<Prisma.TagUpsertArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereUniqueInputSchema,
  create: z.union([ TagCreateInputSchema,TagUncheckedCreateInputSchema ]),
  update: z.union([ TagUpdateInputSchema,TagUncheckedUpdateInputSchema ]),
}).strict() ;

export const TagCreateManyArgsSchema: z.ZodType<Prisma.TagCreateManyArgs> = z.object({
  data: z.union([ TagCreateManyInputSchema,TagCreateManyInputSchema.array() ]),
}).strict() ;

export const TagCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TagCreateManyAndReturnArgs> = z.object({
  data: z.union([ TagCreateManyInputSchema,TagCreateManyInputSchema.array() ]),
}).strict() ;

export const TagDeleteArgsSchema: z.ZodType<Prisma.TagDeleteArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagUpdateArgsSchema: z.ZodType<Prisma.TagUpdateArgs> = z.object({
  select: TagSelectSchema.optional(),
  include: TagIncludeSchema.optional(),
  data: z.union([ TagUpdateInputSchema,TagUncheckedUpdateInputSchema ]),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagUpdateManyArgsSchema: z.ZodType<Prisma.TagUpdateManyArgs> = z.object({
  data: z.union([ TagUpdateManyMutationInputSchema,TagUncheckedUpdateManyInputSchema ]),
  where: TagWhereInputSchema.optional(),
}).strict() ;

export const TagDeleteManyArgsSchema: z.ZodType<Prisma.TagDeleteManyArgs> = z.object({
  where: TagWhereInputSchema.optional(),
}).strict() ;

export const QuestionTagCreateArgsSchema: z.ZodType<Prisma.QuestionTagCreateArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  data: z.union([ QuestionTagCreateInputSchema,QuestionTagUncheckedCreateInputSchema ]),
}).strict() ;

export const QuestionTagUpsertArgsSchema: z.ZodType<Prisma.QuestionTagUpsertArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  where: QuestionTagWhereUniqueInputSchema,
  create: z.union([ QuestionTagCreateInputSchema,QuestionTagUncheckedCreateInputSchema ]),
  update: z.union([ QuestionTagUpdateInputSchema,QuestionTagUncheckedUpdateInputSchema ]),
}).strict() ;

export const QuestionTagCreateManyArgsSchema: z.ZodType<Prisma.QuestionTagCreateManyArgs> = z.object({
  data: z.union([ QuestionTagCreateManyInputSchema,QuestionTagCreateManyInputSchema.array() ]),
}).strict() ;

export const QuestionTagCreateManyAndReturnArgsSchema: z.ZodType<Prisma.QuestionTagCreateManyAndReturnArgs> = z.object({
  data: z.union([ QuestionTagCreateManyInputSchema,QuestionTagCreateManyInputSchema.array() ]),
}).strict() ;

export const QuestionTagDeleteArgsSchema: z.ZodType<Prisma.QuestionTagDeleteArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  where: QuestionTagWhereUniqueInputSchema,
}).strict() ;

export const QuestionTagUpdateArgsSchema: z.ZodType<Prisma.QuestionTagUpdateArgs> = z.object({
  select: QuestionTagSelectSchema.optional(),
  include: QuestionTagIncludeSchema.optional(),
  data: z.union([ QuestionTagUpdateInputSchema,QuestionTagUncheckedUpdateInputSchema ]),
  where: QuestionTagWhereUniqueInputSchema,
}).strict() ;

export const QuestionTagUpdateManyArgsSchema: z.ZodType<Prisma.QuestionTagUpdateManyArgs> = z.object({
  data: z.union([ QuestionTagUpdateManyMutationInputSchema,QuestionTagUncheckedUpdateManyInputSchema ]),
  where: QuestionTagWhereInputSchema.optional(),
}).strict() ;

export const QuestionTagDeleteManyArgsSchema: z.ZodType<Prisma.QuestionTagDeleteManyArgs> = z.object({
  where: QuestionTagWhereInputSchema.optional(),
}).strict() ;

export const SystemLogCreateArgsSchema: z.ZodType<Prisma.SystemLogCreateArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  data: z.union([ SystemLogCreateInputSchema,SystemLogUncheckedCreateInputSchema ]),
}).strict() ;

export const SystemLogUpsertArgsSchema: z.ZodType<Prisma.SystemLogUpsertArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  where: SystemLogWhereUniqueInputSchema,
  create: z.union([ SystemLogCreateInputSchema,SystemLogUncheckedCreateInputSchema ]),
  update: z.union([ SystemLogUpdateInputSchema,SystemLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const SystemLogCreateManyArgsSchema: z.ZodType<Prisma.SystemLogCreateManyArgs> = z.object({
  data: z.union([ SystemLogCreateManyInputSchema,SystemLogCreateManyInputSchema.array() ]),
}).strict() ;

export const SystemLogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SystemLogCreateManyAndReturnArgs> = z.object({
  data: z.union([ SystemLogCreateManyInputSchema,SystemLogCreateManyInputSchema.array() ]),
}).strict() ;

export const SystemLogDeleteArgsSchema: z.ZodType<Prisma.SystemLogDeleteArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  where: SystemLogWhereUniqueInputSchema,
}).strict() ;

export const SystemLogUpdateArgsSchema: z.ZodType<Prisma.SystemLogUpdateArgs> = z.object({
  select: SystemLogSelectSchema.optional(),
  include: SystemLogIncludeSchema.optional(),
  data: z.union([ SystemLogUpdateInputSchema,SystemLogUncheckedUpdateInputSchema ]),
  where: SystemLogWhereUniqueInputSchema,
}).strict() ;

export const SystemLogUpdateManyArgsSchema: z.ZodType<Prisma.SystemLogUpdateManyArgs> = z.object({
  data: z.union([ SystemLogUpdateManyMutationInputSchema,SystemLogUncheckedUpdateManyInputSchema ]),
  where: SystemLogWhereInputSchema.optional(),
}).strict() ;

export const SystemLogDeleteManyArgsSchema: z.ZodType<Prisma.SystemLogDeleteManyArgs> = z.object({
  where: SystemLogWhereInputSchema.optional(),
}).strict() ;

export const QuestionCreateArgsSchema: z.ZodType<Prisma.QuestionCreateArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  data: z.union([ QuestionCreateInputSchema,QuestionUncheckedCreateInputSchema ]),
}).strict() ;

export const QuestionUpsertArgsSchema: z.ZodType<Prisma.QuestionUpsertArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereUniqueInputSchema,
  create: z.union([ QuestionCreateInputSchema,QuestionUncheckedCreateInputSchema ]),
  update: z.union([ QuestionUpdateInputSchema,QuestionUncheckedUpdateInputSchema ]),
}).strict() ;

export const QuestionCreateManyArgsSchema: z.ZodType<Prisma.QuestionCreateManyArgs> = z.object({
  data: z.union([ QuestionCreateManyInputSchema,QuestionCreateManyInputSchema.array() ]),
}).strict() ;

export const QuestionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.QuestionCreateManyAndReturnArgs> = z.object({
  data: z.union([ QuestionCreateManyInputSchema,QuestionCreateManyInputSchema.array() ]),
}).strict() ;

export const QuestionDeleteArgsSchema: z.ZodType<Prisma.QuestionDeleteArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  where: QuestionWhereUniqueInputSchema,
}).strict() ;

export const QuestionUpdateArgsSchema: z.ZodType<Prisma.QuestionUpdateArgs> = z.object({
  select: QuestionSelectSchema.optional(),
  include: QuestionIncludeSchema.optional(),
  data: z.union([ QuestionUpdateInputSchema,QuestionUncheckedUpdateInputSchema ]),
  where: QuestionWhereUniqueInputSchema,
}).strict() ;

export const QuestionUpdateManyArgsSchema: z.ZodType<Prisma.QuestionUpdateManyArgs> = z.object({
  data: z.union([ QuestionUpdateManyMutationInputSchema,QuestionUncheckedUpdateManyInputSchema ]),
  where: QuestionWhereInputSchema.optional(),
}).strict() ;

export const QuestionDeleteManyArgsSchema: z.ZodType<Prisma.QuestionDeleteManyArgs> = z.object({
  where: QuestionWhereInputSchema.optional(),
}).strict() ;