generator zod {
  provider                         = "zod-prisma-types"
  createOptionalDefaultValuesTypes = true
  createRelationValuesTypes        = true
  output                           = "./generated/zod"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id       Int        @id @default(autoincrement())
  username String     @unique // 用户名，唯一
  email    String     @unique // 邮箱，唯一
  password String // 密码（应该是加密后的哈希值）
  name     String? // 用户昵称，可选
  roles    UserRole[] // 用户拥有的角色列表（多对多关联）

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间

  // 反向关联
  createdRoles         Role[]        @relation("RoleCreator") // 创建的角色
  updatedRoles         Role[]        @relation("RoleUpdater") // 更新的角色
  createdPermissions   Permission[]  @relation("PermissionCreator") // 创建的权限
  updatedPermissions   Permission[]  @relation("PermissionUpdater") // 更新的权限
  createdCategories    Category[]    @relation("CategoryCreator") // 创建的分类
  updatedCategories    Category[]    @relation("CategoryUpdater") // 更新的分类
  createdSubjects      Subject[]     @relation("SubjectCreator") // 创建的学科
  updatedSubjects      Subject[]     @relation("SubjectUpdater") // 更新的学科
  createdGrades        Grade[]       @relation("GradeCreator") // 创建的年级
  updatedGrades        Grade[]       @relation("GradeUpdater") // 更新的年级
  createdSources       Source[]      @relation("SourceCreator") // 创建的来源
  updatedSources       Source[]      @relation("SourceUpdater") // 更新的来源
  createdQuestions     Question[]    @relation("QuestionCreator") // 创建的题目
  updatedQuestions     Question[]    @relation("QuestionUpdater") // 更新的题目
  createdTagCategories TagCategory[] @relation("TagCategoryCreator")
  updatedTagCategories TagCategory[] @relation("TagCategoryUpdater")
  createdTags          Tag[]         @relation("TagCreator")
  updatedTags          Tag[]         @relation("TagUpdater")
  createdQuestionTags  QuestionTag[] @relation("QuestionTagCreator")
  updatedQuestionTags  QuestionTag[] @relation("QuestionTagUpdater")
  systemLogs           SystemLog[] // 用户的操作日志
}

// 角色模型
model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique // 角色名称，如："管理员"、"教师"、"学生"
  description String? // 角色描述
  permissions RolePermission[] // 角色拥有的权限列表（多对多关联）
  users       UserRole[] // 拥有该角色的用户列表（多对多关联）

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间
  createdBy User     @relation("RoleCreator", fields: [creatorId], references: [id]) // 创建者
  creatorId Int
  updatedBy User     @relation("RoleUpdater", fields: [updaterId], references: [id]) // 更新者
  updaterId Int
}

// 权限模型
model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique // 权限标识符，如："user.create"、"question.edit"
  description String? // 权限描述，如："创建用户"、"编辑题目"
  roles       RolePermission[] // 包含此权限的角色列表（多对多关联）

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间
  createdBy User     @relation("PermissionCreator", fields: [creatorId], references: [id]) // 创建者
  creatorId Int
  updatedBy User     @relation("PermissionUpdater", fields: [updaterId], references: [id]) // 更新者
  updaterId Int
}

// 用户-角色关联表
model UserRole {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id]) // 关联到用户
  userId Int // 用户ID
  role   Role @relation(fields: [roleId], references: [id]) // 关联到角色
  roleId Int // 角色ID

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间

  @@unique([userId, roleId]) // 确保用户和角色的组合唯一
}

// 角色-权限关联表
model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id]) // 关联到角色
  roleId       Int // 角色ID
  permission   Permission @relation(fields: [permissionId], references: [id]) // 关联到权限
  permissionId Int // 权限ID

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间

  @@unique([roleId, permissionId]) // 确保角色和权限的组合唯一
}

// 题目分类模型
model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique // 分类名称，如："数学"、"物理"
  description String? // 分类描述
  questions   Question[] // 该分类下的题目列表

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间
  createdBy User     @relation("CategoryCreator", fields: [creatorId], references: [id]) // 创建者
  creatorId Int
  updatedBy User     @relation("CategoryUpdater", fields: [updaterId], references: [id]) // 更新者
  updaterId Int
}

// 学科模型
model Subject {
  id          Int        @id @default(autoincrement())
  name        String     @unique // 学科名称，如："数学"、"语文"、"英语"
  description String? // 学科描述
  questions   Question[] // 该学科下的题目列表

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间
  createdBy User     @relation("SubjectCreator", fields: [creatorId], references: [id]) // 创建者
  creatorId Int
  updatedBy User     @relation("SubjectUpdater", fields: [updaterId], references: [id]) // 更新者
  updaterId Int
}

// 年级模型
model Grade {
  id          Int        @id @default(autoincrement())
  name        String     @unique // 年级名称，如："一年级"、"初一"、"高一"
  description String? // 年级描述
  questions   Question[] // 该年级下的题目列表

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间
  createdBy User     @relation("GradeCreator", fields: [creatorId], references: [id]) // 创建者
  creatorId Int
  updatedBy User     @relation("GradeUpdater", fields: [updaterId], references: [id]) // 更新者
  updaterId Int
}

// 题目来源模型
model Source {
  id          Int        @id @default(autoincrement())
  name        String     @unique // 来源名称，如："某中学"、"某教育机构"
  type        String // 来源类型：SCHOOL（学校）、INSTITUTION（机构）、EXAM（考试）
  description String? // 来源描述
  questions   Question[] // 来自该来源的题目列表

  // 创建和更新信息
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间
  createdBy User     @relation("SourceCreator", fields: [creatorId], references: [id]) // 创建者
  creatorId Int
  updatedBy User     @relation("SourceUpdater", fields: [updaterId], references: [id]) // 更新者
  updaterId Int
}

// 标签类别模型
model TagCategory {
  id            Int     @id @default(autoincrement())
  name          String  @unique // 类别名称，如："来源"、"难度"、"题类"等
  description   String? // 类别描述
  code          String  @unique // 类别代码，如："source"、"difficulty"、"type"
  allowMultiple Boolean @default(false) // 是否允许多选
  sortOrder     Int     @default(0) // 排序顺序

  // 关联
  tags Tag[] // 该类别下的所有标签

  // 创建和更新信息
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation("TagCategoryCreator", fields: [createdById], references: [id])
  createdById Int?
  updatedBy   User?    @relation("TagCategoryUpdater", fields: [updatedById], references: [id])
  updatedById Int?
}

// 标签模型
model Tag {
  id          Int     @id @default(autoincrement())
  name        String // 标签名称
  code        String // 标签代码
  description String? // 标签描述
  sortOrder   Int     @default(0) // 排序顺序

  // 关联
  category   TagCategory   @relation(fields: [categoryId], references: [id]) // 所属类别
  categoryId Int
  parent     Tag?          @relation("TagHierarchy", fields: [parentId], references: [id]) // 父标签
  parentId   Int?
  children   Tag[]         @relation("TagHierarchy") // 子标签
  questions  QuestionTag[] // 使用此标签的题目

  // 创建和更新信息
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation("TagCreator", fields: [createdById], references: [id])
  createdById Int?
  updatedBy   User?    @relation("TagUpdater", fields: [updatedById], references: [id])
  updatedById Int?

  @@unique([categoryId, code]) // 确保同一类别下的标签代码唯一
}

// 题目-标签关联模型
model QuestionTag {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int

  // 创建和更新信息
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation("QuestionTagCreator", fields: [createdById], references: [id])
  createdById Int?
  updatedBy   User?    @relation("QuestionTagUpdater", fields: [updatedById], references: [id])
  updatedById Int?

  @@unique([questionId, tagId]) // 确保同一题目不会重复添加同一个标签
}

// 系统日志模型
model SystemLog {
  id        Int      @id @default(autoincrement())
  module    String // 模块：AUTH、USER、ROLE、PERMISSION、QUESTION、EXAM、TEST
  action    String // 操作类型：CREATE、UPDATE、DELETE等
  targetId  String? // 操作目标ID
  details   String // 操作详情（JSON格式）
  level     Int      @default(1) // 日志等级
  userId    Int // 操作用户ID
  user      User     @relation(fields: [userId], references: [id])
  ip        String? // 操作者IP
  userAgent String? // 操作者浏览器信息
  timestamp DateTime @default(now()) // 操作时间

  @@index([module, action])
  @@index([timestamp])
  @@index([userId])
  @@index([level])
  @@index([targetId])
}

// 题目模型
model Question {
  id          Int     @id @default(autoincrement())
  title       String // 题目标题
  content     String // 题目内容
  type        String // 题目类型：multiple_choice（选择题）、true_false（判断题）、essay（问答题）
  difficulty  Int     @default(3) // 难度等级：1-5星
  options     String? // 选项内容（JSON格式，选择题使用）
  answer      String // 答案（选择题为选项索引，其他题型为答案文本）
  explanation String? // 答案解释

  // 关联字段
  category   Category @relation(fields: [categoryId], references: [id]) // 所属分类
  categoryId Int
  subject    Subject  @relation(fields: [subjectId], references: [id]) // 所属学科
  subjectId  Int
  grade      Grade    @relation(fields: [gradeId], references: [id]) // 所属年级
  gradeId    Int
  source     Source   @relation(fields: [sourceId], references: [id]) // 题目来源
  sourceId   Int

  // 创建和更新信息
  createdAt   DateTime @default(now()) // 创建时间
  updatedAt   DateTime @updatedAt // 更新时间
  createdBy   User?    @relation("QuestionCreator", fields: [createdById], references: [id]) // 创建者
  createdById Int?     @default(1) // 默认为ID为1的用户
  updatedBy   User?    @relation("QuestionUpdater", fields: [updatedById], references: [id]) // 更新者
  updatedById Int?     @default(1) // 默认为ID为1的用户

  // 标签关联
  tags QuestionTag[] // 题目的标签
}
